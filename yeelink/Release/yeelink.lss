
yeelink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001648  000016dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f5  0080016e  0080016e  0000174a  2**0
                  ALLOC
  3 .stab         0000daac  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001eea5  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__dtors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_16>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_18>
      4c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_19>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	68 00       	.word	0x0068	; ????
      6a:	73 00       	.word	0x0073	; ????
      6c:	7e 00       	.word	0x007e	; ????
      6e:	8d 00       	.word	0x008d	; ????
      70:	98 00       	.word	0x0098	; ????
      72:	a3 00       	.word	0x00a3	; ????
      74:	de 00       	.word	0x00de	; ????
      76:	3e 03       	fmul	r19, r22
      78:	d4 03       	fmuls	r21, r20

0000007a <__ctors_end>:
      7a:	e3 00       	.word	0x00e3	; ????

0000007c <__dtors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 e4       	ldi	r30, 0x48	; 72
      90:	f6 e1       	ldi	r31, 0x16	; 22
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 36       	cpi	r26, 0x6E	; 110
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	ae e6       	ldi	r26, 0x6E	; 110
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a3 36       	cpi	r26, 0x63	; 99
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>

000000ae <__do_global_ctors>:
      ae:	10 e0       	ldi	r17, 0x00	; 0
      b0:	ca e7       	ldi	r28, 0x7A	; 122
      b2:	d0 e0       	ldi	r29, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_global_ctors+0x10>
      b6:	22 97       	sbiw	r28, 0x02	; 2
      b8:	fe 01       	movw	r30, r28
      ba:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__tablejump__>
      be:	c8 36       	cpi	r28, 0x68	; 104
      c0:	d1 07       	cpc	r29, r17
      c2:	c9 f7       	brne	.-14     	; 0xb6 <__do_global_ctors+0x8>
      c4:	0e 94 b1 05 	call	0xb62	; 0xb62 <main>
      c8:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__do_global_dtors>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <_GLOBAL__I__ZN9DhcpClass13beginWithDHCPEPhmm>:
}

IPAddress DhcpClass::getDnsServerIp()
{
    return IPAddress(_dhcpDnsServerIp);
}
      d0:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
      d2:	8e e6       	ldi	r24, 0x6E	; 110
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	00 e0       	ldi	r16, 0x00	; 0
      de:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN9IPAddressC1Ehhhh>
      e2:	0f 91       	pop	r16
      e4:	08 95       	ret

000000e6 <_GLOBAL__I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
      e6:	0f 93       	push	r16
      e8:	84 e7       	ldi	r24, 0x74	; 116
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN9IPAddressC1Ehhhh>
      f8:	0f 91       	pop	r16
      fa:	08 95       	ret

000000fc <_GLOBAL__I__ZN13EthernetClass6_stateE>:
IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}

EthernetClass Ethernet;
      fc:	0f 93       	push	r16
      fe:	80 e8       	ldi	r24, 0x80	; 128
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	00 e0       	ldi	r16, 0x00	; 0
     10a:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN9IPAddressC1Ehhhh>
#include "EthernetClient.h"
#include "EthernetServer.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
     10e:	8a e7       	ldi	r24, 0x7A	; 122
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN9IPAddressC1Ev>
     116:	0f 91       	pop	r16
     118:	08 95       	ret

0000011a <_GLOBAL__I__ZN14EthernetClient8_srcportE>:
// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}
     11a:	0f 93       	push	r16
     11c:	86 e8       	ldi	r24, 0x86	; 134
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN9IPAddressC1Ehhhh>
     12c:	0f 91       	pop	r16
     12e:	08 95       	ret

00000130 <_GLOBAL__I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
     130:	0f 93       	push	r16
     132:	8c e8       	ldi	r24, 0x8C	; 140
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN9IPAddressC1Ehhhh>
     142:	0f 91       	pop	r16
     144:	08 95       	ret

00000146 <_GLOBAL__I__ZN11EthernetUDPC2Ev>:
{
  while (available())
  {
    read();
  }
}
     146:	0f 93       	push	r16
     148:	82 e9       	ldi	r24, 0x92	; 146
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN9IPAddressC1Ehhhh>
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <_Z41__static_initialization_and_destruction_0ii.clone.0>:
{
	long v;
	v=random(256);
	//client.Post(v);
	delay(20*1000);
}
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	29 f4       	brne	.+10     	; 0x16c <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
#include "ylclient.h"

extern HardwareSerial Serial;
using namespace yeelink;

ylclient client;
     162:	88 e9       	ldi	r24, 0x98	; 152
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN7yeelink8ylclientC1Ev>
     16a:	08 95       	ret
     16c:	00 97       	sbiw	r24, 0x00	; 0
     16e:	21 f4       	brne	.+8      	; 0x178 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
     170:	88 e9       	ldi	r24, 0x98	; 152
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 4c 01 	call	0x298	; 0x298 <_ZN7yeelink8ylclientD1Ev>
     178:	08 95       	ret

0000017a <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
	Serial.begin(9600);
     17a:	81 e3       	ldi	r24, 0x31	; 49
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	55 e2       	ldi	r21, 0x25	; 37
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN14HardwareSerial5beginEm>
	//初始化yeelink client
	//client.setAPIKey("apikey");	//设置API key，这里采用默认的key
	//client.setAPIVersion("v1.0");	//设置API版本，除非yeelink API升级，则采用默认的v1.0版本
	client.setEthernetCardType(SERIALOVERHTTP );
     18a:	88 e9       	ldi	r24, 0x98	; 152
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	62 e0       	ldi	r22, 0x02	; 2
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>

	randomSeed(analogRead(0));
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	0e 94 97 06 	call	0xd2e	; 0xd2e <analogRead>
     19c:	0e 94 8b 05 	call	0xb16	; 0xb16 <_Z10randomSeedj>
}
     1a0:	08 95       	ret

000001a2 <loop>:

// The loop function is called in an endless loop
void loop()
{
	long v;
	v=random(256);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	71 e0       	ldi	r23, 0x01	; 1
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 93 05 	call	0xb26	; 0xb26 <_Z6randoml>
	//client.Post(v);
	delay(20*1000);
     1ae:	60 e2       	ldi	r22, 0x20	; 32
     1b0:	7e e4       	ldi	r23, 0x4E	; 78
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 35 06 	call	0xc6a	; 0xc6a <delay>
}
     1ba:	08 95       	ret

000001bc <_GLOBAL__I_client>:
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z41__static_initialization_and_destruction_0ii.clone.0>
     1c4:	08 95       	ret

000001c6 <_GLOBAL__D_client>:
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z41__static_initialization_and_destruction_0ii.clone.0>
     1ce:	08 95       	ret

000001d0 <_ZN7yeelink17ylGenericEthernetD1Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     1d0:	27 e3       	ldi	r18, 0x37	; 55
     1d2:	31 e0       	ldi	r19, 0x01	; 1
     1d4:	fc 01       	movw	r30, r24
     1d6:	31 83       	std	Z+1, r19	; 0x01
     1d8:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     1da:	08 95       	ret

000001dc <_ZN7yeelink17ylGenericEthernetD0Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     1dc:	27 e3       	ldi	r18, 0x37	; 55
     1de:	31 e0       	ldi	r19, 0x01	; 1
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     1e6:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZdlPv>
     1ea:	08 95       	ret

000001ec <_ZN7yeelink17ylGenericEthernetC1Ev>:
//#include "ylconst.h"

namespace yeelink
{

ylGenericEthernet::ylGenericEthernet()
     1ec:	fc 01       	movw	r30, r24
     1ee:	87 e3       	ldi	r24, 0x37	; 55
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	91 83       	std	Z+1, r25	; 0x01
     1f4:	80 83       	st	Z, r24
{
	seconds = 10; //API规定两条记录发送的时间间隔不少于10s
     1f6:	8a e0       	ldi	r24, 0x0A	; 10
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	93 83       	std	Z+3, r25	; 0x03
     1fc:	82 83       	std	Z+2, r24	; 0x02
	apiHeader = 0;
     1fe:	15 82       	std	Z+5, r1	; 0x05
     200:	14 82       	std	Z+4, r1	; 0x04
	jsonStr = 0;
     202:	17 82       	std	Z+7, r1	; 0x07
     204:	16 82       	std	Z+6, r1	; 0x06

}
     206:	08 95       	ret

00000208 <_ZN7yeelink12ylSerialHTTP12postKeyValueEPcS1_>:

bool ylSerialHTTP::postKeyValue(char* key, char* value)
{

	return 0;
}
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <_ZN7yeelink12ylSerialHTTP4PostEf>:
}

bool ylSerialHTTP::Post(float value)
{
	//sendValueflag();
	return serial->print(value);
     20c:	fc 01       	movw	r30, r24
     20e:	82 85       	ldd	r24, Z+10	; 0x0a
     210:	93 85       	ldd	r25, Z+11	; 0x0b
     212:	22 e0       	ldi	r18, 0x02	; 2
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN5Print5printEdi>
     21a:	21 e0       	ldi	r18, 0x01	; 1
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	09 f4       	brne	.+2      	; 0x222 <_ZN7yeelink12ylSerialHTTP4PostEf+0x16>
     220:	20 e0       	ldi	r18, 0x00	; 0
}
     222:	82 2f       	mov	r24, r18
     224:	08 95       	ret

00000226 <_ZN7yeelink12ylSerialHTTP4PostEl>:
}

bool ylSerialHTTP::Post(long value)
{
	//sendValueflag();
	return serial->print(value);
     226:	fc 01       	movw	r30, r24
     228:	82 85       	ldd	r24, Z+10	; 0x0a
     22a:	93 85       	ldd	r25, Z+11	; 0x0b
     22c:	2a e0       	ldi	r18, 0x0A	; 10
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN5Print5printEli>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	09 f4       	brne	.+2      	; 0x23c <_ZN7yeelink12ylSerialHTTP4PostEl+0x16>
     23a:	20 e0       	ldi	r18, 0x00	; 0
}
     23c:	82 2f       	mov	r24, r18
     23e:	08 95       	ret

00000240 <_ZN7yeelink12ylSerialHTTPD1Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     240:	25 e4       	ldi	r18, 0x45	; 69
     242:	31 e0       	ldi	r19, 0x01	; 1
     244:	fc 01       	movw	r30, r24
     246:	31 83       	std	Z+1, r19	; 0x01
     248:	20 83       	st	Z, r18
     24a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     24e:	08 95       	ret

00000250 <_ZN7yeelink12ylSerialHTTPD0Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
     256:	85 e4       	ldi	r24, 0x45	; 69
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	99 83       	std	Y+1, r25	; 0x01
     25c:	88 83       	st	Y, r24
     25e:	ce 01       	movw	r24, r28
     260:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     264:	ce 01       	movw	r24, r28
     266:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZdlPv>
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <_ZN7yeelink12ylSerialHTTPC1Ei>:
#endif

namespace yeelink
{

ylSerialHTTP::ylSerialHTTP(int serialIndex)
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	ec 01       	movw	r28, r24
     27a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN7yeelink17ylGenericEthernetC1Ev>
     27e:	85 e4       	ldi	r24, 0x45	; 69
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	99 83       	std	Y+1, r25	; 0x01
     284:	88 83       	st	Y, r24
#else
		serial = &Serial;
#endif
		break;
	default:
		serial = &Serial;
     286:	81 e3       	ldi	r24, 0x31	; 49
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	9b 87       	std	Y+11, r25	; 0x0b
     28c:	8a 87       	std	Y+10, r24	; 0x0a
	}

}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <_ZN7yeelink8ylclientD1Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     298:	23 e5       	ldi	r18, 0x53	; 83
     29a:	31 e0       	ldi	r19, 0x01	; 1
     29c:	fc 01       	movw	r30, r24
     29e:	31 83       	std	Z+1, r19	; 0x01
     2a0:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     2a2:	08 95       	ret

000002a4 <_ZN7yeelink8ylclientD0Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     2a4:	23 e5       	ldi	r18, 0x53	; 83
     2a6:	31 e0       	ldi	r19, 0x01	; 1
     2a8:	fc 01       	movw	r30, r24
     2aa:	31 83       	std	Z+1, r19	; 0x01
     2ac:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     2ae:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZdlPv>
     2b2:	08 95       	ret

000002b4 <_ZN7yeelink8ylclientC1Ev>:
//#endif

namespace yeelink
{

ylclient::ylclient()
     2b4:	fc 01       	movw	r30, r24
     2b6:	83 e5       	ldi	r24, 0x53	; 83
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	91 83       	std	Z+1, r25	; 0x01
     2bc:	80 83       	st	Z, r24
{
	// TODO Auto-generated constructor stub
	this->_connected = false;
     2be:	16 82       	std	Z+6, r1	; 0x06
	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	93 83       	std	Z+3, r25	; 0x03
     2c6:	82 83       	std	Z+2, r24	; 0x02
	this->_cardtype = SERIALOVERHTTP;
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	95 83       	std	Z+5, r25	; 0x05
     2ce:	84 83       	std	Z+4, r24	; 0x04
	this->_apiver = (char*) "v1.0";
     2d0:	81 e2       	ldi	r24, 0x21	; 33
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	90 87       	std	Z+8, r25	; 0x08
     2d6:	87 83       	std	Z+7, r24	; 0x07
	this->_activedeviceid = 0;
     2d8:	12 86       	std	Z+10, r1	; 0x0a
     2da:	11 86       	std	Z+9, r1	; 0x09
	this->_activesensorid = 0;
     2dc:	14 86       	std	Z+12, r1	; 0x0c
     2de:	13 86       	std	Z+11, r1	; 0x0b
	this->_serialIndex = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	96 87       	std	Z+14, r25	; 0x0e
     2e6:	85 87       	std	Z+13, r24	; 0x0d

}
     2e8:	08 95       	ret

000002ea <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>:
//此处应该能够判断板子类型，然后决定串口数量

}

void ylclient::setEthernetCardType(ETHERNETCARD cardType)
{
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ec 01       	movw	r28, r24
	this->_cardtype = cardType;
     2f4:	7d 83       	std	Y+5, r23	; 0x05
     2f6:	6c 83       	std	Y+4, r22	; 0x04
	switch (cardType)
     2f8:	62 30       	cpi	r22, 0x02	; 2
     2fa:	71 05       	cpc	r23, r1
     2fc:	59 f4       	brne	.+22     	; 0x314 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x2a>
	case ENC28J60:

		break;

	case SERIALOVERHTTP:
		net = new ylSerialHTTP();
     2fe:	8c e0       	ldi	r24, 0x0C	; 12
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Znwj>
     306:	8c 01       	movw	r16, r24
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7yeelink12ylSerialHTTPC1Ei>
     310:	0f 87       	std	Y+15, r16	; 0x0f
     312:	18 8b       	std	Y+16, r17	; 0x10

		break;
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	08 95       	ret

0000031e <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     31e:	fc 01       	movw	r30, r24
     320:	84 85       	ldd	r24, Z+12	; 0x0c
     322:	95 85       	ldd	r25, Z+13	; 0x0d
     324:	fc 01       	movw	r30, r24
     326:	e0 5c       	subi	r30, 0xC0	; 192
     328:	ff 4f       	sbci	r31, 0xFF	; 255
     32a:	20 81       	ld	r18, Z
     32c:	31 81       	ldd	r19, Z+1	; 0x01
     32e:	8e 5b       	subi	r24, 0xBE	; 190
     330:	9f 4f       	sbci	r25, 0xFF	; 255
     332:	fc 01       	movw	r30, r24
     334:	80 81       	ld	r24, Z
     336:	91 81       	ldd	r25, Z+1	; 0x01
     338:	28 1b       	sub	r18, r24
     33a:	39 0b       	sbc	r19, r25
     33c:	2f 73       	andi	r18, 0x3F	; 63
     33e:	30 70       	andi	r19, 0x00	; 0
}
     340:	c9 01       	movw	r24, r18
     342:	08 95       	ret

00000344 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     344:	fc 01       	movw	r30, r24
     346:	84 85       	ldd	r24, Z+12	; 0x0c
     348:	95 85       	ldd	r25, Z+13	; 0x0d
     34a:	fc 01       	movw	r30, r24
     34c:	e0 5c       	subi	r30, 0xC0	; 192
     34e:	ff 4f       	sbci	r31, 0xFF	; 255
     350:	40 81       	ld	r20, Z
     352:	51 81       	ldd	r21, Z+1	; 0x01
     354:	fc 01       	movw	r30, r24
     356:	ee 5b       	subi	r30, 0xBE	; 190
     358:	ff 4f       	sbci	r31, 0xFF	; 255
     35a:	20 81       	ld	r18, Z
     35c:	31 81       	ldd	r19, Z+1	; 0x01
     35e:	42 17       	cp	r20, r18
     360:	53 07       	cpc	r21, r19
     362:	41 f0       	breq	.+16     	; 0x374 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     364:	01 90       	ld	r0, Z+
     366:	f0 81       	ld	r31, Z
     368:	e0 2d       	mov	r30, r0
     36a:	e8 0f       	add	r30, r24
     36c:	f9 1f       	adc	r31, r25
     36e:	20 81       	ld	r18, Z
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	02 c0       	rjmp	.+4      	; 0x378 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     374:	2f ef       	ldi	r18, 0xFF	; 255
     376:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     378:	c9 01       	movw	r24, r18
     37a:	08 95       	ret

0000037c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     37c:	fc 01       	movw	r30, r24
     37e:	84 85       	ldd	r24, Z+12	; 0x0c
     380:	95 85       	ldd	r25, Z+13	; 0x0d
     382:	fc 01       	movw	r30, r24
     384:	e0 5c       	subi	r30, 0xC0	; 192
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	40 81       	ld	r20, Z
     38a:	51 81       	ldd	r21, Z+1	; 0x01
     38c:	fc 01       	movw	r30, r24
     38e:	ee 5b       	subi	r30, 0xBE	; 190
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	20 81       	ld	r18, Z
     394:	31 81       	ldd	r19, Z+1	; 0x01
     396:	42 17       	cp	r20, r18
     398:	53 07       	cpc	r21, r19
     39a:	71 f0       	breq	.+28     	; 0x3b8 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     39c:	a0 81       	ld	r26, Z
     39e:	b1 81       	ldd	r27, Z+1	; 0x01
     3a0:	a8 0f       	add	r26, r24
     3a2:	b9 1f       	adc	r27, r25
     3a4:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	8f 73       	andi	r24, 0x3F	; 63
     3ae:	90 70       	andi	r25, 0x00	; 0
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
    return c;
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     3b8:	2f ef       	ldi	r18, 0xFF	; 255
     3ba:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     3bc:	c9 01       	movw	r24, r18
     3be:	08 95       	ret

000003c0 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     3c0:	dc 01       	movw	r26, r24
     3c2:	1e 96       	adiw	r26, 0x0e	; 14
     3c4:	8d 91       	ld	r24, X+
     3c6:	9c 91       	ld	r25, X
     3c8:	1f 97       	sbiw	r26, 0x0f	; 15
     3ca:	fc 01       	movw	r30, r24
     3cc:	e0 5c       	subi	r30, 0xC0	; 192
     3ce:	ff 4f       	sbci	r31, 0xFF	; 255
     3d0:	8e 5b       	subi	r24, 0xBE	; 190
     3d2:	9f 4f       	sbci	r25, 0xFF	; 255
     3d4:	40 81       	ld	r20, Z
     3d6:	51 81       	ldd	r21, Z+1	; 0x01
     3d8:	dc 01       	movw	r26, r24
     3da:	2d 91       	ld	r18, X+
     3dc:	3c 91       	ld	r19, X
     3de:	11 97       	sbiw	r26, 0x01	; 1
     3e0:	42 17       	cp	r20, r18
     3e2:	53 07       	cpc	r21, r19
     3e4:	b9 f7       	brne	.-18     	; 0x3d4 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     3e6:	08 95       	ret

000003e8 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     3e8:	1f 93       	push	r17
     3ea:	fc 01       	movw	r30, r24
     3ec:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     3ee:	26 85       	ldd	r18, Z+14	; 0x0e
     3f0:	37 85       	ldd	r19, Z+15	; 0x0f
     3f2:	d9 01       	movw	r26, r18
     3f4:	a0 5c       	subi	r26, 0xC0	; 192
     3f6:	bf 4f       	sbci	r27, 0xFF	; 255
     3f8:	8d 91       	ld	r24, X+
     3fa:	9c 91       	ld	r25, X
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	60 e4       	ldi	r22, 0x40	; 64
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     406:	d9 01       	movw	r26, r18
     408:	ae 5b       	subi	r26, 0xBE	; 190
     40a:	bf 4f       	sbci	r27, 0xFF	; 255
     40c:	4d 91       	ld	r20, X+
     40e:	5c 91       	ld	r21, X
     410:	11 97       	sbiw	r26, 0x01	; 1
     412:	84 17       	cp	r24, r20
     414:	95 07       	cpc	r25, r21
     416:	d1 f3       	breq	.-12     	; 0x40c <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     418:	d9 01       	movw	r26, r18
     41a:	a0 5c       	subi	r26, 0xC0	; 192
     41c:	bf 4f       	sbci	r27, 0xFF	; 255
     41e:	0d 90       	ld	r0, X+
     420:	bc 91       	ld	r27, X
     422:	a0 2d       	mov	r26, r0
     424:	a2 0f       	add	r26, r18
     426:	b3 1f       	adc	r27, r19
     428:	1c 93       	st	X, r17
  _tx_buffer->head = i;
     42a:	a6 85       	ldd	r26, Z+14	; 0x0e
     42c:	b7 85       	ldd	r27, Z+15	; 0x0f
     42e:	a0 5c       	subi	r26, 0xC0	; 192
     430:	bf 4f       	sbci	r27, 0xFF	; 255
     432:	11 96       	adiw	r26, 0x01	; 1
     434:	9c 93       	st	X, r25
     436:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     438:	a6 89       	ldd	r26, Z+22	; 0x16
     43a:	b7 89       	ldd	r27, Z+23	; 0x17
     43c:	2c 91       	ld	r18, X
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	05 8c       	ldd	r0, Z+29	; 0x1d
     444:	02 c0       	rjmp	.+4      	; 0x44a <_ZN14HardwareSerial5writeEh+0x62>
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <_ZN14HardwareSerial5writeEh+0x5e>
     44e:	28 2b       	or	r18, r24
     450:	2c 93       	st	X, r18
  
  return 1;
}
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	1f 91       	pop	r17
     458:	08 95       	ret

0000045a <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     45a:	fb 01       	movw	r30, r22
     45c:	e0 5c       	subi	r30, 0xC0	; 192
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	20 81       	ld	r18, Z
     462:	31 81       	ldd	r19, Z+1	; 0x01
     464:	2f 5f       	subi	r18, 0xFF	; 255
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	2f 73       	andi	r18, 0x3F	; 63
     46a:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     46c:	db 01       	movw	r26, r22
     46e:	ae 5b       	subi	r26, 0xBE	; 190
     470:	bf 4f       	sbci	r27, 0xFF	; 255
     472:	4d 91       	ld	r20, X+
     474:	5c 91       	ld	r21, X
     476:	11 97       	sbiw	r26, 0x01	; 1
     478:	24 17       	cp	r18, r20
     47a:	35 07       	cpc	r19, r21
     47c:	39 f0       	breq	.+14     	; 0x48c <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
     47e:	a0 81       	ld	r26, Z
     480:	b1 81       	ldd	r27, Z+1	; 0x01
     482:	a6 0f       	add	r26, r22
     484:	b7 1f       	adc	r27, r23
     486:	8c 93       	st	X, r24
    buffer->head = i;
     488:	31 83       	std	Z+1, r19	; 0x01
     48a:	20 83       	st	Z, r18
     48c:	08 95       	ret

0000048e <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     48e:	08 95       	ret

00000490 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	2f 93       	push	r18
     49c:	3f 93       	push	r19
     49e:	4f 93       	push	r20
     4a0:	5f 93       	push	r21
     4a2:	6f 93       	push	r22
     4a4:	7f 93       	push	r23
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25
     4aa:	af 93       	push	r26
     4ac:	bf 93       	push	r27
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     4b2:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
     4b6:	69 ea       	ldi	r22, 0xA9	; 169
     4b8:	71 e0       	ldi	r23, 0x01	; 1
     4ba:	0e 94 2d 02 	call	0x45a	; 0x45a <_Z10store_charhP11ring_buffer>
  }
     4be:	ff 91       	pop	r31
     4c0:	ef 91       	pop	r30
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	7f 91       	pop	r23
     4cc:	6f 91       	pop	r22
     4ce:	5f 91       	pop	r21
     4d0:	4f 91       	pop	r20
     4d2:	3f 91       	pop	r19
     4d4:	2f 91       	pop	r18
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     4e0:	81 e3       	ldi	r24, 0x31	; 49
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN14HardwareSerial9availableEv>
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	11 f0       	breq	.+4      	; 0x4f0 <_Z14serialEventRunv+0x10>
     4ec:	0e 94 47 02 	call	0x48e	; 0x48e <_Z11serialEventv>
     4f0:	08 95       	ret

000004f2 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
     4fc:	2f 93       	push	r18
     4fe:	3f 93       	push	r19
     500:	5f 93       	push	r21
     502:	6f 93       	push	r22
     504:	7f 93       	push	r23
     506:	8f 93       	push	r24
     508:	9f 93       	push	r25
     50a:	af 93       	push	r26
     50c:	bf 93       	push	r27
     50e:	ef 93       	push	r30
     510:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     512:	20 91 2d 02 	lds	r18, 0x022D
     516:	30 91 2e 02 	lds	r19, 0x022E
     51a:	80 91 2f 02 	lds	r24, 0x022F
     51e:	90 91 30 02 	lds	r25, 0x0230
     522:	28 17       	cp	r18, r24
     524:	39 07       	cpc	r19, r25
     526:	31 f4       	brne	.+12     	; 0x534 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     528:	80 91 c1 00 	lds	r24, 0x00C1
     52c:	8f 7d       	andi	r24, 0xDF	; 223
     52e:	80 93 c1 00 	sts	0x00C1, r24
     532:	16 c0       	rjmp	.+44     	; 0x560 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     534:	e0 91 2f 02 	lds	r30, 0x022F
     538:	f0 91 30 02 	lds	r31, 0x0230
     53c:	e3 51       	subi	r30, 0x13	; 19
     53e:	fe 4f       	sbci	r31, 0xFE	; 254
     540:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     542:	80 91 2f 02 	lds	r24, 0x022F
     546:	90 91 30 02 	lds	r25, 0x0230
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	60 e4       	ldi	r22, 0x40	; 64
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__divmodhi4>
     554:	90 93 30 02 	sts	0x0230, r25
     558:	80 93 2f 02 	sts	0x022F, r24
	
  #if defined(UDR0)
    UDR0 = c;
     55c:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	7f 91       	pop	r23
     56e:	6f 91       	pop	r22
     570:	5f 91       	pop	r21
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     580:	df 92       	push	r13
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	7a 01       	movw	r14, r20
     592:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     594:	dd 24       	eor	r13, r13
     596:	d3 94       	inc	r13
     598:	40 30       	cpi	r20, 0x00	; 0
     59a:	81 ee       	ldi	r24, 0xE1	; 225
     59c:	58 07       	cpc	r21, r24
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	68 07       	cpc	r22, r24
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	78 07       	cpc	r23, r24
     5a6:	49 f4       	brne	.+18     	; 0x5ba <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     5a8:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     5aa:	ec 89       	ldd	r30, Y+20	; 0x14
     5ac:	fd 89       	ldd	r31, Y+21	; 0x15
     5ae:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     5b0:	60 e8       	ldi	r22, 0x80	; 128
     5b2:	74 e8       	ldi	r23, 0x84	; 132
     5b4:	8e e1       	ldi	r24, 0x1E	; 30
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0f c0       	rjmp	.+30     	; 0x5d8 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     5ba:	ec 89       	ldd	r30, Y+20	; 0x14
     5bc:	fd 89       	ldd	r31, Y+21	; 0x15
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 8c       	ldd	r0, Y+30	; 0x1e
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <_ZN14HardwareSerial5beginEm+0x4a>
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	0a 94       	dec	r0
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <_ZN14HardwareSerial5beginEm+0x46>
     5ce:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	79 e0       	ldi	r23, 0x09	; 9
     5d4:	8d e3       	ldi	r24, 0x3D	; 61
     5d6:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     5d8:	a8 01       	movw	r20, r16
     5da:	97 01       	movw	r18, r14
     5dc:	0e 94 01 09 	call	0x1202	; 0x1202 <__udivmodsi4>
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	30 40       	sbci	r19, 0x00	; 0
     5e4:	40 40       	sbci	r20, 0x00	; 0
     5e6:	50 40       	sbci	r21, 0x00	; 0
     5e8:	56 95       	lsr	r21
     5ea:	47 95       	ror	r20
     5ec:	37 95       	ror	r19
     5ee:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     5f0:	80 e1       	ldi	r24, 0x10	; 16
     5f2:	20 30       	cpi	r18, 0x00	; 0
     5f4:	38 07       	cpc	r19, r24
     5f6:	10 f0       	brcs	.+4      	; 0x5fc <_ZN14HardwareSerial5beginEm+0x7c>
     5f8:	dd 20       	and	r13, r13
     5fa:	b1 f6       	brne	.-84     	; 0x5a8 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     5fc:	e8 89       	ldd	r30, Y+16	; 0x10
     5fe:	f9 89       	ldd	r31, Y+17	; 0x11
     600:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     602:	ea 89       	ldd	r30, Y+18	; 0x12
     604:	fb 89       	ldd	r31, Y+19	; 0x13
     606:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     608:	ee 89       	ldd	r30, Y+22	; 0x16
     60a:	ff 89       	ldd	r31, Y+23	; 0x17
     60c:	40 81       	ld	r20, Z
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	9c 01       	movw	r18, r24
     614:	0a 8c       	ldd	r0, Y+26	; 0x1a
     616:	02 c0       	rjmp	.+4      	; 0x61c <_ZN14HardwareSerial5beginEm+0x9c>
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	0a 94       	dec	r0
     61e:	e2 f7       	brpl	.-8      	; 0x618 <_ZN14HardwareSerial5beginEm+0x98>
     620:	42 2b       	or	r20, r18
     622:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     624:	ee 89       	ldd	r30, Y+22	; 0x16
     626:	ff 89       	ldd	r31, Y+23	; 0x17
     628:	40 81       	ld	r20, Z
     62a:	9c 01       	movw	r18, r24
     62c:	0b 8c       	ldd	r0, Y+27	; 0x1b
     62e:	02 c0       	rjmp	.+4      	; 0x634 <_ZN14HardwareSerial5beginEm+0xb4>
     630:	22 0f       	add	r18, r18
     632:	33 1f       	adc	r19, r19
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <_ZN14HardwareSerial5beginEm+0xb0>
     638:	42 2b       	or	r20, r18
     63a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     63c:	ee 89       	ldd	r30, Y+22	; 0x16
     63e:	ff 89       	ldd	r31, Y+23	; 0x17
     640:	40 81       	ld	r20, Z
     642:	9c 01       	movw	r18, r24
     644:	0c 8c       	ldd	r0, Y+28	; 0x1c
     646:	02 c0       	rjmp	.+4      	; 0x64c <_ZN14HardwareSerial5beginEm+0xcc>
     648:	22 0f       	add	r18, r18
     64a:	33 1f       	adc	r19, r19
     64c:	0a 94       	dec	r0
     64e:	e2 f7       	brpl	.-8      	; 0x648 <_ZN14HardwareSerial5beginEm+0xc8>
     650:	42 2b       	or	r20, r18
     652:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     654:	ee 89       	ldd	r30, Y+22	; 0x16
     656:	ff 89       	ldd	r31, Y+23	; 0x17
     658:	20 81       	ld	r18, Z
     65a:	0d 8c       	ldd	r0, Y+29	; 0x1d
     65c:	02 c0       	rjmp	.+4      	; 0x662 <_ZN14HardwareSerial5beginEm+0xe2>
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	0a 94       	dec	r0
     664:	e2 f7       	brpl	.-8      	; 0x65e <_ZN14HardwareSerial5beginEm+0xde>
     666:	80 95       	com	r24
     668:	82 23       	and	r24, r18
     66a:	80 83       	st	Z, r24
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	08 95       	ret

0000067c <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     67c:	10 92 34 02 	sts	0x0234, r1
     680:	10 92 33 02 	sts	0x0233, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     684:	88 ee       	ldi	r24, 0xE8	; 232
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	a0 e0       	ldi	r26, 0x00	; 0
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	80 93 35 02 	sts	0x0235, r24
     690:	90 93 36 02 	sts	0x0236, r25
     694:	a0 93 37 02 	sts	0x0237, r26
     698:	b0 93 38 02 	sts	0x0238, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     69c:	e3 e3       	ldi	r30, 0x33	; 51
     69e:	f2 e0       	ldi	r31, 0x02	; 2
     6a0:	8b e5       	ldi	r24, 0x5B	; 91
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	92 93       	st	-Z, r25
     6a6:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     6a8:	89 ea       	ldi	r24, 0xA9	; 169
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	95 87       	std	Z+13, r25	; 0x0d
     6ae:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     6b0:	8d ee       	ldi	r24, 0xED	; 237
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	97 87       	std	Z+15, r25	; 0x0f
     6b6:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     6b8:	85 ec       	ldi	r24, 0xC5	; 197
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	91 8b       	std	Z+17, r25	; 0x11
     6be:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     6c0:	84 ec       	ldi	r24, 0xC4	; 196
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	93 8b       	std	Z+19, r25	; 0x13
     6c6:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     6c8:	80 ec       	ldi	r24, 0xC0	; 192
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	95 8b       	std	Z+21, r25	; 0x15
     6ce:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     6d0:	81 ec       	ldi	r24, 0xC1	; 193
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	97 8b       	std	Z+23, r25	; 0x17
     6d6:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     6d8:	86 ec       	ldi	r24, 0xC6	; 198
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	91 8f       	std	Z+25, r25	; 0x19
     6de:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     6e8:	87 e0       	ldi	r24, 0x07	; 7
     6ea:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     6ec:	85 e0       	ldi	r24, 0x05	; 5
     6ee:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     6f4:	08 95       	ret

000006f6 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	4c 01       	movw	r8, r24
     710:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	a8 2e       	mov	r10, r24
     716:	b1 2c       	mov	r11, r1
     718:	a8 0c       	add	r10, r8
     71a:	b9 1c       	adc	r11, r9
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     71c:	c0 e0       	ldi	r28, 0x00	; 0
     71e:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     720:	cc 24       	eor	r12, r12
     722:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     724:	f5 01       	movw	r30, r10
     726:	61 91       	ld	r22, Z+
     728:	5f 01       	movw	r10, r30
     72a:	c7 01       	movw	r24, r14
     72c:	4a e0       	ldi	r20, 0x0A	; 10
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN5Print5printEhi>
     734:	8c 01       	movw	r16, r24
        n += p.print('.');
     736:	c7 01       	movw	r24, r14
     738:	6e e2       	ldi	r22, 0x2E	; 46
     73a:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     73e:	08 0f       	add	r16, r24
     740:	19 1f       	adc	r17, r25
        n += p.print('.');
     742:	c0 0e       	add	r12, r16
     744:	d1 1e       	adc	r13, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     746:	21 96       	adiw	r28, 0x01	; 1
     748:	c3 30       	cpi	r28, 0x03	; 3
     74a:	d1 05       	cpc	r29, r1
     74c:	59 f7       	brne	.-42     	; 0x724 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
     74e:	c7 01       	movw	r24, r14
     750:	f4 01       	movw	r30, r8
     752:	65 81       	ldd	r22, Z+5	; 0x05
     754:	4a e0       	ldi	r20, 0x0A	; 10
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN5Print5printEhi>
     75c:	c8 0e       	add	r12, r24
     75e:	d9 1e       	adc	r13, r25
    return n;
}
     760:	c6 01       	movw	r24, r12
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	08 95       	ret

0000077c <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
     77c:	fc 01       	movw	r30, r24
     77e:	8b e6       	ldi	r24, 0x6B	; 107
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
     786:	12 82       	std	Z+2, r1	; 0x02
     788:	13 82       	std	Z+3, r1	; 0x03
     78a:	14 82       	std	Z+4, r1	; 0x04
     78c:	15 82       	std	Z+5, r1	; 0x05
}
     78e:	08 95       	ret

00000790 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     790:	0f 93       	push	r16
     792:	fc 01       	movw	r30, r24
     794:	8b e6       	ldi	r24, 0x6B	; 107
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	91 83       	std	Z+1, r25	; 0x01
     79a:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
     79c:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
     79e:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
     7a0:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
     7a2:	05 83       	std	Z+5, r16	; 0x05
}
     7a4:	0f 91       	pop	r16
     7a6:	08 95       	ret

000007a8 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     7a8:	8b e6       	ldi	r24, 0x6B	; 107
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	90 93 51 02 	sts	0x0251, r25
     7b0:	80 93 50 02 	sts	0x0250, r24
{
    _address[0] = first_octet;
     7b4:	10 92 52 02 	sts	0x0252, r1
    _address[1] = second_octet;
     7b8:	10 92 53 02 	sts	0x0253, r1
    _address[2] = third_octet;
     7bc:	10 92 54 02 	sts	0x0254, r1
    _address[3] = fourth_octet;
     7c0:	10 92 55 02 	sts	0x0255, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
     7c4:	08 95       	ret

000007c6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     7c6:	cf 92       	push	r12
     7c8:	df 92       	push	r13
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	6c 01       	movw	r12, r24
     7d8:	7b 01       	movw	r14, r22
     7da:	8a 01       	movw	r16, r20
  size_t n = 0;
     7dc:	c0 e0       	ldi	r28, 0x00	; 0
     7de:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     7e0:	0f c0       	rjmp	.+30     	; 0x800 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
     7e2:	d7 01       	movw	r26, r14
     7e4:	6d 91       	ld	r22, X+
     7e6:	7d 01       	movw	r14, r26
     7e8:	d6 01       	movw	r26, r12
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	01 90       	ld	r0, Z+
     7f0:	f0 81       	ld	r31, Z
     7f2:	e0 2d       	mov	r30, r0
     7f4:	c6 01       	movw	r24, r12
     7f6:	09 95       	icall
     7f8:	c8 0f       	add	r28, r24
     7fa:	d9 1f       	adc	r29, r25
     7fc:	01 50       	subi	r16, 0x01	; 1
     7fe:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     800:	01 15       	cp	r16, r1
     802:	11 05       	cpc	r17, r1
     804:	71 f7       	brne	.-36     	; 0x7e2 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     806:	ce 01       	movw	r24, r28
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	08 95       	ret

0000081a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     81a:	db 01       	movw	r26, r22
     81c:	0d 90       	ld	r0, X+
     81e:	00 20       	and	r0, r0
     820:	e9 f7       	brne	.-6      	; 0x81c <_ZN5Print5writeEPKc+0x2>
     822:	ad 01       	movw	r20, r26
     824:	41 50       	subi	r20, 0x01	; 1
     826:	50 40       	sbci	r21, 0x00	; 0
     828:	46 1b       	sub	r20, r22
     82a:	57 0b       	sbc	r21, r23
     82c:	dc 01       	movw	r26, r24
     82e:	ed 91       	ld	r30, X+
     830:	fc 91       	ld	r31, X
     832:	02 80       	ldd	r0, Z+2	; 0x02
     834:	f3 81       	ldd	r31, Z+3	; 0x03
     836:	e0 2d       	mov	r30, r0
     838:	09 95       	icall
     83a:	08 95       	ret

0000083c <_ZN5Print5printEc>:
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
     83c:	dc 01       	movw	r26, r24
     83e:	ed 91       	ld	r30, X+
     840:	fc 91       	ld	r31, X
     842:	01 90       	ld	r0, Z+
     844:	f0 81       	ld	r31, Z
     846:	e0 2d       	mov	r30, r0
     848:	09 95       	icall
    size_t println(long, int = DEC);
     84a:	08 95       	ret

0000084c <_ZN5Print11printNumberEmh>:
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	a1 97       	sbiw	r28, 0x21	; 33
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	6c 01       	movw	r12, r24
     876:	04 2f       	mov	r16, r20
     878:	e5 2f       	mov	r30, r21
     87a:	cb 01       	movw	r24, r22
     87c:	12 2f       	mov	r17, r18
     87e:	19 a2       	std	Y+33, r1	; 0x21
     880:	22 30       	cpi	r18, 0x02	; 2
     882:	08 f4       	brcc	.+2      	; 0x886 <_ZN5Print11printNumberEmh+0x3a>
     884:	1a e0       	ldi	r17, 0x0A	; 10
     886:	21 e2       	ldi	r18, 0x21	; 33
     888:	e2 2e       	mov	r14, r18
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	81 2e       	mov	r8, r17
     892:	99 24       	eor	r9, r9
     894:	aa 24       	eor	r10, r10
     896:	bb 24       	eor	r11, r11
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <_ZN5Print11printNumberEmh+0x54>
     89a:	02 2f       	mov	r16, r18
     89c:	e3 2f       	mov	r30, r19
     89e:	ca 01       	movw	r24, r20
     8a0:	60 2f       	mov	r22, r16
     8a2:	7e 2f       	mov	r23, r30
     8a4:	a5 01       	movw	r20, r10
     8a6:	94 01       	movw	r18, r8
     8a8:	0e 94 01 09 	call	0x1202	; 0x1202 <__udivmodsi4>
     8ac:	12 9f       	mul	r17, r18
     8ae:	80 2d       	mov	r24, r0
     8b0:	11 24       	eor	r1, r1
     8b2:	08 1b       	sub	r16, r24
     8b4:	08 94       	sec
     8b6:	e1 08       	sbc	r14, r1
     8b8:	f1 08       	sbc	r15, r1
     8ba:	0a 30       	cpi	r16, 0x0A	; 10
     8bc:	14 f4       	brge	.+4      	; 0x8c2 <_ZN5Print11printNumberEmh+0x76>
     8be:	00 5d       	subi	r16, 0xD0	; 208
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <_ZN5Print11printNumberEmh+0x78>
     8c2:	09 5c       	subi	r16, 0xC9	; 201
     8c4:	f7 01       	movw	r30, r14
     8c6:	00 83       	st	Z, r16
     8c8:	21 15       	cp	r18, r1
     8ca:	31 05       	cpc	r19, r1
     8cc:	41 05       	cpc	r20, r1
     8ce:	51 05       	cpc	r21, r1
     8d0:	21 f7       	brne	.-56     	; 0x89a <_ZN5Print11printNumberEmh+0x4e>
     8d2:	c6 01       	movw	r24, r12
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN5Print5writeEPKc>
     8da:	a1 96       	adiw	r28, 0x21	; 33
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	bf 90       	pop	r11
     8f8:	af 90       	pop	r10
     8fa:	9f 90       	pop	r9
     8fc:	8f 90       	pop	r8
     8fe:	08 95       	ret

00000900 <_ZN5Print5printEmi>:
     900:	21 15       	cp	r18, r1
     902:	31 05       	cpc	r19, r1
     904:	49 f4       	brne	.+18     	; 0x918 <_ZN5Print5printEmi+0x18>
     906:	dc 01       	movw	r26, r24
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	01 90       	ld	r0, Z+
     90e:	f0 81       	ld	r31, Z
     910:	e0 2d       	mov	r30, r0
     912:	64 2f       	mov	r22, r20
     914:	09 95       	icall
     916:	08 95       	ret
     918:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Print11printNumberEmh>
     91c:	08 95       	ret

0000091e <_ZN5Print5printEhi>:
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
     91e:	9a 01       	movw	r18, r20
    size_t println(void);
     920:	46 2f       	mov	r20, r22
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	0e 94 80 04 	call	0x900	; 0x900 <_ZN5Print5printEmi>
};
     92c:	08 95       	ret

0000092e <_ZN5Print5printEli>:
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	ec 01       	movw	r28, r24
     940:	7a 01       	movw	r14, r20
     942:	8b 01       	movw	r16, r22
     944:	21 15       	cp	r18, r1
     946:	31 05       	cpc	r19, r1
     948:	41 f4       	brne	.+16     	; 0x95a <_ZN5Print5printEli+0x2c>
     94a:	e8 81       	ld	r30, Y
     94c:	f9 81       	ldd	r31, Y+1	; 0x01
     94e:	01 90       	ld	r0, Z+
     950:	f0 81       	ld	r31, Z
     952:	e0 2d       	mov	r30, r0
     954:	64 2f       	mov	r22, r20
     956:	09 95       	icall
     958:	1a c0       	rjmp	.+52     	; 0x98e <_ZN5Print5printEli+0x60>
     95a:	2a 30       	cpi	r18, 0x0A	; 10
     95c:	31 05       	cpc	r19, r1
     95e:	a9 f4       	brne	.+42     	; 0x98a <_ZN5Print5printEli+0x5c>
     960:	77 ff       	sbrs	r23, 7
     962:	12 c0       	rjmp	.+36     	; 0x988 <_ZN5Print5printEli+0x5a>
     964:	6d e2       	ldi	r22, 0x2D	; 45
     966:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5Print5printEc>
     96a:	6c 01       	movw	r12, r24
     96c:	44 27       	eor	r20, r20
     96e:	55 27       	eor	r21, r21
     970:	ba 01       	movw	r22, r20
     972:	4e 19       	sub	r20, r14
     974:	5f 09       	sbc	r21, r15
     976:	60 0b       	sbc	r22, r16
     978:	71 0b       	sbc	r23, r17
     97a:	ce 01       	movw	r24, r28
     97c:	2a e0       	ldi	r18, 0x0A	; 10
     97e:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Print11printNumberEmh>
     982:	c8 0e       	add	r12, r24
     984:	d9 1e       	adc	r13, r25
     986:	04 c0       	rjmp	.+8      	; 0x990 <_ZN5Print5printEli+0x62>
     988:	2a e0       	ldi	r18, 0x0A	; 10
     98a:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Print11printNumberEmh>
     98e:	6c 01       	movw	r12, r24
     990:	c6 01       	movw	r24, r12
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	08 95       	ret

000009a4 <_ZN5Print10printFloatEdh>:
     9a4:	6f 92       	push	r6
     9a6:	7f 92       	push	r7
     9a8:	9f 92       	push	r9
     9aa:	af 92       	push	r10
     9ac:	bf 92       	push	r11
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	3c 01       	movw	r6, r24
     9c0:	7a 01       	movw	r14, r20
     9c2:	8b 01       	movw	r16, r22
     9c4:	c2 2e       	mov	r12, r18
     9c6:	cb 01       	movw	r24, r22
     9c8:	ba 01       	movw	r22, r20
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	a9 01       	movw	r20, r18
     9d0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__cmpsf2>
     9d4:	87 ff       	sbrs	r24, 7
     9d6:	0a c0       	rjmp	.+20     	; 0x9ec <_ZN5Print10printFloatEdh+0x48>
     9d8:	c3 01       	movw	r24, r6
     9da:	6d e2       	ldi	r22, 0x2D	; 45
     9dc:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5Print5printEc>
     9e0:	ec 01       	movw	r28, r24
     9e2:	17 fb       	bst	r17, 7
     9e4:	10 95       	com	r17
     9e6:	17 f9       	bld	r17, 7
     9e8:	10 95       	com	r17
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <_ZN5Print10printFloatEdh+0x4c>
     9ec:	c0 e0       	ldi	r28, 0x00	; 0
     9ee:	d0 e0       	ldi	r29, 0x00	; 0
     9f0:	dd 24       	eor	r13, r13
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	2f e3       	ldi	r18, 0x3F	; 63
     9fa:	11 c0       	rjmp	.+34     	; 0xa1e <_ZN5Print10printFloatEdh+0x7a>
     9fc:	da 01       	movw	r26, r20
     9fe:	f9 01       	movw	r30, r18
     a00:	6b 2f       	mov	r22, r27
     a02:	74 2f       	mov	r23, r20
     a04:	8f 2f       	mov	r24, r31
     a06:	92 2f       	mov	r25, r18
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e2       	ldi	r20, 0x20	; 32
     a0e:	51 e4       	ldi	r21, 0x41	; 65
     a10:	0e 94 21 07 	call	0xe42	; 0xe42 <__divsf3>
     a14:	56 2f       	mov	r21, r22
     a16:	47 2f       	mov	r20, r23
     a18:	38 2f       	mov	r19, r24
     a1a:	29 2f       	mov	r18, r25
     a1c:	d3 94       	inc	r13
     a1e:	dc 14       	cp	r13, r12
     a20:	68 f3       	brcs	.-38     	; 0x9fc <_ZN5Print10printFloatEdh+0x58>
     a22:	c8 01       	movw	r24, r16
     a24:	b7 01       	movw	r22, r14
     a26:	da 01       	movw	r26, r20
     a28:	f9 01       	movw	r30, r18
     a2a:	2b 2f       	mov	r18, r27
     a2c:	34 2f       	mov	r19, r20
     a2e:	4f 2f       	mov	r20, r31
     a30:	5e 2f       	mov	r21, r30
     a32:	0e 94 b9 06 	call	0xd72	; 0xd72 <__addsf3>
     a36:	5b 01       	movw	r10, r22
     a38:	f8 2e       	mov	r15, r24
     a3a:	99 2e       	mov	r9, r25
     a3c:	7b 2d       	mov	r23, r11
     a3e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__fixunssfsi>
     a42:	16 2f       	mov	r17, r22
     a44:	d7 2e       	mov	r13, r23
     a46:	e8 2e       	mov	r14, r24
     a48:	09 2f       	mov	r16, r25
     a4a:	0e 94 ba 07 	call	0xf74	; 0xf74 <__floatunsisf>
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	6a 2d       	mov	r22, r10
     a54:	7b 2d       	mov	r23, r11
     a56:	8f 2d       	mov	r24, r15
     a58:	99 2d       	mov	r25, r9
     a5a:	0e 94 b8 06 	call	0xd70	; 0xd70 <__subsf3>
     a5e:	96 2e       	mov	r9, r22
     a60:	a7 2e       	mov	r10, r23
     a62:	b8 2e       	mov	r11, r24
     a64:	f9 2e       	mov	r15, r25
     a66:	c3 01       	movw	r24, r6
     a68:	41 2f       	mov	r20, r17
     a6a:	5d 2d       	mov	r21, r13
     a6c:	6e 2d       	mov	r22, r14
     a6e:	70 2f       	mov	r23, r16
     a70:	2a e0       	ldi	r18, 0x0A	; 10
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	0e 94 80 04 	call	0x900	; 0x900 <_ZN5Print5printEmi>
     a78:	c8 0f       	add	r28, r24
     a7a:	d9 1f       	adc	r29, r25
     a7c:	cc 20       	and	r12, r12
     a7e:	b9 f1       	breq	.+110    	; 0xaee <_ZN5Print10printFloatEdh+0x14a>
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     a80:	c3 01       	movw	r24, r6
     a82:	66 e2       	ldi	r22, 0x26	; 38
     a84:	71 e0       	ldi	r23, 0x01	; 1
     a86:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN5Print5writeEPKc>
     a8a:	c8 0f       	add	r28, r24
     a8c:	d9 1f       	adc	r29, r25
     a8e:	2f c0       	rjmp	.+94     	; 0xaee <_ZN5Print10printFloatEdh+0x14a>
     a90:	69 2d       	mov	r22, r9
     a92:	7a 2d       	mov	r23, r10
     a94:	8b 2d       	mov	r24, r11
     a96:	9f 2d       	mov	r25, r15
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e2       	ldi	r20, 0x20	; 32
     a9e:	51 e4       	ldi	r21, 0x41	; 65
     aa0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__mulsf3>
     aa4:	d6 2e       	mov	r13, r22
     aa6:	b7 2e       	mov	r11, r23
     aa8:	a8 2e       	mov	r10, r24
     aaa:	99 2e       	mov	r9, r25
     aac:	0e 94 89 07 	call	0xf12	; 0xf12 <__fixsfsi>
    size_t println(void);
};

#endif
     ab0:	7b 01       	movw	r14, r22
     ab2:	00 27       	eor	r16, r16
     ab4:	f7 fc       	sbrc	r15, 7
     ab6:	00 95       	com	r16
     ab8:	10 2f       	mov	r17, r16
     aba:	c3 01       	movw	r24, r6
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	2a e0       	ldi	r18, 0x0A	; 10
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	0e 94 97 04 	call	0x92e	; 0x92e <_ZN5Print5printEli>
     ac8:	c8 0f       	add	r28, r24
     aca:	d9 1f       	adc	r29, r25
     acc:	c8 01       	movw	r24, r16
     ace:	b7 01       	movw	r22, r14
     ad0:	0e 94 bc 07 	call	0xf78	; 0xf78 <__floatsisf>
     ad4:	9b 01       	movw	r18, r22
     ad6:	ac 01       	movw	r20, r24
     ad8:	6d 2d       	mov	r22, r13
     ada:	7b 2d       	mov	r23, r11
     adc:	8a 2d       	mov	r24, r10
     ade:	99 2d       	mov	r25, r9
     ae0:	0e 94 b8 06 	call	0xd70	; 0xd70 <__subsf3>
     ae4:	96 2e       	mov	r9, r22
     ae6:	a7 2e       	mov	r10, r23
     ae8:	b8 2e       	mov	r11, r24
     aea:	f9 2e       	mov	r15, r25
     aec:	ca 94       	dec	r12
     aee:	cc 20       	and	r12, r12
     af0:	79 f6       	brne	.-98     	; 0xa90 <_ZN5Print10printFloatEdh+0xec>
     af2:	ce 01       	movw	r24, r28
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	7f 90       	pop	r7
     b0c:	6f 90       	pop	r6
     b0e:	08 95       	ret

00000b10 <_ZN5Print5printEdi>:
     b10:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_ZN5Print10printFloatEdh>
     b14:	08 95       	ret

00000b16 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	29 f0       	breq	.+10     	; 0xb24 <_Z10randomSeedj+0xe>
    srandom(seed);
     b1a:	bc 01       	movw	r22, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <srandom>
     b24:	08 95       	ret

00000b26 <_Z6randoml>:
  }
}

long random(long howbig)
{
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	7b 01       	movw	r14, r22
     b30:	8c 01       	movw	r16, r24
  if (howbig == 0) {
     b32:	61 15       	cp	r22, r1
     b34:	71 05       	cpc	r23, r1
     b36:	81 05       	cpc	r24, r1
     b38:	91 05       	cpc	r25, r1
     b3a:	49 f0       	breq	.+18     	; 0xb4e <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
     b3c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <random>
     b40:	a8 01       	movw	r20, r16
     b42:	97 01       	movw	r18, r14
     b44:	0e 94 23 09 	call	0x1246	; 0x1246 <__divmodsi4>
     b48:	9b 01       	movw	r18, r22
     b4a:	ac 01       	movw	r20, r24
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
     b54:	b9 01       	movw	r22, r18
     b56:	ca 01       	movw	r24, r20
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	08 95       	ret

00000b62 <main>:
#include <Arduino.h>

int main(void)
{
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
	init();
     b66:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     b6a:	0e 94 bd 00 	call	0x17a	; 0x17a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b6e:	c0 e7       	ldi	r28, 0x70	; 112
     b70:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     b72:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <loop>
		if (serialEventRun) serialEventRun();
     b76:	20 97       	sbiw	r28, 0x00	; 0
     b78:	e1 f3       	breq	.-8      	; 0xb72 <main+0x10>
     b7a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_Z14serialEventRunv>
     b7e:	f9 cf       	rjmp	.-14     	; 0xb72 <main+0x10>

00000b80 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
     b80:	0e 94 58 09 	call	0x12b0	; 0x12b0 <malloc>
}
     b84:	08 95       	ret

00000b86 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
     b86:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <free>
} 
     b8a:	08 95       	ret

00000b8c <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
     b8c:	08 95       	ret

00000b8e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	2f 93       	push	r18
     b9a:	3f 93       	push	r19
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     ba4:	80 91 5a 02 	lds	r24, 0x025A
     ba8:	90 91 5b 02 	lds	r25, 0x025B
     bac:	a0 91 5c 02 	lds	r26, 0x025C
     bb0:	b0 91 5d 02 	lds	r27, 0x025D
	unsigned char f = timer0_fract;
     bb4:	30 91 5e 02 	lds	r19, 0x025E

	m += MILLIS_INC;
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	a1 1d       	adc	r26, r1
     bbc:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     bbe:	23 2f       	mov	r18, r19
     bc0:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     bc2:	2d 37       	cpi	r18, 0x7D	; 125
     bc4:	20 f0       	brcs	.+8      	; 0xbce <__vector_16+0x40>
		f -= FRACT_MAX;
     bc6:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	a1 1d       	adc	r26, r1
     bcc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     bce:	20 93 5e 02 	sts	0x025E, r18
	timer0_millis = m;
     bd2:	80 93 5a 02 	sts	0x025A, r24
     bd6:	90 93 5b 02 	sts	0x025B, r25
     bda:	a0 93 5c 02 	sts	0x025C, r26
     bde:	b0 93 5d 02 	sts	0x025D, r27
	timer0_overflow_count++;
     be2:	80 91 56 02 	lds	r24, 0x0256
     be6:	90 91 57 02 	lds	r25, 0x0257
     bea:	a0 91 58 02 	lds	r26, 0x0258
     bee:	b0 91 59 02 	lds	r27, 0x0259
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	a1 1d       	adc	r26, r1
     bf6:	b1 1d       	adc	r27, r1
     bf8:	80 93 56 02 	sts	0x0256, r24
     bfc:	90 93 57 02 	sts	0x0257, r25
     c00:	a0 93 58 02 	sts	0x0258, r26
     c04:	b0 93 59 02 	sts	0x0259, r27
}
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     c1e:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     c20:	f8 94       	cli
	m = timer0_overflow_count;
     c22:	20 91 56 02 	lds	r18, 0x0256
     c26:	30 91 57 02 	lds	r19, 0x0257
     c2a:	40 91 58 02 	lds	r20, 0x0258
     c2e:	50 91 59 02 	lds	r21, 0x0259
#if defined(TCNT0)
	t = TCNT0;
     c32:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     c34:	a8 9b       	sbis	0x15, 0	; 21
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <micros+0x26>
     c38:	8f 3f       	cpi	r24, 0xFF	; 255
     c3a:	21 f0       	breq	.+8      	; 0xc44 <micros+0x26>
		m++;
     c3c:	2f 5f       	subi	r18, 0xFF	; 255
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	4f 4f       	sbci	r20, 0xFF	; 255
     c42:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     c44:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     c46:	54 2f       	mov	r21, r20
     c48:	43 2f       	mov	r20, r19
     c4a:	32 2f       	mov	r19, r18
     c4c:	22 27       	eor	r18, r18
     c4e:	28 0f       	add	r18, r24
     c50:	31 1d       	adc	r19, r1
     c52:	41 1d       	adc	r20, r1
     c54:	51 1d       	adc	r21, r1
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	44 1f       	adc	r20, r20
     c5e:	55 1f       	adc	r21, r21
     c60:	8a 95       	dec	r24
     c62:	d1 f7       	brne	.-12     	; 0xc58 <micros+0x3a>
}
     c64:	b9 01       	movw	r22, r18
     c66:	ca 01       	movw	r24, r20
     c68:	08 95       	ret

00000c6a <delay>:

void delay(unsigned long ms)
{
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	7b 01       	movw	r14, r22
     c78:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     c7a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <micros>
     c7e:	eb 01       	movw	r28, r22

	while (ms > 0) {
     c80:	0f c0       	rjmp	.+30     	; 0xca0 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     c82:	0e 94 0f 06 	call	0xc1e	; 0xc1e <micros>
     c86:	6c 1b       	sub	r22, r28
     c88:	7d 0b       	sbc	r23, r29
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	68 3e       	cpi	r22, 0xE8	; 232
     c8e:	78 07       	cpc	r23, r24
     c90:	38 f0       	brcs	.+14     	; 0xca0 <delay+0x36>
			ms--;
     c92:	08 94       	sec
     c94:	e1 08       	sbc	r14, r1
     c96:	f1 08       	sbc	r15, r1
     c98:	01 09       	sbc	r16, r1
     c9a:	11 09       	sbc	r17, r1
			start += 1000;
     c9c:	c8 51       	subi	r28, 0x18	; 24
     c9e:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     ca0:	e1 14       	cp	r14, r1
     ca2:	f1 04       	cpc	r15, r1
     ca4:	01 05       	cpc	r16, r1
     ca6:	11 05       	cpc	r17, r1
     ca8:	61 f7       	brne	.-40     	; 0xc82 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	08 95       	ret

00000cb8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     cb8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     cba:	84 b5       	in	r24, 0x24	; 36
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     cc0:	84 b5       	in	r24, 0x24	; 36
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     cc6:	85 b5       	in	r24, 0x25	; 37
     cc8:	82 60       	ori	r24, 0x02	; 2
     cca:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ccc:	85 b5       	in	r24, 0x25	; 37
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     cd2:	ee e6       	ldi	r30, 0x6E	; 110
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     cdc:	e1 e8       	ldi	r30, 0x81	; 129
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ce2:	80 81       	ld	r24, Z
     ce4:	82 60       	ori	r24, 0x02	; 2
     ce6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ce8:	80 81       	ld	r24, Z
     cea:	81 60       	ori	r24, 0x01	; 1
     cec:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     cee:	e0 e8       	ldi	r30, 0x80	; 128
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	81 60       	ori	r24, 0x01	; 1
     cf6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     cf8:	e1 eb       	ldi	r30, 0xB1	; 177
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	84 60       	ori	r24, 0x04	; 4
     d00:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d02:	e0 eb       	ldi	r30, 0xB0	; 176
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	81 60       	ori	r24, 0x01	; 1
     d0a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     d0c:	ea e7       	ldi	r30, 0x7A	; 122
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	84 60       	ori	r24, 0x04	; 4
     d14:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     d16:	80 81       	ld	r24, Z
     d18:	82 60       	ori	r24, 0x02	; 2
     d1a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     d1c:	80 81       	ld	r24, Z
     d1e:	81 60       	ori	r24, 0x01	; 1
     d20:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d22:	80 81       	ld	r24, Z
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     d28:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     d2c:	08 95       	ret

00000d2e <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     d2e:	8e 30       	cpi	r24, 0x0E	; 14
     d30:	08 f0       	brcs	.+2      	; 0xd34 <analogRead+0x6>
     d32:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	90 91 32 01 	lds	r25, 0x0132
     d3a:	92 95       	swap	r25
     d3c:	99 0f       	add	r25, r25
     d3e:	99 0f       	add	r25, r25
     d40:	90 7c       	andi	r25, 0xC0	; 192
     d42:	98 2b       	or	r25, r24
     d44:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     d48:	80 91 7a 00 	lds	r24, 0x007A
     d4c:	80 64       	ori	r24, 0x40	; 64
     d4e:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     d52:	80 91 7a 00 	lds	r24, 0x007A
     d56:	86 fd       	sbrc	r24, 6
     d58:	fc cf       	rjmp	.-8      	; 0xd52 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     d5a:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     d5e:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     d62:	93 2f       	mov	r25, r19
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	28 2b       	or	r18, r24
     d6a:	39 2b       	or	r19, r25
}
     d6c:	c9 01       	movw	r24, r18
     d6e:	08 95       	ret

00000d70 <__subsf3>:
     d70:	50 58       	subi	r21, 0x80	; 128

00000d72 <__addsf3>:
     d72:	bb 27       	eor	r27, r27
     d74:	aa 27       	eor	r26, r26
     d76:	0e d0       	rcall	.+28     	; 0xd94 <__addsf3x>
     d78:	75 c1       	rjmp	.+746    	; 0x1064 <__fp_round>
     d7a:	66 d1       	rcall	.+716    	; 0x1048 <__fp_pscA>
     d7c:	30 f0       	brcs	.+12     	; 0xd8a <__addsf3+0x18>
     d7e:	6b d1       	rcall	.+726    	; 0x1056 <__fp_pscB>
     d80:	20 f0       	brcs	.+8      	; 0xd8a <__addsf3+0x18>
     d82:	31 f4       	brne	.+12     	; 0xd90 <__addsf3+0x1e>
     d84:	9f 3f       	cpi	r25, 0xFF	; 255
     d86:	11 f4       	brne	.+4      	; 0xd8c <__addsf3+0x1a>
     d88:	1e f4       	brtc	.+6      	; 0xd90 <__addsf3+0x1e>
     d8a:	5b c1       	rjmp	.+694    	; 0x1042 <__fp_nan>
     d8c:	0e f4       	brtc	.+2      	; 0xd90 <__addsf3+0x1e>
     d8e:	e0 95       	com	r30
     d90:	e7 fb       	bst	r30, 7
     d92:	51 c1       	rjmp	.+674    	; 0x1036 <__fp_inf>

00000d94 <__addsf3x>:
     d94:	e9 2f       	mov	r30, r25
     d96:	77 d1       	rcall	.+750    	; 0x1086 <__fp_split3>
     d98:	80 f3       	brcs	.-32     	; 0xd7a <__addsf3+0x8>
     d9a:	ba 17       	cp	r27, r26
     d9c:	62 07       	cpc	r22, r18
     d9e:	73 07       	cpc	r23, r19
     da0:	84 07       	cpc	r24, r20
     da2:	95 07       	cpc	r25, r21
     da4:	18 f0       	brcs	.+6      	; 0xdac <__addsf3x+0x18>
     da6:	71 f4       	brne	.+28     	; 0xdc4 <__addsf3x+0x30>
     da8:	9e f5       	brtc	.+102    	; 0xe10 <__addsf3x+0x7c>
     daa:	8f c1       	rjmp	.+798    	; 0x10ca <__fp_zero>
     dac:	0e f4       	brtc	.+2      	; 0xdb0 <__addsf3x+0x1c>
     dae:	e0 95       	com	r30
     db0:	0b 2e       	mov	r0, r27
     db2:	ba 2f       	mov	r27, r26
     db4:	a0 2d       	mov	r26, r0
     db6:	0b 01       	movw	r0, r22
     db8:	b9 01       	movw	r22, r18
     dba:	90 01       	movw	r18, r0
     dbc:	0c 01       	movw	r0, r24
     dbe:	ca 01       	movw	r24, r20
     dc0:	a0 01       	movw	r20, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	ff 27       	eor	r31, r31
     dc6:	59 1b       	sub	r21, r25
     dc8:	99 f0       	breq	.+38     	; 0xdf0 <__addsf3x+0x5c>
     dca:	59 3f       	cpi	r21, 0xF9	; 249
     dcc:	50 f4       	brcc	.+20     	; 0xde2 <__addsf3x+0x4e>
     dce:	50 3e       	cpi	r21, 0xE0	; 224
     dd0:	68 f1       	brcs	.+90     	; 0xe2c <__addsf3x+0x98>
     dd2:	1a 16       	cp	r1, r26
     dd4:	f0 40       	sbci	r31, 0x00	; 0
     dd6:	a2 2f       	mov	r26, r18
     dd8:	23 2f       	mov	r18, r19
     dda:	34 2f       	mov	r19, r20
     ddc:	44 27       	eor	r20, r20
     dde:	58 5f       	subi	r21, 0xF8	; 248
     de0:	f3 cf       	rjmp	.-26     	; 0xdc8 <__addsf3x+0x34>
     de2:	46 95       	lsr	r20
     de4:	37 95       	ror	r19
     de6:	27 95       	ror	r18
     de8:	a7 95       	ror	r26
     dea:	f0 40       	sbci	r31, 0x00	; 0
     dec:	53 95       	inc	r21
     dee:	c9 f7       	brne	.-14     	; 0xde2 <__addsf3x+0x4e>
     df0:	7e f4       	brtc	.+30     	; 0xe10 <__addsf3x+0x7c>
     df2:	1f 16       	cp	r1, r31
     df4:	ba 0b       	sbc	r27, r26
     df6:	62 0b       	sbc	r22, r18
     df8:	73 0b       	sbc	r23, r19
     dfa:	84 0b       	sbc	r24, r20
     dfc:	ba f0       	brmi	.+46     	; 0xe2c <__addsf3x+0x98>
     dfe:	91 50       	subi	r25, 0x01	; 1
     e00:	a1 f0       	breq	.+40     	; 0xe2a <__addsf3x+0x96>
     e02:	ff 0f       	add	r31, r31
     e04:	bb 1f       	adc	r27, r27
     e06:	66 1f       	adc	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	88 1f       	adc	r24, r24
     e0c:	c2 f7       	brpl	.-16     	; 0xdfe <__addsf3x+0x6a>
     e0e:	0e c0       	rjmp	.+28     	; 0xe2c <__addsf3x+0x98>
     e10:	ba 0f       	add	r27, r26
     e12:	62 1f       	adc	r22, r18
     e14:	73 1f       	adc	r23, r19
     e16:	84 1f       	adc	r24, r20
     e18:	48 f4       	brcc	.+18     	; 0xe2c <__addsf3x+0x98>
     e1a:	87 95       	ror	r24
     e1c:	77 95       	ror	r23
     e1e:	67 95       	ror	r22
     e20:	b7 95       	ror	r27
     e22:	f7 95       	ror	r31
     e24:	9e 3f       	cpi	r25, 0xFE	; 254
     e26:	08 f0       	brcs	.+2      	; 0xe2a <__addsf3x+0x96>
     e28:	b3 cf       	rjmp	.-154    	; 0xd90 <__addsf3+0x1e>
     e2a:	93 95       	inc	r25
     e2c:	88 0f       	add	r24, r24
     e2e:	08 f0       	brcs	.+2      	; 0xe32 <__addsf3x+0x9e>
     e30:	99 27       	eor	r25, r25
     e32:	ee 0f       	add	r30, r30
     e34:	97 95       	ror	r25
     e36:	87 95       	ror	r24
     e38:	08 95       	ret

00000e3a <__cmpsf2>:
     e3a:	d9 d0       	rcall	.+434    	; 0xfee <__fp_cmp>
     e3c:	08 f4       	brcc	.+2      	; 0xe40 <__cmpsf2+0x6>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	08 95       	ret

00000e42 <__divsf3>:
     e42:	0c d0       	rcall	.+24     	; 0xe5c <__divsf3x>
     e44:	0f c1       	rjmp	.+542    	; 0x1064 <__fp_round>
     e46:	07 d1       	rcall	.+526    	; 0x1056 <__fp_pscB>
     e48:	40 f0       	brcs	.+16     	; 0xe5a <__divsf3+0x18>
     e4a:	fe d0       	rcall	.+508    	; 0x1048 <__fp_pscA>
     e4c:	30 f0       	brcs	.+12     	; 0xe5a <__divsf3+0x18>
     e4e:	21 f4       	brne	.+8      	; 0xe58 <__divsf3+0x16>
     e50:	5f 3f       	cpi	r21, 0xFF	; 255
     e52:	19 f0       	breq	.+6      	; 0xe5a <__divsf3+0x18>
     e54:	f0 c0       	rjmp	.+480    	; 0x1036 <__fp_inf>
     e56:	51 11       	cpse	r21, r1
     e58:	39 c1       	rjmp	.+626    	; 0x10cc <__fp_szero>
     e5a:	f3 c0       	rjmp	.+486    	; 0x1042 <__fp_nan>

00000e5c <__divsf3x>:
     e5c:	14 d1       	rcall	.+552    	; 0x1086 <__fp_split3>
     e5e:	98 f3       	brcs	.-26     	; 0xe46 <__divsf3+0x4>

00000e60 <__divsf3_pse>:
     e60:	99 23       	and	r25, r25
     e62:	c9 f3       	breq	.-14     	; 0xe56 <__divsf3+0x14>
     e64:	55 23       	and	r21, r21
     e66:	b1 f3       	breq	.-20     	; 0xe54 <__divsf3+0x12>
     e68:	95 1b       	sub	r25, r21
     e6a:	55 0b       	sbc	r21, r21
     e6c:	bb 27       	eor	r27, r27
     e6e:	aa 27       	eor	r26, r26
     e70:	62 17       	cp	r22, r18
     e72:	73 07       	cpc	r23, r19
     e74:	84 07       	cpc	r24, r20
     e76:	38 f0       	brcs	.+14     	; 0xe86 <__divsf3_pse+0x26>
     e78:	9f 5f       	subi	r25, 0xFF	; 255
     e7a:	5f 4f       	sbci	r21, 0xFF	; 255
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19
     e80:	44 1f       	adc	r20, r20
     e82:	aa 1f       	adc	r26, r26
     e84:	a9 f3       	breq	.-22     	; 0xe70 <__divsf3_pse+0x10>
     e86:	33 d0       	rcall	.+102    	; 0xeee <__divsf3_pse+0x8e>
     e88:	0e 2e       	mov	r0, r30
     e8a:	3a f0       	brmi	.+14     	; 0xe9a <__divsf3_pse+0x3a>
     e8c:	e0 e8       	ldi	r30, 0x80	; 128
     e8e:	30 d0       	rcall	.+96     	; 0xef0 <__divsf3_pse+0x90>
     e90:	91 50       	subi	r25, 0x01	; 1
     e92:	50 40       	sbci	r21, 0x00	; 0
     e94:	e6 95       	lsr	r30
     e96:	00 1c       	adc	r0, r0
     e98:	ca f7       	brpl	.-14     	; 0xe8c <__divsf3_pse+0x2c>
     e9a:	29 d0       	rcall	.+82     	; 0xeee <__divsf3_pse+0x8e>
     e9c:	fe 2f       	mov	r31, r30
     e9e:	27 d0       	rcall	.+78     	; 0xeee <__divsf3_pse+0x8e>
     ea0:	66 0f       	add	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	88 1f       	adc	r24, r24
     ea6:	bb 1f       	adc	r27, r27
     ea8:	26 17       	cp	r18, r22
     eaa:	37 07       	cpc	r19, r23
     eac:	48 07       	cpc	r20, r24
     eae:	ab 07       	cpc	r26, r27
     eb0:	b0 e8       	ldi	r27, 0x80	; 128
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <__divsf3_pse+0x56>
     eb4:	bb 0b       	sbc	r27, r27
     eb6:	80 2d       	mov	r24, r0
     eb8:	bf 01       	movw	r22, r30
     eba:	ff 27       	eor	r31, r31
     ebc:	93 58       	subi	r25, 0x83	; 131
     ebe:	5f 4f       	sbci	r21, 0xFF	; 255
     ec0:	2a f0       	brmi	.+10     	; 0xecc <__divsf3_pse+0x6c>
     ec2:	9e 3f       	cpi	r25, 0xFE	; 254
     ec4:	51 05       	cpc	r21, r1
     ec6:	68 f0       	brcs	.+26     	; 0xee2 <__divsf3_pse+0x82>
     ec8:	b6 c0       	rjmp	.+364    	; 0x1036 <__fp_inf>
     eca:	00 c1       	rjmp	.+512    	; 0x10cc <__fp_szero>
     ecc:	5f 3f       	cpi	r21, 0xFF	; 255
     ece:	ec f3       	brlt	.-6      	; 0xeca <__divsf3_pse+0x6a>
     ed0:	98 3e       	cpi	r25, 0xE8	; 232
     ed2:	dc f3       	brlt	.-10     	; 0xeca <__divsf3_pse+0x6a>
     ed4:	86 95       	lsr	r24
     ed6:	77 95       	ror	r23
     ed8:	67 95       	ror	r22
     eda:	b7 95       	ror	r27
     edc:	f7 95       	ror	r31
     ede:	9f 5f       	subi	r25, 0xFF	; 255
     ee0:	c9 f7       	brne	.-14     	; 0xed4 <__divsf3_pse+0x74>
     ee2:	88 0f       	add	r24, r24
     ee4:	91 1d       	adc	r25, r1
     ee6:	96 95       	lsr	r25
     ee8:	87 95       	ror	r24
     eea:	97 f9       	bld	r25, 7
     eec:	08 95       	ret
     eee:	e1 e0       	ldi	r30, 0x01	; 1
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	bb 1f       	adc	r27, r27
     ef8:	62 17       	cp	r22, r18
     efa:	73 07       	cpc	r23, r19
     efc:	84 07       	cpc	r24, r20
     efe:	ba 07       	cpc	r27, r26
     f00:	20 f0       	brcs	.+8      	; 0xf0a <__divsf3_pse+0xaa>
     f02:	62 1b       	sub	r22, r18
     f04:	73 0b       	sbc	r23, r19
     f06:	84 0b       	sbc	r24, r20
     f08:	ba 0b       	sbc	r27, r26
     f0a:	ee 1f       	adc	r30, r30
     f0c:	88 f7       	brcc	.-30     	; 0xef0 <__divsf3_pse+0x90>
     f0e:	e0 95       	com	r30
     f10:	08 95       	ret

00000f12 <__fixsfsi>:
     f12:	04 d0       	rcall	.+8      	; 0xf1c <__fixunssfsi>
     f14:	68 94       	set
     f16:	b1 11       	cpse	r27, r1
     f18:	d9 c0       	rjmp	.+434    	; 0x10cc <__fp_szero>
     f1a:	08 95       	ret

00000f1c <__fixunssfsi>:
     f1c:	bc d0       	rcall	.+376    	; 0x1096 <__fp_splitA>
     f1e:	88 f0       	brcs	.+34     	; 0xf42 <__fixunssfsi+0x26>
     f20:	9f 57       	subi	r25, 0x7F	; 127
     f22:	90 f0       	brcs	.+36     	; 0xf48 <__fixunssfsi+0x2c>
     f24:	b9 2f       	mov	r27, r25
     f26:	99 27       	eor	r25, r25
     f28:	b7 51       	subi	r27, 0x17	; 23
     f2a:	a0 f0       	brcs	.+40     	; 0xf54 <__fixunssfsi+0x38>
     f2c:	d1 f0       	breq	.+52     	; 0xf62 <__fixunssfsi+0x46>
     f2e:	66 0f       	add	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	88 1f       	adc	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	1a f0       	brmi	.+6      	; 0xf3e <__fixunssfsi+0x22>
     f38:	ba 95       	dec	r27
     f3a:	c9 f7       	brne	.-14     	; 0xf2e <__fixunssfsi+0x12>
     f3c:	12 c0       	rjmp	.+36     	; 0xf62 <__fixunssfsi+0x46>
     f3e:	b1 30       	cpi	r27, 0x01	; 1
     f40:	81 f0       	breq	.+32     	; 0xf62 <__fixunssfsi+0x46>
     f42:	c3 d0       	rcall	.+390    	; 0x10ca <__fp_zero>
     f44:	b1 e0       	ldi	r27, 0x01	; 1
     f46:	08 95       	ret
     f48:	c0 c0       	rjmp	.+384    	; 0x10ca <__fp_zero>
     f4a:	67 2f       	mov	r22, r23
     f4c:	78 2f       	mov	r23, r24
     f4e:	88 27       	eor	r24, r24
     f50:	b8 5f       	subi	r27, 0xF8	; 248
     f52:	39 f0       	breq	.+14     	; 0xf62 <__fixunssfsi+0x46>
     f54:	b9 3f       	cpi	r27, 0xF9	; 249
     f56:	cc f3       	brlt	.-14     	; 0xf4a <__fixunssfsi+0x2e>
     f58:	86 95       	lsr	r24
     f5a:	77 95       	ror	r23
     f5c:	67 95       	ror	r22
     f5e:	b3 95       	inc	r27
     f60:	d9 f7       	brne	.-10     	; 0xf58 <__fixunssfsi+0x3c>
     f62:	3e f4       	brtc	.+14     	; 0xf72 <__fixunssfsi+0x56>
     f64:	90 95       	com	r25
     f66:	80 95       	com	r24
     f68:	70 95       	com	r23
     f6a:	61 95       	neg	r22
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	08 95       	ret

00000f74 <__floatunsisf>:
     f74:	e8 94       	clt
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <__floatsisf+0x12>

00000f78 <__floatsisf>:
     f78:	97 fb       	bst	r25, 7
     f7a:	3e f4       	brtc	.+14     	; 0xf8a <__floatsisf+0x12>
     f7c:	90 95       	com	r25
     f7e:	80 95       	com	r24
     f80:	70 95       	com	r23
     f82:	61 95       	neg	r22
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	8f 4f       	sbci	r24, 0xFF	; 255
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	99 23       	and	r25, r25
     f8c:	a9 f0       	breq	.+42     	; 0xfb8 <__floatsisf+0x40>
     f8e:	f9 2f       	mov	r31, r25
     f90:	96 e9       	ldi	r25, 0x96	; 150
     f92:	bb 27       	eor	r27, r27
     f94:	93 95       	inc	r25
     f96:	f6 95       	lsr	r31
     f98:	87 95       	ror	r24
     f9a:	77 95       	ror	r23
     f9c:	67 95       	ror	r22
     f9e:	b7 95       	ror	r27
     fa0:	f1 11       	cpse	r31, r1
     fa2:	f8 cf       	rjmp	.-16     	; 0xf94 <__floatsisf+0x1c>
     fa4:	fa f4       	brpl	.+62     	; 0xfe4 <__floatsisf+0x6c>
     fa6:	bb 0f       	add	r27, r27
     fa8:	11 f4       	brne	.+4      	; 0xfae <__floatsisf+0x36>
     faa:	60 ff       	sbrs	r22, 0
     fac:	1b c0       	rjmp	.+54     	; 0xfe4 <__floatsisf+0x6c>
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	8f 4f       	sbci	r24, 0xFF	; 255
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	16 c0       	rjmp	.+44     	; 0xfe4 <__floatsisf+0x6c>
     fb8:	88 23       	and	r24, r24
     fba:	11 f0       	breq	.+4      	; 0xfc0 <__floatsisf+0x48>
     fbc:	96 e9       	ldi	r25, 0x96	; 150
     fbe:	11 c0       	rjmp	.+34     	; 0xfe2 <__floatsisf+0x6a>
     fc0:	77 23       	and	r23, r23
     fc2:	21 f0       	breq	.+8      	; 0xfcc <__floatsisf+0x54>
     fc4:	9e e8       	ldi	r25, 0x8E	; 142
     fc6:	87 2f       	mov	r24, r23
     fc8:	76 2f       	mov	r23, r22
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <__floatsisf+0x5e>
     fcc:	66 23       	and	r22, r22
     fce:	71 f0       	breq	.+28     	; 0xfec <__floatsisf+0x74>
     fd0:	96 e8       	ldi	r25, 0x86	; 134
     fd2:	86 2f       	mov	r24, r22
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	2a f0       	brmi	.+10     	; 0xfe4 <__floatsisf+0x6c>
     fda:	9a 95       	dec	r25
     fdc:	66 0f       	add	r22, r22
     fde:	77 1f       	adc	r23, r23
     fe0:	88 1f       	adc	r24, r24
     fe2:	da f7       	brpl	.-10     	; 0xfda <__floatsisf+0x62>
     fe4:	88 0f       	add	r24, r24
     fe6:	96 95       	lsr	r25
     fe8:	87 95       	ror	r24
     fea:	97 f9       	bld	r25, 7
     fec:	08 95       	ret

00000fee <__fp_cmp>:
     fee:	99 0f       	add	r25, r25
     ff0:	00 08       	sbc	r0, r0
     ff2:	55 0f       	add	r21, r21
     ff4:	aa 0b       	sbc	r26, r26
     ff6:	e0 e8       	ldi	r30, 0x80	; 128
     ff8:	fe ef       	ldi	r31, 0xFE	; 254
     ffa:	16 16       	cp	r1, r22
     ffc:	17 06       	cpc	r1, r23
     ffe:	e8 07       	cpc	r30, r24
    1000:	f9 07       	cpc	r31, r25
    1002:	c0 f0       	brcs	.+48     	; 0x1034 <__fp_cmp+0x46>
    1004:	12 16       	cp	r1, r18
    1006:	13 06       	cpc	r1, r19
    1008:	e4 07       	cpc	r30, r20
    100a:	f5 07       	cpc	r31, r21
    100c:	98 f0       	brcs	.+38     	; 0x1034 <__fp_cmp+0x46>
    100e:	62 1b       	sub	r22, r18
    1010:	73 0b       	sbc	r23, r19
    1012:	84 0b       	sbc	r24, r20
    1014:	95 0b       	sbc	r25, r21
    1016:	39 f4       	brne	.+14     	; 0x1026 <__fp_cmp+0x38>
    1018:	0a 26       	eor	r0, r26
    101a:	61 f0       	breq	.+24     	; 0x1034 <__fp_cmp+0x46>
    101c:	23 2b       	or	r18, r19
    101e:	24 2b       	or	r18, r20
    1020:	25 2b       	or	r18, r21
    1022:	21 f4       	brne	.+8      	; 0x102c <__fp_cmp+0x3e>
    1024:	08 95       	ret
    1026:	0a 26       	eor	r0, r26
    1028:	09 f4       	brne	.+2      	; 0x102c <__fp_cmp+0x3e>
    102a:	a1 40       	sbci	r26, 0x01	; 1
    102c:	a6 95       	lsr	r26
    102e:	8f ef       	ldi	r24, 0xFF	; 255
    1030:	81 1d       	adc	r24, r1
    1032:	81 1d       	adc	r24, r1
    1034:	08 95       	ret

00001036 <__fp_inf>:
    1036:	97 f9       	bld	r25, 7
    1038:	9f 67       	ori	r25, 0x7F	; 127
    103a:	80 e8       	ldi	r24, 0x80	; 128
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	08 95       	ret

00001042 <__fp_nan>:
    1042:	9f ef       	ldi	r25, 0xFF	; 255
    1044:	80 ec       	ldi	r24, 0xC0	; 192
    1046:	08 95       	ret

00001048 <__fp_pscA>:
    1048:	00 24       	eor	r0, r0
    104a:	0a 94       	dec	r0
    104c:	16 16       	cp	r1, r22
    104e:	17 06       	cpc	r1, r23
    1050:	18 06       	cpc	r1, r24
    1052:	09 06       	cpc	r0, r25
    1054:	08 95       	ret

00001056 <__fp_pscB>:
    1056:	00 24       	eor	r0, r0
    1058:	0a 94       	dec	r0
    105a:	12 16       	cp	r1, r18
    105c:	13 06       	cpc	r1, r19
    105e:	14 06       	cpc	r1, r20
    1060:	05 06       	cpc	r0, r21
    1062:	08 95       	ret

00001064 <__fp_round>:
    1064:	09 2e       	mov	r0, r25
    1066:	03 94       	inc	r0
    1068:	00 0c       	add	r0, r0
    106a:	11 f4       	brne	.+4      	; 0x1070 <__fp_round+0xc>
    106c:	88 23       	and	r24, r24
    106e:	52 f0       	brmi	.+20     	; 0x1084 <__fp_round+0x20>
    1070:	bb 0f       	add	r27, r27
    1072:	40 f4       	brcc	.+16     	; 0x1084 <__fp_round+0x20>
    1074:	bf 2b       	or	r27, r31
    1076:	11 f4       	brne	.+4      	; 0x107c <__fp_round+0x18>
    1078:	60 ff       	sbrs	r22, 0
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <__fp_round+0x20>
    107c:	6f 5f       	subi	r22, 0xFF	; 255
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	8f 4f       	sbci	r24, 0xFF	; 255
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	08 95       	ret

00001086 <__fp_split3>:
    1086:	57 fd       	sbrc	r21, 7
    1088:	90 58       	subi	r25, 0x80	; 128
    108a:	44 0f       	add	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	59 f0       	breq	.+22     	; 0x10a6 <__fp_splitA+0x10>
    1090:	5f 3f       	cpi	r21, 0xFF	; 255
    1092:	71 f0       	breq	.+28     	; 0x10b0 <__fp_splitA+0x1a>
    1094:	47 95       	ror	r20

00001096 <__fp_splitA>:
    1096:	88 0f       	add	r24, r24
    1098:	97 fb       	bst	r25, 7
    109a:	99 1f       	adc	r25, r25
    109c:	61 f0       	breq	.+24     	; 0x10b6 <__fp_splitA+0x20>
    109e:	9f 3f       	cpi	r25, 0xFF	; 255
    10a0:	79 f0       	breq	.+30     	; 0x10c0 <__fp_splitA+0x2a>
    10a2:	87 95       	ror	r24
    10a4:	08 95       	ret
    10a6:	12 16       	cp	r1, r18
    10a8:	13 06       	cpc	r1, r19
    10aa:	14 06       	cpc	r1, r20
    10ac:	55 1f       	adc	r21, r21
    10ae:	f2 cf       	rjmp	.-28     	; 0x1094 <__fp_split3+0xe>
    10b0:	46 95       	lsr	r20
    10b2:	f1 df       	rcall	.-30     	; 0x1096 <__fp_splitA>
    10b4:	08 c0       	rjmp	.+16     	; 0x10c6 <__fp_splitA+0x30>
    10b6:	16 16       	cp	r1, r22
    10b8:	17 06       	cpc	r1, r23
    10ba:	18 06       	cpc	r1, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	f1 cf       	rjmp	.-30     	; 0x10a2 <__fp_splitA+0xc>
    10c0:	86 95       	lsr	r24
    10c2:	71 05       	cpc	r23, r1
    10c4:	61 05       	cpc	r22, r1
    10c6:	08 94       	sec
    10c8:	08 95       	ret

000010ca <__fp_zero>:
    10ca:	e8 94       	clt

000010cc <__fp_szero>:
    10cc:	bb 27       	eor	r27, r27
    10ce:	66 27       	eor	r22, r22
    10d0:	77 27       	eor	r23, r23
    10d2:	cb 01       	movw	r24, r22
    10d4:	97 f9       	bld	r25, 7
    10d6:	08 95       	ret

000010d8 <__mulsf3>:
    10d8:	0b d0       	rcall	.+22     	; 0x10f0 <__mulsf3x>
    10da:	c4 cf       	rjmp	.-120    	; 0x1064 <__fp_round>
    10dc:	b5 df       	rcall	.-150    	; 0x1048 <__fp_pscA>
    10de:	28 f0       	brcs	.+10     	; 0x10ea <__mulsf3+0x12>
    10e0:	ba df       	rcall	.-140    	; 0x1056 <__fp_pscB>
    10e2:	18 f0       	brcs	.+6      	; 0x10ea <__mulsf3+0x12>
    10e4:	95 23       	and	r25, r21
    10e6:	09 f0       	breq	.+2      	; 0x10ea <__mulsf3+0x12>
    10e8:	a6 cf       	rjmp	.-180    	; 0x1036 <__fp_inf>
    10ea:	ab cf       	rjmp	.-170    	; 0x1042 <__fp_nan>
    10ec:	11 24       	eor	r1, r1
    10ee:	ee cf       	rjmp	.-36     	; 0x10cc <__fp_szero>

000010f0 <__mulsf3x>:
    10f0:	ca df       	rcall	.-108    	; 0x1086 <__fp_split3>
    10f2:	a0 f3       	brcs	.-24     	; 0x10dc <__mulsf3+0x4>

000010f4 <__mulsf3_pse>:
    10f4:	95 9f       	mul	r25, r21
    10f6:	d1 f3       	breq	.-12     	; 0x10ec <__mulsf3+0x14>
    10f8:	95 0f       	add	r25, r21
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	55 1f       	adc	r21, r21
    10fe:	62 9f       	mul	r22, r18
    1100:	f0 01       	movw	r30, r0
    1102:	72 9f       	mul	r23, r18
    1104:	bb 27       	eor	r27, r27
    1106:	f0 0d       	add	r31, r0
    1108:	b1 1d       	adc	r27, r1
    110a:	63 9f       	mul	r22, r19
    110c:	aa 27       	eor	r26, r26
    110e:	f0 0d       	add	r31, r0
    1110:	b1 1d       	adc	r27, r1
    1112:	aa 1f       	adc	r26, r26
    1114:	64 9f       	mul	r22, r20
    1116:	66 27       	eor	r22, r22
    1118:	b0 0d       	add	r27, r0
    111a:	a1 1d       	adc	r26, r1
    111c:	66 1f       	adc	r22, r22
    111e:	82 9f       	mul	r24, r18
    1120:	22 27       	eor	r18, r18
    1122:	b0 0d       	add	r27, r0
    1124:	a1 1d       	adc	r26, r1
    1126:	62 1f       	adc	r22, r18
    1128:	73 9f       	mul	r23, r19
    112a:	b0 0d       	add	r27, r0
    112c:	a1 1d       	adc	r26, r1
    112e:	62 1f       	adc	r22, r18
    1130:	83 9f       	mul	r24, r19
    1132:	a0 0d       	add	r26, r0
    1134:	61 1d       	adc	r22, r1
    1136:	22 1f       	adc	r18, r18
    1138:	74 9f       	mul	r23, r20
    113a:	33 27       	eor	r19, r19
    113c:	a0 0d       	add	r26, r0
    113e:	61 1d       	adc	r22, r1
    1140:	23 1f       	adc	r18, r19
    1142:	84 9f       	mul	r24, r20
    1144:	60 0d       	add	r22, r0
    1146:	21 1d       	adc	r18, r1
    1148:	82 2f       	mov	r24, r18
    114a:	76 2f       	mov	r23, r22
    114c:	6a 2f       	mov	r22, r26
    114e:	11 24       	eor	r1, r1
    1150:	9f 57       	subi	r25, 0x7F	; 127
    1152:	50 40       	sbci	r21, 0x00	; 0
    1154:	8a f0       	brmi	.+34     	; 0x1178 <__mulsf3_pse+0x84>
    1156:	e1 f0       	breq	.+56     	; 0x1190 <__mulsf3_pse+0x9c>
    1158:	88 23       	and	r24, r24
    115a:	4a f0       	brmi	.+18     	; 0x116e <__mulsf3_pse+0x7a>
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	bb 1f       	adc	r27, r27
    1162:	66 1f       	adc	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	88 1f       	adc	r24, r24
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	50 40       	sbci	r21, 0x00	; 0
    116c:	a9 f7       	brne	.-22     	; 0x1158 <__mulsf3_pse+0x64>
    116e:	9e 3f       	cpi	r25, 0xFE	; 254
    1170:	51 05       	cpc	r21, r1
    1172:	70 f0       	brcs	.+28     	; 0x1190 <__mulsf3_pse+0x9c>
    1174:	60 cf       	rjmp	.-320    	; 0x1036 <__fp_inf>
    1176:	aa cf       	rjmp	.-172    	; 0x10cc <__fp_szero>
    1178:	5f 3f       	cpi	r21, 0xFF	; 255
    117a:	ec f3       	brlt	.-6      	; 0x1176 <__mulsf3_pse+0x82>
    117c:	98 3e       	cpi	r25, 0xE8	; 232
    117e:	dc f3       	brlt	.-10     	; 0x1176 <__mulsf3_pse+0x82>
    1180:	86 95       	lsr	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b7 95       	ror	r27
    1188:	f7 95       	ror	r31
    118a:	e7 95       	ror	r30
    118c:	9f 5f       	subi	r25, 0xFF	; 255
    118e:	c1 f7       	brne	.-16     	; 0x1180 <__mulsf3_pse+0x8c>
    1190:	fe 2b       	or	r31, r30
    1192:	88 0f       	add	r24, r24
    1194:	91 1d       	adc	r25, r1
    1196:	96 95       	lsr	r25
    1198:	87 95       	ror	r24
    119a:	97 f9       	bld	r25, 7
    119c:	08 95       	ret

0000119e <__mulsi3>:
    119e:	62 9f       	mul	r22, r18
    11a0:	d0 01       	movw	r26, r0
    11a2:	73 9f       	mul	r23, r19
    11a4:	f0 01       	movw	r30, r0
    11a6:	82 9f       	mul	r24, r18
    11a8:	e0 0d       	add	r30, r0
    11aa:	f1 1d       	adc	r31, r1
    11ac:	64 9f       	mul	r22, r20
    11ae:	e0 0d       	add	r30, r0
    11b0:	f1 1d       	adc	r31, r1
    11b2:	92 9f       	mul	r25, r18
    11b4:	f0 0d       	add	r31, r0
    11b6:	83 9f       	mul	r24, r19
    11b8:	f0 0d       	add	r31, r0
    11ba:	74 9f       	mul	r23, r20
    11bc:	f0 0d       	add	r31, r0
    11be:	65 9f       	mul	r22, r21
    11c0:	f0 0d       	add	r31, r0
    11c2:	99 27       	eor	r25, r25
    11c4:	72 9f       	mul	r23, r18
    11c6:	b0 0d       	add	r27, r0
    11c8:	e1 1d       	adc	r30, r1
    11ca:	f9 1f       	adc	r31, r25
    11cc:	63 9f       	mul	r22, r19
    11ce:	b0 0d       	add	r27, r0
    11d0:	e1 1d       	adc	r30, r1
    11d2:	f9 1f       	adc	r31, r25
    11d4:	bd 01       	movw	r22, r26
    11d6:	cf 01       	movw	r24, r30
    11d8:	11 24       	eor	r1, r1
    11da:	08 95       	ret

000011dc <__divmodhi4>:
    11dc:	97 fb       	bst	r25, 7
    11de:	09 2e       	mov	r0, r25
    11e0:	07 26       	eor	r0, r23
    11e2:	0a d0       	rcall	.+20     	; 0x11f8 <__divmodhi4_neg1>
    11e4:	77 fd       	sbrc	r23, 7
    11e6:	04 d0       	rcall	.+8      	; 0x11f0 <__divmodhi4_neg2>
    11e8:	49 d0       	rcall	.+146    	; 0x127c <__udivmodhi4>
    11ea:	06 d0       	rcall	.+12     	; 0x11f8 <__divmodhi4_neg1>
    11ec:	00 20       	and	r0, r0
    11ee:	1a f4       	brpl	.+6      	; 0x11f6 <__divmodhi4_exit>

000011f0 <__divmodhi4_neg2>:
    11f0:	70 95       	com	r23
    11f2:	61 95       	neg	r22
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255

000011f6 <__divmodhi4_exit>:
    11f6:	08 95       	ret

000011f8 <__divmodhi4_neg1>:
    11f8:	f6 f7       	brtc	.-4      	; 0x11f6 <__divmodhi4_exit>
    11fa:	90 95       	com	r25
    11fc:	81 95       	neg	r24
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	08 95       	ret

00001202 <__udivmodsi4>:
    1202:	a1 e2       	ldi	r26, 0x21	; 33
    1204:	1a 2e       	mov	r1, r26
    1206:	aa 1b       	sub	r26, r26
    1208:	bb 1b       	sub	r27, r27
    120a:	fd 01       	movw	r30, r26
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <__udivmodsi4_ep>

0000120e <__udivmodsi4_loop>:
    120e:	aa 1f       	adc	r26, r26
    1210:	bb 1f       	adc	r27, r27
    1212:	ee 1f       	adc	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	a2 17       	cp	r26, r18
    1218:	b3 07       	cpc	r27, r19
    121a:	e4 07       	cpc	r30, r20
    121c:	f5 07       	cpc	r31, r21
    121e:	20 f0       	brcs	.+8      	; 0x1228 <__udivmodsi4_ep>
    1220:	a2 1b       	sub	r26, r18
    1222:	b3 0b       	sbc	r27, r19
    1224:	e4 0b       	sbc	r30, r20
    1226:	f5 0b       	sbc	r31, r21

00001228 <__udivmodsi4_ep>:
    1228:	66 1f       	adc	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	88 1f       	adc	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	1a 94       	dec	r1
    1232:	69 f7       	brne	.-38     	; 0x120e <__udivmodsi4_loop>
    1234:	60 95       	com	r22
    1236:	70 95       	com	r23
    1238:	80 95       	com	r24
    123a:	90 95       	com	r25
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	bd 01       	movw	r22, r26
    1242:	cf 01       	movw	r24, r30
    1244:	08 95       	ret

00001246 <__divmodsi4>:
    1246:	97 fb       	bst	r25, 7
    1248:	09 2e       	mov	r0, r25
    124a:	05 26       	eor	r0, r21
    124c:	0e d0       	rcall	.+28     	; 0x126a <__divmodsi4_neg1>
    124e:	57 fd       	sbrc	r21, 7
    1250:	04 d0       	rcall	.+8      	; 0x125a <__divmodsi4_neg2>
    1252:	d7 df       	rcall	.-82     	; 0x1202 <__udivmodsi4>
    1254:	0a d0       	rcall	.+20     	; 0x126a <__divmodsi4_neg1>
    1256:	00 1c       	adc	r0, r0
    1258:	38 f4       	brcc	.+14     	; 0x1268 <__divmodsi4_exit>

0000125a <__divmodsi4_neg2>:
    125a:	50 95       	com	r21
    125c:	40 95       	com	r20
    125e:	30 95       	com	r19
    1260:	21 95       	neg	r18
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	4f 4f       	sbci	r20, 0xFF	; 255
    1266:	5f 4f       	sbci	r21, 0xFF	; 255

00001268 <__divmodsi4_exit>:
    1268:	08 95       	ret

0000126a <__divmodsi4_neg1>:
    126a:	f6 f7       	brtc	.-4      	; 0x1268 <__divmodsi4_exit>
    126c:	90 95       	com	r25
    126e:	80 95       	com	r24
    1270:	70 95       	com	r23
    1272:	61 95       	neg	r22
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	8f 4f       	sbci	r24, 0xFF	; 255
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	08 95       	ret

0000127c <__udivmodhi4>:
    127c:	aa 1b       	sub	r26, r26
    127e:	bb 1b       	sub	r27, r27
    1280:	51 e1       	ldi	r21, 0x11	; 17
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <__udivmodhi4_ep>

00001284 <__udivmodhi4_loop>:
    1284:	aa 1f       	adc	r26, r26
    1286:	bb 1f       	adc	r27, r27
    1288:	a6 17       	cp	r26, r22
    128a:	b7 07       	cpc	r27, r23
    128c:	10 f0       	brcs	.+4      	; 0x1292 <__udivmodhi4_ep>
    128e:	a6 1b       	sub	r26, r22
    1290:	b7 0b       	sbc	r27, r23

00001292 <__udivmodhi4_ep>:
    1292:	88 1f       	adc	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	5a 95       	dec	r21
    1298:	a9 f7       	brne	.-22     	; 0x1284 <__udivmodhi4_loop>
    129a:	80 95       	com	r24
    129c:	90 95       	com	r25
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	08 95       	ret

000012a4 <__tablejump2__>:
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31

000012a8 <__tablejump__>:
    12a8:	05 90       	lpm	r0, Z+
    12aa:	f4 91       	lpm	r31, Z+
    12ac:	e0 2d       	mov	r30, r0
    12ae:	09 94       	ijmp

000012b0 <malloc>:
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 05       	cpc	r25, r1
    12b8:	10 f4       	brcc	.+4      	; 0x12be <malloc+0xe>
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	e0 91 61 02 	lds	r30, 0x0261
    12c2:	f0 91 62 02 	lds	r31, 0x0262
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	26 c0       	rjmp	.+76     	; 0x131c <malloc+0x6c>
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	68 17       	cp	r22, r24
    12d6:	79 07       	cpc	r23, r25
    12d8:	e0 f0       	brcs	.+56     	; 0x1312 <malloc+0x62>
    12da:	68 17       	cp	r22, r24
    12dc:	79 07       	cpc	r23, r25
    12de:	81 f4       	brne	.+32     	; 0x1300 <malloc+0x50>
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	21 15       	cp	r18, r1
    12e6:	31 05       	cpc	r19, r1
    12e8:	31 f0       	breq	.+12     	; 0x12f6 <malloc+0x46>
    12ea:	d9 01       	movw	r26, r18
    12ec:	13 96       	adiw	r26, 0x03	; 3
    12ee:	9c 93       	st	X, r25
    12f0:	8e 93       	st	-X, r24
    12f2:	12 97       	sbiw	r26, 0x02	; 2
    12f4:	2b c0       	rjmp	.+86     	; 0x134c <malloc+0x9c>
    12f6:	90 93 62 02 	sts	0x0262, r25
    12fa:	80 93 61 02 	sts	0x0261, r24
    12fe:	26 c0       	rjmp	.+76     	; 0x134c <malloc+0x9c>
    1300:	41 15       	cp	r20, r1
    1302:	51 05       	cpc	r21, r1
    1304:	19 f0       	breq	.+6      	; 0x130c <malloc+0x5c>
    1306:	64 17       	cp	r22, r20
    1308:	75 07       	cpc	r23, r21
    130a:	18 f4       	brcc	.+6      	; 0x1312 <malloc+0x62>
    130c:	ab 01       	movw	r20, r22
    130e:	e9 01       	movw	r28, r18
    1310:	df 01       	movw	r26, r30
    1312:	9f 01       	movw	r18, r30
    1314:	72 81       	ldd	r23, Z+2	; 0x02
    1316:	63 81       	ldd	r22, Z+3	; 0x03
    1318:	e7 2f       	mov	r30, r23
    131a:	f6 2f       	mov	r31, r22
    131c:	30 97       	sbiw	r30, 0x00	; 0
    131e:	c1 f6       	brne	.-80     	; 0x12d0 <malloc+0x20>
    1320:	41 15       	cp	r20, r1
    1322:	51 05       	cpc	r21, r1
    1324:	01 f1       	breq	.+64     	; 0x1366 <malloc+0xb6>
    1326:	48 1b       	sub	r20, r24
    1328:	59 0b       	sbc	r21, r25
    132a:	44 30       	cpi	r20, 0x04	; 4
    132c:	51 05       	cpc	r21, r1
    132e:	80 f4       	brcc	.+32     	; 0x1350 <malloc+0xa0>
    1330:	12 96       	adiw	r26, 0x02	; 2
    1332:	8d 91       	ld	r24, X+
    1334:	9c 91       	ld	r25, X
    1336:	13 97       	sbiw	r26, 0x03	; 3
    1338:	20 97       	sbiw	r28, 0x00	; 0
    133a:	19 f0       	breq	.+6      	; 0x1342 <malloc+0x92>
    133c:	9b 83       	std	Y+3, r25	; 0x03
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	04 c0       	rjmp	.+8      	; 0x134a <malloc+0x9a>
    1342:	90 93 62 02 	sts	0x0262, r25
    1346:	80 93 61 02 	sts	0x0261, r24
    134a:	fd 01       	movw	r30, r26
    134c:	32 96       	adiw	r30, 0x02	; 2
    134e:	46 c0       	rjmp	.+140    	; 0x13dc <malloc+0x12c>
    1350:	fd 01       	movw	r30, r26
    1352:	e4 0f       	add	r30, r20
    1354:	f5 1f       	adc	r31, r21
    1356:	81 93       	st	Z+, r24
    1358:	91 93       	st	Z+, r25
    135a:	42 50       	subi	r20, 0x02	; 2
    135c:	50 40       	sbci	r21, 0x00	; 0
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	5c 93       	st	X, r21
    1362:	4e 93       	st	-X, r20
    1364:	3b c0       	rjmp	.+118    	; 0x13dc <malloc+0x12c>
    1366:	20 91 5f 02 	lds	r18, 0x025F
    136a:	30 91 60 02 	lds	r19, 0x0260
    136e:	21 15       	cp	r18, r1
    1370:	31 05       	cpc	r19, r1
    1372:	41 f4       	brne	.+16     	; 0x1384 <malloc+0xd4>
    1374:	20 91 2a 01 	lds	r18, 0x012A
    1378:	30 91 2b 01 	lds	r19, 0x012B
    137c:	30 93 60 02 	sts	0x0260, r19
    1380:	20 93 5f 02 	sts	0x025F, r18
    1384:	20 91 2c 01 	lds	r18, 0x012C
    1388:	30 91 2d 01 	lds	r19, 0x012D
    138c:	21 15       	cp	r18, r1
    138e:	31 05       	cpc	r19, r1
    1390:	41 f4       	brne	.+16     	; 0x13a2 <malloc+0xf2>
    1392:	2d b7       	in	r18, 0x3d	; 61
    1394:	3e b7       	in	r19, 0x3e	; 62
    1396:	40 91 28 01 	lds	r20, 0x0128
    139a:	50 91 29 01 	lds	r21, 0x0129
    139e:	24 1b       	sub	r18, r20
    13a0:	35 0b       	sbc	r19, r21
    13a2:	e0 91 5f 02 	lds	r30, 0x025F
    13a6:	f0 91 60 02 	lds	r31, 0x0260
    13aa:	e2 17       	cp	r30, r18
    13ac:	f3 07       	cpc	r31, r19
    13ae:	a0 f4       	brcc	.+40     	; 0x13d8 <malloc+0x128>
    13b0:	2e 1b       	sub	r18, r30
    13b2:	3f 0b       	sbc	r19, r31
    13b4:	28 17       	cp	r18, r24
    13b6:	39 07       	cpc	r19, r25
    13b8:	78 f0       	brcs	.+30     	; 0x13d8 <malloc+0x128>
    13ba:	ac 01       	movw	r20, r24
    13bc:	4e 5f       	subi	r20, 0xFE	; 254
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	24 17       	cp	r18, r20
    13c2:	35 07       	cpc	r19, r21
    13c4:	48 f0       	brcs	.+18     	; 0x13d8 <malloc+0x128>
    13c6:	4e 0f       	add	r20, r30
    13c8:	5f 1f       	adc	r21, r31
    13ca:	50 93 60 02 	sts	0x0260, r21
    13ce:	40 93 5f 02 	sts	0x025F, r20
    13d2:	81 93       	st	Z+, r24
    13d4:	91 93       	st	Z+, r25
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <malloc+0x12c>
    13d8:	e0 e0       	ldi	r30, 0x00	; 0
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	cf 01       	movw	r24, r30
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <free>:
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	09 f4       	brne	.+2      	; 0x13ee <free+0xa>
    13ec:	91 c0       	rjmp	.+290    	; 0x1510 <free+0x12c>
    13ee:	fc 01       	movw	r30, r24
    13f0:	32 97       	sbiw	r30, 0x02	; 2
    13f2:	13 82       	std	Z+3, r1	; 0x03
    13f4:	12 82       	std	Z+2, r1	; 0x02
    13f6:	60 91 61 02 	lds	r22, 0x0261
    13fa:	70 91 62 02 	lds	r23, 0x0262
    13fe:	61 15       	cp	r22, r1
    1400:	71 05       	cpc	r23, r1
    1402:	81 f4       	brne	.+32     	; 0x1424 <free+0x40>
    1404:	20 81       	ld	r18, Z
    1406:	31 81       	ldd	r19, Z+1	; 0x01
    1408:	28 0f       	add	r18, r24
    140a:	39 1f       	adc	r19, r25
    140c:	80 91 5f 02 	lds	r24, 0x025F
    1410:	90 91 60 02 	lds	r25, 0x0260
    1414:	82 17       	cp	r24, r18
    1416:	93 07       	cpc	r25, r19
    1418:	99 f5       	brne	.+102    	; 0x1480 <free+0x9c>
    141a:	f0 93 60 02 	sts	0x0260, r31
    141e:	e0 93 5f 02 	sts	0x025F, r30
    1422:	76 c0       	rjmp	.+236    	; 0x1510 <free+0x12c>
    1424:	db 01       	movw	r26, r22
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <free+0x4c>
    142c:	cd 01       	movw	r24, r26
    142e:	d9 01       	movw	r26, r18
    1430:	ae 17       	cp	r26, r30
    1432:	bf 07       	cpc	r27, r31
    1434:	48 f4       	brcc	.+18     	; 0x1448 <free+0x64>
    1436:	12 96       	adiw	r26, 0x02	; 2
    1438:	2d 91       	ld	r18, X+
    143a:	3c 91       	ld	r19, X
    143c:	13 97       	sbiw	r26, 0x03	; 3
    143e:	21 15       	cp	r18, r1
    1440:	31 05       	cpc	r19, r1
    1442:	a1 f7       	brne	.-24     	; 0x142c <free+0x48>
    1444:	cd 01       	movw	r24, r26
    1446:	21 c0       	rjmp	.+66     	; 0x148a <free+0xa6>
    1448:	b3 83       	std	Z+3, r27	; 0x03
    144a:	a2 83       	std	Z+2, r26	; 0x02
    144c:	ef 01       	movw	r28, r30
    144e:	49 91       	ld	r20, Y+
    1450:	59 91       	ld	r21, Y+
    1452:	9e 01       	movw	r18, r28
    1454:	24 0f       	add	r18, r20
    1456:	35 1f       	adc	r19, r21
    1458:	a2 17       	cp	r26, r18
    145a:	b3 07       	cpc	r27, r19
    145c:	79 f4       	brne	.+30     	; 0x147c <free+0x98>
    145e:	2d 91       	ld	r18, X+
    1460:	3c 91       	ld	r19, X
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	24 0f       	add	r18, r20
    1466:	35 1f       	adc	r19, r21
    1468:	2e 5f       	subi	r18, 0xFE	; 254
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	31 83       	std	Z+1, r19	; 0x01
    146e:	20 83       	st	Z, r18
    1470:	12 96       	adiw	r26, 0x02	; 2
    1472:	2d 91       	ld	r18, X+
    1474:	3c 91       	ld	r19, X
    1476:	13 97       	sbiw	r26, 0x03	; 3
    1478:	33 83       	std	Z+3, r19	; 0x03
    147a:	22 83       	std	Z+2, r18	; 0x02
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	29 f4       	brne	.+10     	; 0x148a <free+0xa6>
    1480:	f0 93 62 02 	sts	0x0262, r31
    1484:	e0 93 61 02 	sts	0x0261, r30
    1488:	43 c0       	rjmp	.+134    	; 0x1510 <free+0x12c>
    148a:	dc 01       	movw	r26, r24
    148c:	13 96       	adiw	r26, 0x03	; 3
    148e:	fc 93       	st	X, r31
    1490:	ee 93       	st	-X, r30
    1492:	12 97       	sbiw	r26, 0x02	; 2
    1494:	4d 91       	ld	r20, X+
    1496:	5d 91       	ld	r21, X+
    1498:	a4 0f       	add	r26, r20
    149a:	b5 1f       	adc	r27, r21
    149c:	ea 17       	cp	r30, r26
    149e:	fb 07       	cpc	r31, r27
    14a0:	69 f4       	brne	.+26     	; 0x14bc <free+0xd8>
    14a2:	20 81       	ld	r18, Z
    14a4:	31 81       	ldd	r19, Z+1	; 0x01
    14a6:	24 0f       	add	r18, r20
    14a8:	35 1f       	adc	r19, r21
    14aa:	2e 5f       	subi	r18, 0xFE	; 254
    14ac:	3f 4f       	sbci	r19, 0xFF	; 255
    14ae:	ec 01       	movw	r28, r24
    14b0:	39 83       	std	Y+1, r19	; 0x01
    14b2:	28 83       	st	Y, r18
    14b4:	22 81       	ldd	r18, Z+2	; 0x02
    14b6:	33 81       	ldd	r19, Z+3	; 0x03
    14b8:	3b 83       	std	Y+3, r19	; 0x03
    14ba:	2a 83       	std	Y+2, r18	; 0x02
    14bc:	e0 e0       	ldi	r30, 0x00	; 0
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <free+0xe2>
    14c2:	fb 01       	movw	r30, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	db 01       	movw	r26, r22
    14c8:	12 96       	adiw	r26, 0x02	; 2
    14ca:	8d 91       	ld	r24, X+
    14cc:	9c 91       	ld	r25, X
    14ce:	13 97       	sbiw	r26, 0x03	; 3
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	b9 f7       	brne	.-18     	; 0x14c2 <free+0xde>
    14d4:	9b 01       	movw	r18, r22
    14d6:	2e 5f       	subi	r18, 0xFE	; 254
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	8d 91       	ld	r24, X+
    14dc:	9c 91       	ld	r25, X
    14de:	11 97       	sbiw	r26, 0x01	; 1
    14e0:	82 0f       	add	r24, r18
    14e2:	93 1f       	adc	r25, r19
    14e4:	40 91 5f 02 	lds	r20, 0x025F
    14e8:	50 91 60 02 	lds	r21, 0x0260
    14ec:	48 17       	cp	r20, r24
    14ee:	59 07       	cpc	r21, r25
    14f0:	79 f4       	brne	.+30     	; 0x1510 <free+0x12c>
    14f2:	30 97       	sbiw	r30, 0x00	; 0
    14f4:	29 f4       	brne	.+10     	; 0x1500 <free+0x11c>
    14f6:	10 92 62 02 	sts	0x0262, r1
    14fa:	10 92 61 02 	sts	0x0261, r1
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <free+0x120>
    1500:	13 82       	std	Z+3, r1	; 0x03
    1502:	12 82       	std	Z+2, r1	; 0x02
    1504:	22 50       	subi	r18, 0x02	; 2
    1506:	30 40       	sbci	r19, 0x00	; 0
    1508:	30 93 60 02 	sts	0x0260, r19
    150c:	20 93 5f 02 	sts	0x025F, r18
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <do_random>:
    1516:	a0 e0       	ldi	r26, 0x00	; 0
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e1 e9       	ldi	r30, 0x91	; 145
    151c:	fa e0       	ldi	r31, 0x0A	; 10
    151e:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__prologue_saves__+0x10>
    1522:	ec 01       	movw	r28, r24
    1524:	68 81       	ld	r22, Y
    1526:	79 81       	ldd	r23, Y+1	; 0x01
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	61 15       	cp	r22, r1
    152e:	71 05       	cpc	r23, r1
    1530:	81 05       	cpc	r24, r1
    1532:	91 05       	cpc	r25, r1
    1534:	21 f4       	brne	.+8      	; 0x153e <do_random+0x28>
    1536:	64 e2       	ldi	r22, 0x24	; 36
    1538:	79 ed       	ldi	r23, 0xD9	; 217
    153a:	8b e5       	ldi	r24, 0x5B	; 91
    153c:	97 e0       	ldi	r25, 0x07	; 7
    153e:	2d e1       	ldi	r18, 0x1D	; 29
    1540:	33 ef       	ldi	r19, 0xF3	; 243
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	0e 94 23 09 	call	0x1246	; 0x1246 <__divmodsi4>
    154a:	79 01       	movw	r14, r18
    154c:	8a 01       	movw	r16, r20
    154e:	27 ea       	ldi	r18, 0xA7	; 167
    1550:	31 e4       	ldi	r19, 0x41	; 65
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	0e 94 cf 08 	call	0x119e	; 0x119e <__mulsi3>
    155a:	5b 01       	movw	r10, r22
    155c:	6c 01       	movw	r12, r24
    155e:	c8 01       	movw	r24, r16
    1560:	b7 01       	movw	r22, r14
    1562:	2c ee       	ldi	r18, 0xEC	; 236
    1564:	34 ef       	ldi	r19, 0xF4	; 244
    1566:	4f ef       	ldi	r20, 0xFF	; 255
    1568:	5f ef       	ldi	r21, 0xFF	; 255
    156a:	0e 94 cf 08 	call	0x119e	; 0x119e <__mulsi3>
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	2a 0d       	add	r18, r10
    1574:	3b 1d       	adc	r19, r11
    1576:	4c 1d       	adc	r20, r12
    1578:	5d 1d       	adc	r21, r13
    157a:	57 ff       	sbrs	r21, 7
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <do_random+0x70>
    157e:	21 50       	subi	r18, 0x01	; 1
    1580:	30 40       	sbci	r19, 0x00	; 0
    1582:	40 40       	sbci	r20, 0x00	; 0
    1584:	50 48       	sbci	r21, 0x80	; 128
    1586:	28 83       	st	Y, r18
    1588:	39 83       	std	Y+1, r19	; 0x01
    158a:	4a 83       	std	Y+2, r20	; 0x02
    158c:	5b 83       	std	Y+3, r21	; 0x03
    158e:	5f 77       	andi	r21, 0x7F	; 127
    1590:	b9 01       	movw	r22, r18
    1592:	ca 01       	movw	r24, r20
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	ea e0       	ldi	r30, 0x0A	; 10
    159a:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__epilogue_restores__+0x10>

0000159e <random_r>:
    159e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <do_random>
    15a2:	08 95       	ret

000015a4 <random>:
    15a4:	8e e2       	ldi	r24, 0x2E	; 46
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <do_random>
    15ac:	08 95       	ret

000015ae <srandom>:
    15ae:	60 93 2e 01 	sts	0x012E, r22
    15b2:	70 93 2f 01 	sts	0x012F, r23
    15b6:	80 93 30 01 	sts	0x0130, r24
    15ba:	90 93 31 01 	sts	0x0131, r25
    15be:	08 95       	ret

000015c0 <__prologue_saves__>:
    15c0:	2f 92       	push	r2
    15c2:	3f 92       	push	r3
    15c4:	4f 92       	push	r4
    15c6:	5f 92       	push	r5
    15c8:	6f 92       	push	r6
    15ca:	7f 92       	push	r7
    15cc:	8f 92       	push	r8
    15ce:	9f 92       	push	r9
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	ca 1b       	sub	r28, r26
    15ea:	db 0b       	sbc	r29, r27
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	09 94       	ijmp

000015f8 <__epilogue_restores__>:
    15f8:	2a 88       	ldd	r2, Y+18	; 0x12
    15fa:	39 88       	ldd	r3, Y+17	; 0x11
    15fc:	48 88       	ldd	r4, Y+16	; 0x10
    15fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1600:	6e 84       	ldd	r6, Y+14	; 0x0e
    1602:	7d 84       	ldd	r7, Y+13	; 0x0d
    1604:	8c 84       	ldd	r8, Y+12	; 0x0c
    1606:	9b 84       	ldd	r9, Y+11	; 0x0b
    1608:	aa 84       	ldd	r10, Y+10	; 0x0a
    160a:	b9 84       	ldd	r11, Y+9	; 0x09
    160c:	c8 84       	ldd	r12, Y+8	; 0x08
    160e:	df 80       	ldd	r13, Y+7	; 0x07
    1610:	ee 80       	ldd	r14, Y+6	; 0x06
    1612:	fd 80       	ldd	r15, Y+5	; 0x05
    1614:	0c 81       	ldd	r16, Y+4	; 0x04
    1616:	1b 81       	ldd	r17, Y+3	; 0x03
    1618:	aa 81       	ldd	r26, Y+2	; 0x02
    161a:	b9 81       	ldd	r27, Y+1	; 0x01
    161c:	ce 0f       	add	r28, r30
    161e:	d1 1d       	adc	r29, r1
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	ed 01       	movw	r28, r26
    162c:	08 95       	ret

0000162e <__do_global_dtors>:
    162e:	10 e0       	ldi	r17, 0x00	; 0
    1630:	ca e7       	ldi	r28, 0x7A	; 122
    1632:	d0 e0       	ldi	r29, 0x00	; 0
    1634:	04 c0       	rjmp	.+8      	; 0x163e <__do_global_dtors+0x10>
    1636:	fe 01       	movw	r30, r28
    1638:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__tablejump__>
    163c:	22 96       	adiw	r28, 0x02	; 2
    163e:	cc 37       	cpi	r28, 0x7C	; 124
    1640:	d1 07       	cpc	r29, r17
    1642:	c9 f7       	brne	.-14     	; 0x1636 <__do_global_dtors+0x8>
    1644:	f8 94       	cli

00001646 <__stop_program>:
    1646:	ff cf       	rjmp	.-2      	; 0x1646 <__stop_program>
