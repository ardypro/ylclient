
yeelink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  000015e0  00001674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  0080018c  0080018c  00001700  2**0
                  ALLOC
  3 .stab         0000a074  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000ee3c  00000000  00000000  0000b774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__dtors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_16>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_18>
      4c:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_19>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
      68:	2b 01       	movw	r4, r22
      6a:	45 03       	mulsu	r20, r21

0000006c <__ctors_end>:
      6c:	30 01       	movw	r6, r0

0000006e <__dtors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf ef       	ldi	r28, 0xFF	; 255
      74:	d8 e0       	ldi	r29, 0x08	; 8
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	a0 e0       	ldi	r26, 0x00	; 0
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	e0 ee       	ldi	r30, 0xE0	; 224
      82:	f5 e1       	ldi	r31, 0x15	; 21
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	ac 38       	cpi	r26, 0x8C	; 140
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	12 e0       	ldi	r17, 0x02	; 2
      92:	ac e8       	ldi	r26, 0x8C	; 140
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	a1 35       	cpi	r26, 0x51	; 81
      9c:	b1 07       	cpc	r27, r17
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	cc e6       	ldi	r28, 0x6C	; 108
      a4:	d0 e0       	ldi	r29, 0x00	; 0
      a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
      a8:	22 97       	sbiw	r28, 0x02	; 2
      aa:	fe 01       	movw	r30, r28
      ac:	0e 94 20 09 	call	0x1240	; 0x1240 <__tablejump__>
      b0:	c8 36       	cpi	r28, 0x68	; 104
      b2:	d1 07       	cpc	r29, r17
      b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
      b6:	0e 94 7d 05 	call	0xafa	; 0xafa <main>
      ba:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__do_global_dtors>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <_ZN7yeelink15GenericEthernetD1Ev>:
	seconds = 10; //API规定两条记录发送的时间间隔不少于10s
	apiHeader = 0;
	jsonStr = 0;
}

GenericEthernet::~GenericEthernet() {
      c2:	28 e5       	ldi	r18, 0x58	; 88
      c4:	31 e0       	ldi	r19, 0x01	; 1
      c6:	fc 01       	movw	r30, r24
      c8:	31 83       	std	Z+1, r19	; 0x01
      ca:	20 83       	st	Z, r18

}
      cc:	08 95       	ret

000000ce <_ZN7yeelink15GenericEthernetD0Ev>:
	seconds = 10; //API规定两条记录发送的时间间隔不少于10s
	apiHeader = 0;
	jsonStr = 0;
}

GenericEthernet::~GenericEthernet() {
      ce:	28 e5       	ldi	r18, 0x58	; 88
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	fc 01       	movw	r30, r24
      d4:	31 83       	std	Z+1, r19	; 0x01
      d6:	20 83       	st	Z, r18

}
      d8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZdlPv>
      dc:	08 95       	ret

000000de <_ZN7yeelink15GenericEthernetC1Ev>:
#include "GenericEthernet.h"
#include "ylconst.h"

namespace yeelink {

GenericEthernet::GenericEthernet() {
      de:	fc 01       	movw	r30, r24
      e0:	88 e5       	ldi	r24, 0x58	; 88
      e2:	91 e0       	ldi	r25, 0x01	; 1
      e4:	91 83       	std	Z+1, r25	; 0x01
      e6:	80 83       	st	Z, r24
	seconds = 10; //API规定两条记录发送的时间间隔不少于10s
      e8:	8a e0       	ldi	r24, 0x0A	; 10
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	93 83       	std	Z+3, r25	; 0x03
      ee:	82 83       	std	Z+2, r24	; 0x02
	apiHeader = 0;
      f0:	15 82       	std	Z+5, r1	; 0x05
      f2:	14 82       	std	Z+4, r1	; 0x04
	jsonStr = 0;
      f4:	17 82       	std	Z+7, r1	; 0x07
      f6:	16 82       	std	Z+6, r1	; 0x06
}
      f8:	08 95       	ret

000000fa <_ZN7yeelink10SerialHTTP12postKeyValueEPcS1_>:

bool SerialHTTP::postKeyValue(char* key, char* value)
{

	return 0;
}
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	08 95       	ret

000000fe <_ZN7yeelink10SerialHTTP7connectEv>:
// do nothing
}

bool SerialHTTP::connect()
{
	serial->println("serial port is connecting");
      fe:	fc 01       	movw	r30, r24
     100:	82 85       	ldd	r24, Z+10	; 0x0a
     102:	93 85       	ldd	r25, Z+11	; 0x0b
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	71 e0       	ldi	r23, 0x01	; 1
     108:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN5Print7printlnEPKc>
	return true;
}
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	08 95       	ret

00000110 <_ZN7yeelink10SerialHTTPD1Ev>:
	default:
		serial = &Serial;
	}
}

SerialHTTP::~SerialHTTP()
     110:	28 e6       	ldi	r18, 0x68	; 104
     112:	31 e0       	ldi	r19, 0x01	; 1
     114:	fc 01       	movw	r30, r24
     116:	31 83       	std	Z+1, r19	; 0x01
     118:	20 83       	st	Z, r18
     11a:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN7yeelink15GenericEthernetD1Ev>
{
// do nothing
}
     11e:	08 95       	ret

00000120 <_ZN7yeelink10SerialHTTPD0Ev>:
	default:
		serial = &Serial;
	}
}

SerialHTTP::~SerialHTTP()
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	ec 01       	movw	r28, r24
     126:	88 e6       	ldi	r24, 0x68	; 104
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	99 83       	std	Y+1, r25	; 0x01
     12c:	88 83       	st	Y, r24
     12e:	ce 01       	movw	r24, r28
     130:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN7yeelink15GenericEthernetD1Ev>
{
// do nothing
}
     134:	ce 01       	movw	r24, r28
     136:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZdlPv>
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <_ZN7yeelink10SerialHTTPC1Ei>:
#endif

namespace yeelink
{

SerialHTTP::SerialHTTP(int serialIndex)
     140:	0f 93       	push	r16
     142:	1f 93       	push	r17
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	ec 01       	movw	r28, r24
     14a:	0e 94 6f 00 	call	0xde	; 0xde <_ZN7yeelink15GenericEthernetC1Ev>
     14e:	88 e6       	ldi	r24, 0x68	; 104
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	99 83       	std	Y+1, r25	; 0x01
     154:	88 83       	st	Y, r24
#else
		serial = &Serial;
#endif
		break;
	default:
		serial = &Serial;
     156:	85 e2       	ldi	r24, 0x25	; 37
     158:	92 e0       	ldi	r25, 0x02	; 2
     15a:	9b 87       	std	Y+11, r25	; 0x0b
     15c:	8a 87       	std	Y+10, r24	; 0x0a
	}
}
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	1f 91       	pop	r17
     164:	0f 91       	pop	r16
     166:	08 95       	ret

00000168 <_ZN7yeelink10SerialHTTP13sendValueflagEv>:
}

void SerialHTTP::sendValueflag()
{
	//serial->print("\"value\":");
	serial->print("value:");
     168:	fc 01       	movw	r30, r24
     16a:	82 85       	ldd	r24, Z+10	; 0x0a
     16c:	93 85       	ldd	r25, Z+11	; 0x0b
     16e:	6a e1       	ldi	r22, 0x1A	; 26
     170:	71 e0       	ldi	r23, 0x01	; 1
     172:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN5Print5printEPKc>
}
     176:	08 95       	ret

00000178 <_ZN7yeelink10SerialHTTP4PostEf>:
	sendValueflag();
	return serial->print(value);
}

bool SerialHTTP::Post(float value)
{
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	ec 01       	movw	r28, r24
     186:	7a 01       	movw	r14, r20
     188:	8b 01       	movw	r16, r22
	sendValueflag();
     18a:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN7yeelink10SerialHTTP13sendValueflagEv>
	return serial->print(value);
     18e:	8a 85       	ldd	r24, Y+10	; 0x0a
     190:	9b 85       	ldd	r25, Y+11	; 0x0b
     192:	b8 01       	movw	r22, r16
     194:	a7 01       	movw	r20, r14
     196:	22 e0       	ldi	r18, 0x02	; 2
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <_ZN5Print5printEdi>
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	09 f4       	brne	.+2      	; 0x1a6 <_ZN7yeelink10SerialHTTP4PostEf+0x2e>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
}
     1a6:	82 2f       	mov	r24, r18
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	08 95       	ret

000001b6 <_ZN7yeelink10SerialHTTP4PostEi>:
	serial->println("serial port is connecting");
	return true;
}

bool SerialHTTP::Post(int value)
{
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	ec 01       	movw	r28, r24
     1c0:	8b 01       	movw	r16, r22
	sendValueflag();
     1c2:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN7yeelink10SerialHTTP13sendValueflagEv>
	return serial->print(value);
     1c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     1c8:	9b 85       	ldd	r25, Y+11	; 0x0b
     1ca:	b8 01       	movw	r22, r16
     1cc:	4a e0       	ldi	r20, 0x0A	; 10
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	0e 94 94 04 	call	0x928	; 0x928 <_ZN5Print5printEii>
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	09 f4       	brne	.+2      	; 0x1dc <_ZN7yeelink10SerialHTTP4PostEi+0x26>
     1da:	20 e0       	ldi	r18, 0x00	; 0
}
     1dc:	82 2f       	mov	r24, r18
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	08 95       	ret

000001e8 <_Z41__static_initialization_and_destruction_0ii.clone.0>:
{
	int v;
	v=random(256);
	client.Post(v);
	delay(20*1000);
}
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	91 05       	cpc	r25, r1
     1ec:	29 f4       	brne	.+10     	; 0x1f8 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
#include "ylclient.h"

extern HardwareSerial Serial;
using namespace yeelink;

ylclient client;
     1ee:	8c e8       	ldi	r24, 0x8C	; 140
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 43 01 	call	0x286	; 0x286 <_ZN7yeelink8ylclientC1Ev>
     1f6:	08 95       	ret
     1f8:	00 97       	sbiw	r24, 0x00	; 0
     1fa:	21 f4       	brne	.+8      	; 0x204 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
     1fc:	8c e8       	ldi	r24, 0x8C	; 140
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN7yeelink8ylclientD1Ev>
     204:	08 95       	ret

00000206 <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
	Serial.begin(9600);
     206:	85 e2       	ldi	r24, 0x25	; 37
     208:	92 e0       	ldi	r25, 0x02	; 2
     20a:	40 e8       	ldi	r20, 0x80	; 128
     20c:	55 e2       	ldi	r21, 0x25	; 37
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN14HardwareSerial5beginEm>
	//初始化yeelink client
	//client.setAPIKey("apikey");	//设置API key，这里采用默认的key
	//client.setAPIVersion("v1.0");	//设置API版本，除非yeelink API升级，则采用默认的v1.0版本
	client.setEthernetCardType(SERIALOVERHTTP );
     216:	8c e8       	ldi	r24, 0x8C	; 140
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	62 e0       	ldi	r22, 0x02	; 2
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>
	randomSeed(analogRead(0));
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 63 06 	call	0xcc6	; 0xcc6 <analogRead>
     228:	0e 94 57 05 	call	0xaae	; 0xaae <_Z10randomSeedj>
}
     22c:	08 95       	ret

0000022e <loop>:

// The loop function is called in an endless loop
void loop()
{
	int v;
	v=random(256);
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	71 e0       	ldi	r23, 0x01	; 1
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 5f 05 	call	0xabe	; 0xabe <_Z6randoml>
     23a:	9b 01       	movw	r18, r22
     23c:	ac 01       	movw	r20, r24
	client.Post(v);
     23e:	8c e8       	ldi	r24, 0x8C	; 140
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	b9 01       	movw	r22, r18
     244:	0e 94 85 01 	call	0x30a	; 0x30a <_ZN7yeelink8ylclient4PostEi>
	delay(20*1000);
     248:	60 e2       	ldi	r22, 0x20	; 32
     24a:	7e e4       	ldi	r23, 0x4E	; 78
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 01 06 	call	0xc02	; 0xc02 <delay>
}
     254:	08 95       	ret

00000256 <_GLOBAL__I_client>:
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     25e:	08 95       	ret

00000260 <_GLOBAL__D_client>:
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     268:	08 95       	ret

0000026a <_ZN7yeelink8ylclientD1Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     26a:	28 e7       	ldi	r18, 0x78	; 120
     26c:	31 e0       	ldi	r19, 0x01	; 1
     26e:	fc 01       	movw	r30, r24
     270:	31 83       	std	Z+1, r19	; 0x01
     272:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     274:	08 95       	ret

00000276 <_ZN7yeelink8ylclientD0Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     276:	28 e7       	ldi	r18, 0x78	; 120
     278:	31 e0       	ldi	r19, 0x01	; 1
     27a:	fc 01       	movw	r30, r24
     27c:	31 83       	std	Z+1, r19	; 0x01
     27e:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     280:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZdlPv>
     284:	08 95       	ret

00000286 <_ZN7yeelink8ylclientC1Ev>:
//#endif

namespace yeelink
{

ylclient::ylclient()
     286:	fc 01       	movw	r30, r24
     288:	88 e7       	ldi	r24, 0x78	; 120
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	80 83       	st	Z, r24
{
	// TODO Auto-generated constructor stub
	this->_connected = false;
     290:	16 82       	std	Z+6, r1	; 0x06
	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消
     292:	81 e2       	ldi	r24, 0x21	; 33
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	93 83       	std	Z+3, r25	; 0x03
     298:	82 83       	std	Z+2, r24	; 0x02
	this->_cardtype = SERIALOVERHTTP;
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	95 83       	std	Z+5, r25	; 0x05
     2a0:	84 83       	std	Z+4, r24	; 0x04
	this->_apiver = (char*) "v1.0";
     2a2:	82 e4       	ldi	r24, 0x42	; 66
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	90 87       	std	Z+8, r25	; 0x08
     2a8:	87 83       	std	Z+7, r24	; 0x07
	this->_activedeviceid = 0;
     2aa:	12 86       	std	Z+10, r1	; 0x0a
     2ac:	11 86       	std	Z+9, r1	; 0x09
	this->_activesensorid = 0;
     2ae:	14 86       	std	Z+12, r1	; 0x0c
     2b0:	13 86       	std	Z+11, r1	; 0x0b
	this->_serialIndex = 1;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	96 87       	std	Z+14, r25	; 0x0e
     2b8:	85 87       	std	Z+13, r24	; 0x0d

}
     2ba:	08 95       	ret

000002bc <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>:
//此处应该能够判断板子类型，然后决定串口数量

}

void ylclient::setEthernetCardType(ETHERNETCARD cardType)
{
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	ec 01       	movw	r28, r24
	this->_cardtype = cardType;
     2c6:	7d 83       	std	Y+5, r23	; 0x05
     2c8:	6c 83       	std	Y+4, r22	; 0x04
	switch (cardType)
     2ca:	62 30       	cpi	r22, 0x02	; 2
     2cc:	71 05       	cpc	r23, r1
     2ce:	59 f4       	brne	.+22     	; 0x2e6 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x2a>
	case ENC28J60:

		break;

	case SERIALOVERHTTP:
		net = new SerialHTTP();
     2d0:	8c e0       	ldi	r24, 0x0C	; 12
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 8c 05 	call	0xb18	; 0xb18 <_Znwj>
     2d8:	8c 01       	movw	r16, r24
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	0e 94 a0 00 	call	0x140	; 0x140 <_ZN7yeelink10SerialHTTPC1Ei>
     2e2:	0f 87       	std	Y+15, r16	; 0x0f
     2e4:	18 8b       	std	Y+16, r17	; 0x10

		break;
	}
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <_ZN7yeelink8ylclient4PostEf>:
	return 0;
}

bool ylclient::Post(float value)
{
	return net->Post(value);
     2f0:	dc 01       	movw	r26, r24
     2f2:	1f 96       	adiw	r26, 0x0f	; 15
     2f4:	8d 91       	ld	r24, X+
     2f6:	9c 91       	ld	r25, X
     2f8:	50 97       	sbiw	r26, 0x10	; 16
     2fa:	dc 01       	movw	r26, r24
     2fc:	ed 91       	ld	r30, X+
     2fe:	fc 91       	ld	r31, X
     300:	00 84       	ldd	r0, Z+8	; 0x08
     302:	f1 85       	ldd	r31, Z+9	; 0x09
     304:	e0 2d       	mov	r30, r0
     306:	09 95       	icall
}
     308:	08 95       	ret

0000030a <_ZN7yeelink8ylclient4PostEi>:
		break;
	}
}

bool ylclient::Post(int value)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
	float v;
	v = (double) value;
     310:	88 27       	eor	r24, r24
     312:	77 fd       	sbrc	r23, 7
     314:	80 95       	com	r24
     316:	98 2f       	mov	r25, r24
     318:	0e 94 88 07 	call	0xf10	; 0xf10 <__floatsisf>
     31c:	ab 01       	movw	r20, r22
     31e:	bc 01       	movw	r22, r24
	return this->Post(v);
     320:	ce 01       	movw	r24, r28
     322:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_ZN7yeelink8ylclient4PostEf>
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     32c:	fc 01       	movw	r30, r24
     32e:	84 85       	ldd	r24, Z+12	; 0x0c
     330:	95 85       	ldd	r25, Z+13	; 0x0d
     332:	fc 01       	movw	r30, r24
     334:	e0 5c       	subi	r30, 0xC0	; 192
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	20 81       	ld	r18, Z
     33a:	31 81       	ldd	r19, Z+1	; 0x01
     33c:	8e 5b       	subi	r24, 0xBE	; 190
     33e:	9f 4f       	sbci	r25, 0xFF	; 255
     340:	fc 01       	movw	r30, r24
     342:	80 81       	ld	r24, Z
     344:	91 81       	ldd	r25, Z+1	; 0x01
     346:	28 1b       	sub	r18, r24
     348:	39 0b       	sbc	r19, r25
     34a:	2f 73       	andi	r18, 0x3F	; 63
     34c:	30 70       	andi	r19, 0x00	; 0
}
     34e:	c9 01       	movw	r24, r18
     350:	08 95       	ret

00000352 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     352:	fc 01       	movw	r30, r24
     354:	84 85       	ldd	r24, Z+12	; 0x0c
     356:	95 85       	ldd	r25, Z+13	; 0x0d
     358:	fc 01       	movw	r30, r24
     35a:	e0 5c       	subi	r30, 0xC0	; 192
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	40 81       	ld	r20, Z
     360:	51 81       	ldd	r21, Z+1	; 0x01
     362:	fc 01       	movw	r30, r24
     364:	ee 5b       	subi	r30, 0xBE	; 190
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	20 81       	ld	r18, Z
     36a:	31 81       	ldd	r19, Z+1	; 0x01
     36c:	42 17       	cp	r20, r18
     36e:	53 07       	cpc	r21, r19
     370:	41 f0       	breq	.+16     	; 0x382 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     372:	01 90       	ld	r0, Z+
     374:	f0 81       	ld	r31, Z
     376:	e0 2d       	mov	r30, r0
     378:	e8 0f       	add	r30, r24
     37a:	f9 1f       	adc	r31, r25
     37c:	20 81       	ld	r18, Z
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	02 c0       	rjmp	.+4      	; 0x386 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     382:	2f ef       	ldi	r18, 0xFF	; 255
     384:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     386:	c9 01       	movw	r24, r18
     388:	08 95       	ret

0000038a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     38a:	fc 01       	movw	r30, r24
     38c:	84 85       	ldd	r24, Z+12	; 0x0c
     38e:	95 85       	ldd	r25, Z+13	; 0x0d
     390:	fc 01       	movw	r30, r24
     392:	e0 5c       	subi	r30, 0xC0	; 192
     394:	ff 4f       	sbci	r31, 0xFF	; 255
     396:	40 81       	ld	r20, Z
     398:	51 81       	ldd	r21, Z+1	; 0x01
     39a:	fc 01       	movw	r30, r24
     39c:	ee 5b       	subi	r30, 0xBE	; 190
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	20 81       	ld	r18, Z
     3a2:	31 81       	ldd	r19, Z+1	; 0x01
     3a4:	42 17       	cp	r20, r18
     3a6:	53 07       	cpc	r21, r19
     3a8:	71 f0       	breq	.+28     	; 0x3c6 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     3aa:	a0 81       	ld	r26, Z
     3ac:	b1 81       	ldd	r27, Z+1	; 0x01
     3ae:	a8 0f       	add	r26, r24
     3b0:	b9 1f       	adc	r27, r25
     3b2:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	8f 73       	andi	r24, 0x3F	; 63
     3bc:	90 70       	andi	r25, 0x00	; 0
     3be:	91 83       	std	Z+1, r25	; 0x01
     3c0:	80 83       	st	Z, r24
    return c;
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     3c6:	2f ef       	ldi	r18, 0xFF	; 255
     3c8:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     3ca:	c9 01       	movw	r24, r18
     3cc:	08 95       	ret

000003ce <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     3ce:	dc 01       	movw	r26, r24
     3d0:	1e 96       	adiw	r26, 0x0e	; 14
     3d2:	8d 91       	ld	r24, X+
     3d4:	9c 91       	ld	r25, X
     3d6:	1f 97       	sbiw	r26, 0x0f	; 15
     3d8:	fc 01       	movw	r30, r24
     3da:	e0 5c       	subi	r30, 0xC0	; 192
     3dc:	ff 4f       	sbci	r31, 0xFF	; 255
     3de:	8e 5b       	subi	r24, 0xBE	; 190
     3e0:	9f 4f       	sbci	r25, 0xFF	; 255
     3e2:	40 81       	ld	r20, Z
     3e4:	51 81       	ldd	r21, Z+1	; 0x01
     3e6:	dc 01       	movw	r26, r24
     3e8:	2d 91       	ld	r18, X+
     3ea:	3c 91       	ld	r19, X
     3ec:	11 97       	sbiw	r26, 0x01	; 1
     3ee:	42 17       	cp	r20, r18
     3f0:	53 07       	cpc	r21, r19
     3f2:	b9 f7       	brne	.-18     	; 0x3e2 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     3f4:	08 95       	ret

000003f6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     3f6:	1f 93       	push	r17
     3f8:	fc 01       	movw	r30, r24
     3fa:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     3fc:	26 85       	ldd	r18, Z+14	; 0x0e
     3fe:	37 85       	ldd	r19, Z+15	; 0x0f
     400:	d9 01       	movw	r26, r18
     402:	a0 5c       	subi	r26, 0xC0	; 192
     404:	bf 4f       	sbci	r27, 0xFF	; 255
     406:	8d 91       	ld	r24, X+
     408:	9c 91       	ld	r25, X
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	60 e4       	ldi	r22, 0x40	; 64
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 ba 08 	call	0x1174	; 0x1174 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     414:	d9 01       	movw	r26, r18
     416:	ae 5b       	subi	r26, 0xBE	; 190
     418:	bf 4f       	sbci	r27, 0xFF	; 255
     41a:	4d 91       	ld	r20, X+
     41c:	5c 91       	ld	r21, X
     41e:	11 97       	sbiw	r26, 0x01	; 1
     420:	84 17       	cp	r24, r20
     422:	95 07       	cpc	r25, r21
     424:	d1 f3       	breq	.-12     	; 0x41a <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     426:	d9 01       	movw	r26, r18
     428:	a0 5c       	subi	r26, 0xC0	; 192
     42a:	bf 4f       	sbci	r27, 0xFF	; 255
     42c:	0d 90       	ld	r0, X+
     42e:	bc 91       	ld	r27, X
     430:	a0 2d       	mov	r26, r0
     432:	a2 0f       	add	r26, r18
     434:	b3 1f       	adc	r27, r19
     436:	1c 93       	st	X, r17
  _tx_buffer->head = i;
     438:	a6 85       	ldd	r26, Z+14	; 0x0e
     43a:	b7 85       	ldd	r27, Z+15	; 0x0f
     43c:	a0 5c       	subi	r26, 0xC0	; 192
     43e:	bf 4f       	sbci	r27, 0xFF	; 255
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	9c 93       	st	X, r25
     444:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     446:	a6 89       	ldd	r26, Z+22	; 0x16
     448:	b7 89       	ldd	r27, Z+23	; 0x17
     44a:	2c 91       	ld	r18, X
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	05 8c       	ldd	r0, Z+29	; 0x1d
     452:	02 c0       	rjmp	.+4      	; 0x458 <_ZN14HardwareSerial5writeEh+0x62>
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	0a 94       	dec	r0
     45a:	e2 f7       	brpl	.-8      	; 0x454 <_ZN14HardwareSerial5writeEh+0x5e>
     45c:	28 2b       	or	r18, r24
     45e:	2c 93       	st	X, r18
  
  return 1;
}
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	1f 91       	pop	r17
     466:	08 95       	ret

00000468 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     468:	fb 01       	movw	r30, r22
     46a:	e0 5c       	subi	r30, 0xC0	; 192
     46c:	ff 4f       	sbci	r31, 0xFF	; 255
     46e:	20 81       	ld	r18, Z
     470:	31 81       	ldd	r19, Z+1	; 0x01
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	2f 73       	andi	r18, 0x3F	; 63
     478:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     47a:	db 01       	movw	r26, r22
     47c:	ae 5b       	subi	r26, 0xBE	; 190
     47e:	bf 4f       	sbci	r27, 0xFF	; 255
     480:	4d 91       	ld	r20, X+
     482:	5c 91       	ld	r21, X
     484:	11 97       	sbiw	r26, 0x01	; 1
     486:	24 17       	cp	r18, r20
     488:	35 07       	cpc	r19, r21
     48a:	39 f0       	breq	.+14     	; 0x49a <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
     48c:	a0 81       	ld	r26, Z
     48e:	b1 81       	ldd	r27, Z+1	; 0x01
     490:	a6 0f       	add	r26, r22
     492:	b7 1f       	adc	r27, r23
     494:	8c 93       	st	X, r24
    buffer->head = i;
     496:	31 83       	std	Z+1, r19	; 0x01
     498:	20 83       	st	Z, r18
     49a:	08 95       	ret

0000049c <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     49c:	08 95       	ret

0000049e <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     49e:	1f 92       	push	r1
     4a0:	0f 92       	push	r0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	0f 92       	push	r0
     4a6:	11 24       	eor	r1, r1
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	ef 93       	push	r30
     4be:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     4c0:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
     4c4:	6d e9       	ldi	r22, 0x9D	; 157
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	0e 94 34 02 	call	0x468	; 0x468 <_Z10store_charhP11ring_buffer>
  }
     4cc:	ff 91       	pop	r31
     4ce:	ef 91       	pop	r30
     4d0:	bf 91       	pop	r27
     4d2:	af 91       	pop	r26
     4d4:	9f 91       	pop	r25
     4d6:	8f 91       	pop	r24
     4d8:	7f 91       	pop	r23
     4da:	6f 91       	pop	r22
     4dc:	5f 91       	pop	r21
     4de:	4f 91       	pop	r20
     4e0:	3f 91       	pop	r19
     4e2:	2f 91       	pop	r18
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     4ee:	85 e2       	ldi	r24, 0x25	; 37
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN14HardwareSerial9availableEv>
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	11 f0       	breq	.+4      	; 0x4fe <_Z14serialEventRunv+0x10>
     4fa:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z11serialEventv>
     4fe:	08 95       	ret

00000500 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	5f 93       	push	r21
     510:	6f 93       	push	r22
     512:	7f 93       	push	r23
     514:	8f 93       	push	r24
     516:	9f 93       	push	r25
     518:	af 93       	push	r26
     51a:	bf 93       	push	r27
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     520:	20 91 21 02 	lds	r18, 0x0221
     524:	30 91 22 02 	lds	r19, 0x0222
     528:	80 91 23 02 	lds	r24, 0x0223
     52c:	90 91 24 02 	lds	r25, 0x0224
     530:	28 17       	cp	r18, r24
     532:	39 07       	cpc	r19, r25
     534:	31 f4       	brne	.+12     	; 0x542 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     536:	80 91 c1 00 	lds	r24, 0x00C1
     53a:	8f 7d       	andi	r24, 0xDF	; 223
     53c:	80 93 c1 00 	sts	0x00C1, r24
     540:	16 c0       	rjmp	.+44     	; 0x56e <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     542:	e0 91 23 02 	lds	r30, 0x0223
     546:	f0 91 24 02 	lds	r31, 0x0224
     54a:	ef 51       	subi	r30, 0x1F	; 31
     54c:	fe 4f       	sbci	r31, 0xFE	; 254
     54e:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     550:	80 91 23 02 	lds	r24, 0x0223
     554:	90 91 24 02 	lds	r25, 0x0224
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	60 e4       	ldi	r22, 0x40	; 64
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	0e 94 ba 08 	call	0x1174	; 0x1174 <__divmodhi4>
     562:	90 93 24 02 	sts	0x0224, r25
     566:	80 93 23 02 	sts	0x0223, r24
	
  #if defined(UDR0)
    UDR0 = c;
     56a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     56e:	ff 91       	pop	r31
     570:	ef 91       	pop	r30
     572:	bf 91       	pop	r27
     574:	af 91       	pop	r26
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	7f 91       	pop	r23
     57c:	6f 91       	pop	r22
     57e:	5f 91       	pop	r21
     580:	3f 91       	pop	r19
     582:	2f 91       	pop	r18
     584:	0f 90       	pop	r0
     586:	0f be       	out	0x3f, r0	; 63
     588:	0f 90       	pop	r0
     58a:	1f 90       	pop	r1
     58c:	18 95       	reti

0000058e <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     58e:	df 92       	push	r13
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	ec 01       	movw	r28, r24
     59e:	7a 01       	movw	r14, r20
     5a0:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     5a2:	dd 24       	eor	r13, r13
     5a4:	d3 94       	inc	r13
     5a6:	40 30       	cpi	r20, 0x00	; 0
     5a8:	81 ee       	ldi	r24, 0xE1	; 225
     5aa:	58 07       	cpc	r21, r24
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	68 07       	cpc	r22, r24
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	78 07       	cpc	r23, r24
     5b4:	49 f4       	brne	.+18     	; 0x5c8 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     5b6:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     5b8:	ec 89       	ldd	r30, Y+20	; 0x14
     5ba:	fd 89       	ldd	r31, Y+21	; 0x15
     5bc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     5be:	60 e8       	ldi	r22, 0x80	; 128
     5c0:	74 e8       	ldi	r23, 0x84	; 132
     5c2:	8e e1       	ldi	r24, 0x1E	; 30
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0f c0       	rjmp	.+30     	; 0x5e6 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     5c8:	ec 89       	ldd	r30, Y+20	; 0x14
     5ca:	fd 89       	ldd	r31, Y+21	; 0x15
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 8c       	ldd	r0, Y+30	; 0x1e
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_ZN14HardwareSerial5beginEm+0x4a>
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	0a 94       	dec	r0
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <_ZN14HardwareSerial5beginEm+0x46>
     5dc:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	79 e0       	ldi	r23, 0x09	; 9
     5e2:	8d e3       	ldi	r24, 0x3D	; 61
     5e4:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     5e6:	a8 01       	movw	r20, r16
     5e8:	97 01       	movw	r18, r14
     5ea:	0e 94 cd 08 	call	0x119a	; 0x119a <__udivmodsi4>
     5ee:	21 50       	subi	r18, 0x01	; 1
     5f0:	30 40       	sbci	r19, 0x00	; 0
     5f2:	40 40       	sbci	r20, 0x00	; 0
     5f4:	50 40       	sbci	r21, 0x00	; 0
     5f6:	56 95       	lsr	r21
     5f8:	47 95       	ror	r20
     5fa:	37 95       	ror	r19
     5fc:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     5fe:	80 e1       	ldi	r24, 0x10	; 16
     600:	20 30       	cpi	r18, 0x00	; 0
     602:	38 07       	cpc	r19, r24
     604:	10 f0       	brcs	.+4      	; 0x60a <_ZN14HardwareSerial5beginEm+0x7c>
     606:	dd 20       	and	r13, r13
     608:	b1 f6       	brne	.-84     	; 0x5b6 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     60a:	e8 89       	ldd	r30, Y+16	; 0x10
     60c:	f9 89       	ldd	r31, Y+17	; 0x11
     60e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     610:	ea 89       	ldd	r30, Y+18	; 0x12
     612:	fb 89       	ldd	r31, Y+19	; 0x13
     614:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     616:	ee 89       	ldd	r30, Y+22	; 0x16
     618:	ff 89       	ldd	r31, Y+23	; 0x17
     61a:	40 81       	ld	r20, Z
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9c 01       	movw	r18, r24
     622:	0a 8c       	ldd	r0, Y+26	; 0x1a
     624:	02 c0       	rjmp	.+4      	; 0x62a <_ZN14HardwareSerial5beginEm+0x9c>
     626:	22 0f       	add	r18, r18
     628:	33 1f       	adc	r19, r19
     62a:	0a 94       	dec	r0
     62c:	e2 f7       	brpl	.-8      	; 0x626 <_ZN14HardwareSerial5beginEm+0x98>
     62e:	42 2b       	or	r20, r18
     630:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     632:	ee 89       	ldd	r30, Y+22	; 0x16
     634:	ff 89       	ldd	r31, Y+23	; 0x17
     636:	40 81       	ld	r20, Z
     638:	9c 01       	movw	r18, r24
     63a:	0b 8c       	ldd	r0, Y+27	; 0x1b
     63c:	02 c0       	rjmp	.+4      	; 0x642 <_ZN14HardwareSerial5beginEm+0xb4>
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	0a 94       	dec	r0
     644:	e2 f7       	brpl	.-8      	; 0x63e <_ZN14HardwareSerial5beginEm+0xb0>
     646:	42 2b       	or	r20, r18
     648:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     64a:	ee 89       	ldd	r30, Y+22	; 0x16
     64c:	ff 89       	ldd	r31, Y+23	; 0x17
     64e:	40 81       	ld	r20, Z
     650:	9c 01       	movw	r18, r24
     652:	0c 8c       	ldd	r0, Y+28	; 0x1c
     654:	02 c0       	rjmp	.+4      	; 0x65a <_ZN14HardwareSerial5beginEm+0xcc>
     656:	22 0f       	add	r18, r18
     658:	33 1f       	adc	r19, r19
     65a:	0a 94       	dec	r0
     65c:	e2 f7       	brpl	.-8      	; 0x656 <_ZN14HardwareSerial5beginEm+0xc8>
     65e:	42 2b       	or	r20, r18
     660:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     662:	ee 89       	ldd	r30, Y+22	; 0x16
     664:	ff 89       	ldd	r31, Y+23	; 0x17
     666:	20 81       	ld	r18, Z
     668:	0d 8c       	ldd	r0, Y+29	; 0x1d
     66a:	02 c0       	rjmp	.+4      	; 0x670 <_ZN14HardwareSerial5beginEm+0xe2>
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	0a 94       	dec	r0
     672:	e2 f7       	brpl	.-8      	; 0x66c <_ZN14HardwareSerial5beginEm+0xde>
     674:	80 95       	com	r24
     676:	82 23       	and	r24, r18
     678:	80 83       	st	Z, r24
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	08 95       	ret

0000068a <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     68a:	10 92 28 02 	sts	0x0228, r1
     68e:	10 92 27 02 	sts	0x0227, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     692:	88 ee       	ldi	r24, 0xE8	; 232
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	80 93 29 02 	sts	0x0229, r24
     69e:	90 93 2a 02 	sts	0x022A, r25
     6a2:	a0 93 2b 02 	sts	0x022B, r26
     6a6:	b0 93 2c 02 	sts	0x022C, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     6aa:	e7 e2       	ldi	r30, 0x27	; 39
     6ac:	f2 e0       	ldi	r31, 0x02	; 2
     6ae:	80 e8       	ldi	r24, 0x80	; 128
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	92 93       	st	-Z, r25
     6b4:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     6b6:	8d e9       	ldi	r24, 0x9D	; 157
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	95 87       	std	Z+13, r25	; 0x0d
     6bc:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     6be:	81 ee       	ldi	r24, 0xE1	; 225
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	97 87       	std	Z+15, r25	; 0x0f
     6c4:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     6c6:	85 ec       	ldi	r24, 0xC5	; 197
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	91 8b       	std	Z+17, r25	; 0x11
     6cc:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     6ce:	84 ec       	ldi	r24, 0xC4	; 196
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	93 8b       	std	Z+19, r25	; 0x13
     6d4:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     6d6:	80 ec       	ldi	r24, 0xC0	; 192
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	95 8b       	std	Z+21, r25	; 0x15
     6dc:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     6de:	81 ec       	ldi	r24, 0xC1	; 193
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	97 8b       	std	Z+23, r25	; 0x17
     6e4:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     6e6:	86 ec       	ldi	r24, 0xC6	; 198
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	91 8f       	std	Z+25, r25	; 0x19
     6ec:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     6f6:	87 e0       	ldi	r24, 0x07	; 7
     6f8:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     702:	08 95       	ret

00000704 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	6c 01       	movw	r12, r24
     716:	7b 01       	movw	r14, r22
     718:	8a 01       	movw	r16, r20
  size_t n = 0;
     71a:	c0 e0       	ldi	r28, 0x00	; 0
     71c:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     71e:	0f c0       	rjmp	.+30     	; 0x73e <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
     720:	d7 01       	movw	r26, r14
     722:	6d 91       	ld	r22, X+
     724:	7d 01       	movw	r14, r26
     726:	d6 01       	movw	r26, r12
     728:	ed 91       	ld	r30, X+
     72a:	fc 91       	ld	r31, X
     72c:	01 90       	ld	r0, Z+
     72e:	f0 81       	ld	r31, Z
     730:	e0 2d       	mov	r30, r0
     732:	c6 01       	movw	r24, r12
     734:	09 95       	icall
     736:	c8 0f       	add	r28, r24
     738:	d9 1f       	adc	r29, r25
     73a:	01 50       	subi	r16, 0x01	; 1
     73c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     73e:	01 15       	cp	r16, r1
     740:	11 05       	cpc	r17, r1
     742:	71 f7       	brne	.-36     	; 0x720 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     744:	ce 01       	movw	r24, r28
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	08 95       	ret

00000758 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     758:	db 01       	movw	r26, r22
     75a:	0d 90       	ld	r0, X+
     75c:	00 20       	and	r0, r0
     75e:	e9 f7       	brne	.-6      	; 0x75a <_ZN5Print5writeEPKc+0x2>
     760:	ad 01       	movw	r20, r26
     762:	41 50       	subi	r20, 0x01	; 1
     764:	50 40       	sbci	r21, 0x00	; 0
     766:	46 1b       	sub	r20, r22
     768:	57 0b       	sbc	r21, r23
     76a:	dc 01       	movw	r26, r24
     76c:	ed 91       	ld	r30, X+
     76e:	fc 91       	ld	r31, X
     770:	02 80       	ldd	r0, Z+2	; 0x02
     772:	f3 81       	ldd	r31, Z+3	; 0x03
     774:	e0 2d       	mov	r30, r0
     776:	09 95       	icall
     778:	08 95       	ret

0000077a <_ZN5Print5printEPKc>:
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     77a:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN5Print5writeEPKc>
    size_t println(const char[]);
     77e:	08 95       	ret

00000780 <_ZN5Print5printEc>:
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
     780:	dc 01       	movw	r26, r24
     782:	ed 91       	ld	r30, X+
     784:	fc 91       	ld	r31, X
     786:	01 90       	ld	r0, Z+
     788:	f0 81       	ld	r31, Z
     78a:	e0 2d       	mov	r30, r0
     78c:	09 95       	icall
    size_t println(long, int = DEC);
     78e:	08 95       	ret

00000790 <_ZN5Print7printlnEv>:
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	ec 01       	movw	r28, r24
     79a:	6d e0       	ldi	r22, 0x0D	; 13
     79c:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print5printEc>
     7a0:	8c 01       	movw	r16, r24
     7a2:	ce 01       	movw	r24, r28
     7a4:	6a e0       	ldi	r22, 0x0A	; 10
     7a6:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print5printEc>
     7aa:	08 0f       	add	r16, r24
     7ac:	19 1f       	adc	r17, r25
     7ae:	c8 01       	movw	r24, r16
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	08 95       	ret

000007ba <_ZN5Print7printlnEPKc>:
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     7c4:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN5Print5writeEPKc>
     7c8:	8c 01       	movw	r16, r24
     7ca:	ce 01       	movw	r24, r28
     7cc:	0e 94 c8 03 	call	0x790	; 0x790 <_ZN5Print7printlnEv>
     7d0:	08 0f       	add	r16, r24
     7d2:	19 1f       	adc	r17, r25
     7d4:	c8 01       	movw	r24, r16
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <_ZN5Print11printNumberEmh>:
     7e0:	8f 92       	push	r8
     7e2:	9f 92       	push	r9
     7e4:	af 92       	push	r10
     7e6:	bf 92       	push	r11
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	df 93       	push	r29
     7f6:	cf 93       	push	r28
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	a1 97       	sbiw	r28, 0x21	; 33
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	6c 01       	movw	r12, r24
     80a:	04 2f       	mov	r16, r20
     80c:	e5 2f       	mov	r30, r21
     80e:	cb 01       	movw	r24, r22
     810:	12 2f       	mov	r17, r18
     812:	19 a2       	std	Y+33, r1	; 0x21
     814:	22 30       	cpi	r18, 0x02	; 2
     816:	08 f4       	brcc	.+2      	; 0x81a <_ZN5Print11printNumberEmh+0x3a>
     818:	1a e0       	ldi	r17, 0x0A	; 10
     81a:	21 e2       	ldi	r18, 0x21	; 33
     81c:	e2 2e       	mov	r14, r18
     81e:	f1 2c       	mov	r15, r1
     820:	ec 0e       	add	r14, r28
     822:	fd 1e       	adc	r15, r29
     824:	81 2e       	mov	r8, r17
     826:	99 24       	eor	r9, r9
     828:	aa 24       	eor	r10, r10
     82a:	bb 24       	eor	r11, r11
     82c:	03 c0       	rjmp	.+6      	; 0x834 <_ZN5Print11printNumberEmh+0x54>
     82e:	02 2f       	mov	r16, r18
     830:	e3 2f       	mov	r30, r19
     832:	ca 01       	movw	r24, r20
     834:	60 2f       	mov	r22, r16
     836:	7e 2f       	mov	r23, r30
     838:	a5 01       	movw	r20, r10
     83a:	94 01       	movw	r18, r8
     83c:	0e 94 cd 08 	call	0x119a	; 0x119a <__udivmodsi4>
     840:	12 9f       	mul	r17, r18
     842:	80 2d       	mov	r24, r0
     844:	11 24       	eor	r1, r1
     846:	08 1b       	sub	r16, r24
     848:	08 94       	sec
     84a:	e1 08       	sbc	r14, r1
     84c:	f1 08       	sbc	r15, r1
     84e:	0a 30       	cpi	r16, 0x0A	; 10
     850:	14 f4       	brge	.+4      	; 0x856 <_ZN5Print11printNumberEmh+0x76>
     852:	00 5d       	subi	r16, 0xD0	; 208
     854:	01 c0       	rjmp	.+2      	; 0x858 <_ZN5Print11printNumberEmh+0x78>
     856:	09 5c       	subi	r16, 0xC9	; 201
     858:	f7 01       	movw	r30, r14
     85a:	00 83       	st	Z, r16
     85c:	21 15       	cp	r18, r1
     85e:	31 05       	cpc	r19, r1
     860:	41 05       	cpc	r20, r1
     862:	51 05       	cpc	r21, r1
     864:	21 f7       	brne	.-56     	; 0x82e <_ZN5Print11printNumberEmh+0x4e>
     866:	c6 01       	movw	r24, r12
     868:	b7 01       	movw	r22, r14
     86a:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN5Print5writeEPKc>
     86e:	a1 96       	adiw	r28, 0x21	; 33
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	08 95       	ret

00000894 <_ZN5Print5printEmi>:
     894:	21 15       	cp	r18, r1
     896:	31 05       	cpc	r19, r1
     898:	49 f4       	brne	.+18     	; 0x8ac <_ZN5Print5printEmi+0x18>
     89a:	dc 01       	movw	r26, r24
     89c:	ed 91       	ld	r30, X+
     89e:	fc 91       	ld	r31, X
     8a0:	01 90       	ld	r0, Z+
     8a2:	f0 81       	ld	r31, Z
     8a4:	e0 2d       	mov	r30, r0
     8a6:	64 2f       	mov	r22, r20
     8a8:	09 95       	icall
     8aa:	08 95       	ret
     8ac:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN5Print11printNumberEmh>
     8b0:	08 95       	ret

000008b2 <_ZN5Print5printEli>:
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
     8c4:	7a 01       	movw	r14, r20
     8c6:	8b 01       	movw	r16, r22
     8c8:	21 15       	cp	r18, r1
     8ca:	31 05       	cpc	r19, r1
     8cc:	41 f4       	brne	.+16     	; 0x8de <_ZN5Print5printEli+0x2c>
     8ce:	e8 81       	ld	r30, Y
     8d0:	f9 81       	ldd	r31, Y+1	; 0x01
     8d2:	01 90       	ld	r0, Z+
     8d4:	f0 81       	ld	r31, Z
     8d6:	e0 2d       	mov	r30, r0
     8d8:	64 2f       	mov	r22, r20
     8da:	09 95       	icall
     8dc:	1a c0       	rjmp	.+52     	; 0x912 <__stack+0x13>
     8de:	2a 30       	cpi	r18, 0x0A	; 10
     8e0:	31 05       	cpc	r19, r1
     8e2:	a9 f4       	brne	.+42     	; 0x90e <__stack+0xf>
     8e4:	77 ff       	sbrs	r23, 7
     8e6:	12 c0       	rjmp	.+36     	; 0x90c <__stack+0xd>
     8e8:	6d e2       	ldi	r22, 0x2D	; 45
     8ea:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print5printEc>
     8ee:	6c 01       	movw	r12, r24
     8f0:	44 27       	eor	r20, r20
     8f2:	55 27       	eor	r21, r21
     8f4:	ba 01       	movw	r22, r20
     8f6:	4e 19       	sub	r20, r14
     8f8:	5f 09       	sbc	r21, r15
     8fa:	60 0b       	sbc	r22, r16
     8fc:	71 0b       	sbc	r23, r17
     8fe:	ce 01       	movw	r24, r28
     900:	2a e0       	ldi	r18, 0x0A	; 10
     902:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN5Print11printNumberEmh>
     906:	c8 0e       	add	r12, r24
     908:	d9 1e       	adc	r13, r25
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
     90c:	2a e0       	ldi	r18, 0x0A	; 10
     90e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN5Print11printNumberEmh>
     912:	6c 01       	movw	r12, r24
     914:	c6 01       	movw	r24, r12
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	08 95       	ret

00000928 <_ZN5Print5printEii>:
    size_t println(const Printable&);
    size_t println(void);
};

#endif
     928:	9a 01       	movw	r18, r20
     92a:	fb 01       	movw	r30, r22
     92c:	af 01       	movw	r20, r30
     92e:	66 27       	eor	r22, r22
     930:	57 fd       	sbrc	r21, 7
     932:	60 95       	com	r22
     934:	76 2f       	mov	r23, r22
     936:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN5Print5printEli>
     93a:	08 95       	ret

0000093c <_ZN5Print10printFloatEdh>:
     93c:	6f 92       	push	r6
     93e:	7f 92       	push	r7
     940:	9f 92       	push	r9
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	3c 01       	movw	r6, r24
     958:	7a 01       	movw	r14, r20
     95a:	8b 01       	movw	r16, r22
     95c:	c2 2e       	mov	r12, r18
     95e:	cb 01       	movw	r24, r22
     960:	ba 01       	movw	r22, r20
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	a9 01       	movw	r20, r18
     968:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__cmpsf2>
     96c:	87 ff       	sbrs	r24, 7
     96e:	0a c0       	rjmp	.+20     	; 0x984 <_ZN5Print10printFloatEdh+0x48>
     970:	c3 01       	movw	r24, r6
     972:	6d e2       	ldi	r22, 0x2D	; 45
     974:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN5Print5printEc>
     978:	ec 01       	movw	r28, r24
     97a:	17 fb       	bst	r17, 7
     97c:	10 95       	com	r17
     97e:	17 f9       	bld	r17, 7
     980:	10 95       	com	r17
     982:	02 c0       	rjmp	.+4      	; 0x988 <_ZN5Print10printFloatEdh+0x4c>
     984:	c0 e0       	ldi	r28, 0x00	; 0
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	dd 24       	eor	r13, r13
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	2f e3       	ldi	r18, 0x3F	; 63
     992:	11 c0       	rjmp	.+34     	; 0x9b6 <_ZN5Print10printFloatEdh+0x7a>
     994:	da 01       	movw	r26, r20
     996:	f9 01       	movw	r30, r18
     998:	6b 2f       	mov	r22, r27
     99a:	74 2f       	mov	r23, r20
     99c:	8f 2f       	mov	r24, r31
     99e:	92 2f       	mov	r25, r18
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e2       	ldi	r20, 0x20	; 32
     9a6:	51 e4       	ldi	r21, 0x41	; 65
     9a8:	0e 94 ed 06 	call	0xdda	; 0xdda <__divsf3>
     9ac:	56 2f       	mov	r21, r22
     9ae:	47 2f       	mov	r20, r23
     9b0:	38 2f       	mov	r19, r24
     9b2:	29 2f       	mov	r18, r25
     9b4:	d3 94       	inc	r13
     9b6:	dc 14       	cp	r13, r12
     9b8:	68 f3       	brcs	.-38     	; 0x994 <_ZN5Print10printFloatEdh+0x58>
     9ba:	c8 01       	movw	r24, r16
     9bc:	b7 01       	movw	r22, r14
     9be:	da 01       	movw	r26, r20
     9c0:	f9 01       	movw	r30, r18
     9c2:	2b 2f       	mov	r18, r27
     9c4:	34 2f       	mov	r19, r20
     9c6:	4f 2f       	mov	r20, r31
     9c8:	5e 2f       	mov	r21, r30
     9ca:	0e 94 85 06 	call	0xd0a	; 0xd0a <__addsf3>
     9ce:	5b 01       	movw	r10, r22
     9d0:	f8 2e       	mov	r15, r24
     9d2:	99 2e       	mov	r9, r25
     9d4:	7b 2d       	mov	r23, r11
     9d6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__fixunssfsi>
     9da:	16 2f       	mov	r17, r22
     9dc:	d7 2e       	mov	r13, r23
     9de:	e8 2e       	mov	r14, r24
     9e0:	09 2f       	mov	r16, r25
     9e2:	0e 94 86 07 	call	0xf0c	; 0xf0c <__floatunsisf>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	6a 2d       	mov	r22, r10
     9ec:	7b 2d       	mov	r23, r11
     9ee:	8f 2d       	mov	r24, r15
     9f0:	99 2d       	mov	r25, r9
     9f2:	0e 94 84 06 	call	0xd08	; 0xd08 <__subsf3>
     9f6:	96 2e       	mov	r9, r22
     9f8:	a7 2e       	mov	r10, r23
     9fa:	b8 2e       	mov	r11, r24
     9fc:	f9 2e       	mov	r15, r25
     9fe:	c3 01       	movw	r24, r6
     a00:	41 2f       	mov	r20, r17
     a02:	5d 2d       	mov	r21, r13
     a04:	6e 2d       	mov	r22, r14
     a06:	70 2f       	mov	r23, r16
     a08:	2a e0       	ldi	r18, 0x0A	; 10
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN5Print5printEmi>
     a10:	c8 0f       	add	r28, r24
     a12:	d9 1f       	adc	r29, r25
     a14:	cc 20       	and	r12, r12
     a16:	b9 f1       	breq	.+110    	; 0xa86 <_ZN5Print10printFloatEdh+0x14a>
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     a18:	c3 01       	movw	r24, r6
     a1a:	67 e4       	ldi	r22, 0x47	; 71
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN5Print5writeEPKc>
     a22:	c8 0f       	add	r28, r24
     a24:	d9 1f       	adc	r29, r25
     a26:	2f c0       	rjmp	.+94     	; 0xa86 <_ZN5Print10printFloatEdh+0x14a>
     a28:	69 2d       	mov	r22, r9
     a2a:	7a 2d       	mov	r23, r10
     a2c:	8b 2d       	mov	r24, r11
     a2e:	9f 2d       	mov	r25, r15
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e2       	ldi	r20, 0x20	; 32
     a36:	51 e4       	ldi	r21, 0x41	; 65
     a38:	0e 94 38 08 	call	0x1070	; 0x1070 <__mulsf3>
     a3c:	d6 2e       	mov	r13, r22
     a3e:	b7 2e       	mov	r11, r23
     a40:	a8 2e       	mov	r10, r24
     a42:	99 2e       	mov	r9, r25
     a44:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fixsfsi>
    size_t println(void);
};

#endif
     a48:	7b 01       	movw	r14, r22
     a4a:	00 27       	eor	r16, r16
     a4c:	f7 fc       	sbrc	r15, 7
     a4e:	00 95       	com	r16
     a50:	10 2f       	mov	r17, r16
     a52:	c3 01       	movw	r24, r6
     a54:	b8 01       	movw	r22, r16
     a56:	a7 01       	movw	r20, r14
     a58:	2a e0       	ldi	r18, 0x0A	; 10
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN5Print5printEli>
     a60:	c8 0f       	add	r28, r24
     a62:	d9 1f       	adc	r29, r25
     a64:	c8 01       	movw	r24, r16
     a66:	b7 01       	movw	r22, r14
     a68:	0e 94 88 07 	call	0xf10	; 0xf10 <__floatsisf>
     a6c:	9b 01       	movw	r18, r22
     a6e:	ac 01       	movw	r20, r24
     a70:	6d 2d       	mov	r22, r13
     a72:	7b 2d       	mov	r23, r11
     a74:	8a 2d       	mov	r24, r10
     a76:	99 2d       	mov	r25, r9
     a78:	0e 94 84 06 	call	0xd08	; 0xd08 <__subsf3>
     a7c:	96 2e       	mov	r9, r22
     a7e:	a7 2e       	mov	r10, r23
     a80:	b8 2e       	mov	r11, r24
     a82:	f9 2e       	mov	r15, r25
     a84:	ca 94       	dec	r12
     a86:	cc 20       	and	r12, r12
     a88:	79 f6       	brne	.-98     	; 0xa28 <_ZN5Print10printFloatEdh+0xec>
     a8a:	ce 01       	movw	r24, r28
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	af 90       	pop	r10
     aa0:	9f 90       	pop	r9
     aa2:	7f 90       	pop	r7
     aa4:	6f 90       	pop	r6
     aa6:	08 95       	ret

00000aa8 <_ZN5Print5printEdi>:
     aa8:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN5Print10printFloatEdh>
     aac:	08 95       	ret

00000aae <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	29 f0       	breq	.+10     	; 0xabc <_Z10randomSeedj+0xe>
    srandom(seed);
     ab2:	bc 01       	movw	r22, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 a3 0a 	call	0x1546	; 0x1546 <srandom>
     abc:	08 95       	ret

00000abe <_Z6randoml>:
  }
}

long random(long howbig)
{
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	7b 01       	movw	r14, r22
     ac8:	8c 01       	movw	r16, r24
  if (howbig == 0) {
     aca:	61 15       	cp	r22, r1
     acc:	71 05       	cpc	r23, r1
     ace:	81 05       	cpc	r24, r1
     ad0:	91 05       	cpc	r25, r1
     ad2:	49 f0       	breq	.+18     	; 0xae6 <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
     ad4:	0e 94 9e 0a 	call	0x153c	; 0x153c <random>
     ad8:	a8 01       	movw	r20, r16
     ada:	97 01       	movw	r18, r14
     adc:	0e 94 ef 08 	call	0x11de	; 0x11de <__divmodsi4>
     ae0:	9b 01       	movw	r18, r22
     ae2:	ac 01       	movw	r20, r24
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
     aec:	b9 01       	movw	r22, r18
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	08 95       	ret

00000afa <main>:
#include <Arduino.h>

int main(void)
{
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
	init();
     afe:	0e 94 28 06 	call	0xc50	; 0xc50 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     b02:	0e 94 03 01 	call	0x206	; 0x206 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b06:	c7 e7       	ldi	r28, 0x77	; 119
     b08:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     b0a:	0e 94 17 01 	call	0x22e	; 0x22e <loop>
		if (serialEventRun) serialEventRun();
     b0e:	20 97       	sbiw	r28, 0x00	; 0
     b10:	e1 f3       	breq	.-8      	; 0xb0a <main+0x10>
     b12:	0e 94 77 02 	call	0x4ee	; 0x4ee <_Z14serialEventRunv>
     b16:	f9 cf       	rjmp	.-14     	; 0xb0a <main+0x10>

00000b18 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
     b18:	0e 94 24 09 	call	0x1248	; 0x1248 <malloc>
}
     b1c:	08 95       	ret

00000b1e <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
     b1e:	0e 94 be 09 	call	0x137c	; 0x137c <free>
} 
     b22:	08 95       	ret

00000b24 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
     b24:	08 95       	ret

00000b26 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	2f 93       	push	r18
     b32:	3f 93       	push	r19
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     b3c:	80 91 48 02 	lds	r24, 0x0248
     b40:	90 91 49 02 	lds	r25, 0x0249
     b44:	a0 91 4a 02 	lds	r26, 0x024A
     b48:	b0 91 4b 02 	lds	r27, 0x024B
	unsigned char f = timer0_fract;
     b4c:	30 91 4c 02 	lds	r19, 0x024C

	m += MILLIS_INC;
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	a1 1d       	adc	r26, r1
     b54:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     b56:	23 2f       	mov	r18, r19
     b58:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     b5a:	2d 37       	cpi	r18, 0x7D	; 125
     b5c:	20 f0       	brcs	.+8      	; 0xb66 <__vector_16+0x40>
		f -= FRACT_MAX;
     b5e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	a1 1d       	adc	r26, r1
     b64:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     b66:	20 93 4c 02 	sts	0x024C, r18
	timer0_millis = m;
     b6a:	80 93 48 02 	sts	0x0248, r24
     b6e:	90 93 49 02 	sts	0x0249, r25
     b72:	a0 93 4a 02 	sts	0x024A, r26
     b76:	b0 93 4b 02 	sts	0x024B, r27
	timer0_overflow_count++;
     b7a:	80 91 44 02 	lds	r24, 0x0244
     b7e:	90 91 45 02 	lds	r25, 0x0245
     b82:	a0 91 46 02 	lds	r26, 0x0246
     b86:	b0 91 47 02 	lds	r27, 0x0247
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	a1 1d       	adc	r26, r1
     b8e:	b1 1d       	adc	r27, r1
     b90:	80 93 44 02 	sts	0x0244, r24
     b94:	90 93 45 02 	sts	0x0245, r25
     b98:	a0 93 46 02 	sts	0x0246, r26
     b9c:	b0 93 47 02 	sts	0x0247, r27
}
     ba0:	bf 91       	pop	r27
     ba2:	af 91       	pop	r26
     ba4:	9f 91       	pop	r25
     ba6:	8f 91       	pop	r24
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     bb6:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     bb8:	f8 94       	cli
	m = timer0_overflow_count;
     bba:	20 91 44 02 	lds	r18, 0x0244
     bbe:	30 91 45 02 	lds	r19, 0x0245
     bc2:	40 91 46 02 	lds	r20, 0x0246
     bc6:	50 91 47 02 	lds	r21, 0x0247
#if defined(TCNT0)
	t = TCNT0;
     bca:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     bcc:	a8 9b       	sbis	0x15, 0	; 21
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <micros+0x26>
     bd0:	8f 3f       	cpi	r24, 0xFF	; 255
     bd2:	21 f0       	breq	.+8      	; 0xbdc <micros+0x26>
		m++;
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	4f 4f       	sbci	r20, 0xFF	; 255
     bda:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     bdc:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     bde:	54 2f       	mov	r21, r20
     be0:	43 2f       	mov	r20, r19
     be2:	32 2f       	mov	r19, r18
     be4:	22 27       	eor	r18, r18
     be6:	28 0f       	add	r18, r24
     be8:	31 1d       	adc	r19, r1
     bea:	41 1d       	adc	r20, r1
     bec:	51 1d       	adc	r21, r1
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	44 1f       	adc	r20, r20
     bf6:	55 1f       	adc	r21, r21
     bf8:	8a 95       	dec	r24
     bfa:	d1 f7       	brne	.-12     	; 0xbf0 <micros+0x3a>
}
     bfc:	b9 01       	movw	r22, r18
     bfe:	ca 01       	movw	r24, r20
     c00:	08 95       	ret

00000c02 <delay>:

void delay(unsigned long ms)
{
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	7b 01       	movw	r14, r22
     c10:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     c12:	0e 94 db 05 	call	0xbb6	; 0xbb6 <micros>
     c16:	eb 01       	movw	r28, r22

	while (ms > 0) {
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     c1a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <micros>
     c1e:	6c 1b       	sub	r22, r28
     c20:	7d 0b       	sbc	r23, r29
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	68 3e       	cpi	r22, 0xE8	; 232
     c26:	78 07       	cpc	r23, r24
     c28:	38 f0       	brcs	.+14     	; 0xc38 <delay+0x36>
			ms--;
     c2a:	08 94       	sec
     c2c:	e1 08       	sbc	r14, r1
     c2e:	f1 08       	sbc	r15, r1
     c30:	01 09       	sbc	r16, r1
     c32:	11 09       	sbc	r17, r1
			start += 1000;
     c34:	c8 51       	subi	r28, 0x18	; 24
     c36:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     c38:	e1 14       	cp	r14, r1
     c3a:	f1 04       	cpc	r15, r1
     c3c:	01 05       	cpc	r16, r1
     c3e:	11 05       	cpc	r17, r1
     c40:	61 f7       	brne	.-40     	; 0xc1a <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	08 95       	ret

00000c50 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     c50:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     c52:	84 b5       	in	r24, 0x24	; 36
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     c58:	84 b5       	in	r24, 0x24	; 36
     c5a:	81 60       	ori	r24, 0x01	; 1
     c5c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     c5e:	85 b5       	in	r24, 0x25	; 37
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     c64:	85 b5       	in	r24, 0x25	; 37
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     c6a:	ee e6       	ldi	r30, 0x6E	; 110
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     c74:	e1 e8       	ldi	r30, 0x81	; 129
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     c7a:	80 81       	ld	r24, Z
     c7c:	82 60       	ori	r24, 0x02	; 2
     c7e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     c80:	80 81       	ld	r24, Z
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     c86:	e0 e8       	ldi	r30, 0x80	; 128
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	81 60       	ori	r24, 0x01	; 1
     c8e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     c90:	e1 eb       	ldi	r30, 0xB1	; 177
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     c9a:	e0 eb       	ldi	r30, 0xB0	; 176
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	81 60       	ori	r24, 0x01	; 1
     ca2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     ca4:	ea e7       	ldi	r30, 0x7A	; 122
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	84 60       	ori	r24, 0x04	; 4
     cac:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     cae:	80 81       	ld	r24, Z
     cb0:	82 60       	ori	r24, 0x02	; 2
     cb2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     cb4:	80 81       	ld	r24, Z
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     cba:	80 81       	ld	r24, Z
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     cc0:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     cc4:	08 95       	ret

00000cc6 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     cc6:	8e 30       	cpi	r24, 0x0E	; 14
     cc8:	08 f0       	brcs	.+2      	; 0xccc <analogRead+0x6>
     cca:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     ccc:	87 70       	andi	r24, 0x07	; 7
     cce:	90 91 53 01 	lds	r25, 0x0153
     cd2:	92 95       	swap	r25
     cd4:	99 0f       	add	r25, r25
     cd6:	99 0f       	add	r25, r25
     cd8:	90 7c       	andi	r25, 0xC0	; 192
     cda:	98 2b       	or	r25, r24
     cdc:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     ce0:	80 91 7a 00 	lds	r24, 0x007A
     ce4:	80 64       	ori	r24, 0x40	; 64
     ce6:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     cea:	80 91 7a 00 	lds	r24, 0x007A
     cee:	86 fd       	sbrc	r24, 6
     cf0:	fc cf       	rjmp	.-8      	; 0xcea <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     cf2:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     cf6:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     cfa:	93 2f       	mov	r25, r19
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	28 2b       	or	r18, r24
     d02:	39 2b       	or	r19, r25
}
     d04:	c9 01       	movw	r24, r18
     d06:	08 95       	ret

00000d08 <__subsf3>:
     d08:	50 58       	subi	r21, 0x80	; 128

00000d0a <__addsf3>:
     d0a:	bb 27       	eor	r27, r27
     d0c:	aa 27       	eor	r26, r26
     d0e:	0e d0       	rcall	.+28     	; 0xd2c <__addsf3x>
     d10:	75 c1       	rjmp	.+746    	; 0xffc <__fp_round>
     d12:	66 d1       	rcall	.+716    	; 0xfe0 <__fp_pscA>
     d14:	30 f0       	brcs	.+12     	; 0xd22 <__addsf3+0x18>
     d16:	6b d1       	rcall	.+726    	; 0xfee <__fp_pscB>
     d18:	20 f0       	brcs	.+8      	; 0xd22 <__addsf3+0x18>
     d1a:	31 f4       	brne	.+12     	; 0xd28 <__addsf3+0x1e>
     d1c:	9f 3f       	cpi	r25, 0xFF	; 255
     d1e:	11 f4       	brne	.+4      	; 0xd24 <__addsf3+0x1a>
     d20:	1e f4       	brtc	.+6      	; 0xd28 <__addsf3+0x1e>
     d22:	5b c1       	rjmp	.+694    	; 0xfda <__fp_nan>
     d24:	0e f4       	brtc	.+2      	; 0xd28 <__addsf3+0x1e>
     d26:	e0 95       	com	r30
     d28:	e7 fb       	bst	r30, 7
     d2a:	51 c1       	rjmp	.+674    	; 0xfce <__fp_inf>

00000d2c <__addsf3x>:
     d2c:	e9 2f       	mov	r30, r25
     d2e:	77 d1       	rcall	.+750    	; 0x101e <__fp_split3>
     d30:	80 f3       	brcs	.-32     	; 0xd12 <__addsf3+0x8>
     d32:	ba 17       	cp	r27, r26
     d34:	62 07       	cpc	r22, r18
     d36:	73 07       	cpc	r23, r19
     d38:	84 07       	cpc	r24, r20
     d3a:	95 07       	cpc	r25, r21
     d3c:	18 f0       	brcs	.+6      	; 0xd44 <__addsf3x+0x18>
     d3e:	71 f4       	brne	.+28     	; 0xd5c <__addsf3x+0x30>
     d40:	9e f5       	brtc	.+102    	; 0xda8 <__addsf3x+0x7c>
     d42:	8f c1       	rjmp	.+798    	; 0x1062 <__fp_zero>
     d44:	0e f4       	brtc	.+2      	; 0xd48 <__addsf3x+0x1c>
     d46:	e0 95       	com	r30
     d48:	0b 2e       	mov	r0, r27
     d4a:	ba 2f       	mov	r27, r26
     d4c:	a0 2d       	mov	r26, r0
     d4e:	0b 01       	movw	r0, r22
     d50:	b9 01       	movw	r22, r18
     d52:	90 01       	movw	r18, r0
     d54:	0c 01       	movw	r0, r24
     d56:	ca 01       	movw	r24, r20
     d58:	a0 01       	movw	r20, r0
     d5a:	11 24       	eor	r1, r1
     d5c:	ff 27       	eor	r31, r31
     d5e:	59 1b       	sub	r21, r25
     d60:	99 f0       	breq	.+38     	; 0xd88 <__addsf3x+0x5c>
     d62:	59 3f       	cpi	r21, 0xF9	; 249
     d64:	50 f4       	brcc	.+20     	; 0xd7a <__addsf3x+0x4e>
     d66:	50 3e       	cpi	r21, 0xE0	; 224
     d68:	68 f1       	brcs	.+90     	; 0xdc4 <__addsf3x+0x98>
     d6a:	1a 16       	cp	r1, r26
     d6c:	f0 40       	sbci	r31, 0x00	; 0
     d6e:	a2 2f       	mov	r26, r18
     d70:	23 2f       	mov	r18, r19
     d72:	34 2f       	mov	r19, r20
     d74:	44 27       	eor	r20, r20
     d76:	58 5f       	subi	r21, 0xF8	; 248
     d78:	f3 cf       	rjmp	.-26     	; 0xd60 <__addsf3x+0x34>
     d7a:	46 95       	lsr	r20
     d7c:	37 95       	ror	r19
     d7e:	27 95       	ror	r18
     d80:	a7 95       	ror	r26
     d82:	f0 40       	sbci	r31, 0x00	; 0
     d84:	53 95       	inc	r21
     d86:	c9 f7       	brne	.-14     	; 0xd7a <__addsf3x+0x4e>
     d88:	7e f4       	brtc	.+30     	; 0xda8 <__addsf3x+0x7c>
     d8a:	1f 16       	cp	r1, r31
     d8c:	ba 0b       	sbc	r27, r26
     d8e:	62 0b       	sbc	r22, r18
     d90:	73 0b       	sbc	r23, r19
     d92:	84 0b       	sbc	r24, r20
     d94:	ba f0       	brmi	.+46     	; 0xdc4 <__addsf3x+0x98>
     d96:	91 50       	subi	r25, 0x01	; 1
     d98:	a1 f0       	breq	.+40     	; 0xdc2 <__addsf3x+0x96>
     d9a:	ff 0f       	add	r31, r31
     d9c:	bb 1f       	adc	r27, r27
     d9e:	66 1f       	adc	r22, r22
     da0:	77 1f       	adc	r23, r23
     da2:	88 1f       	adc	r24, r24
     da4:	c2 f7       	brpl	.-16     	; 0xd96 <__addsf3x+0x6a>
     da6:	0e c0       	rjmp	.+28     	; 0xdc4 <__addsf3x+0x98>
     da8:	ba 0f       	add	r27, r26
     daa:	62 1f       	adc	r22, r18
     dac:	73 1f       	adc	r23, r19
     dae:	84 1f       	adc	r24, r20
     db0:	48 f4       	brcc	.+18     	; 0xdc4 <__addsf3x+0x98>
     db2:	87 95       	ror	r24
     db4:	77 95       	ror	r23
     db6:	67 95       	ror	r22
     db8:	b7 95       	ror	r27
     dba:	f7 95       	ror	r31
     dbc:	9e 3f       	cpi	r25, 0xFE	; 254
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <__addsf3x+0x96>
     dc0:	b3 cf       	rjmp	.-154    	; 0xd28 <__addsf3+0x1e>
     dc2:	93 95       	inc	r25
     dc4:	88 0f       	add	r24, r24
     dc6:	08 f0       	brcs	.+2      	; 0xdca <__addsf3x+0x9e>
     dc8:	99 27       	eor	r25, r25
     dca:	ee 0f       	add	r30, r30
     dcc:	97 95       	ror	r25
     dce:	87 95       	ror	r24
     dd0:	08 95       	ret

00000dd2 <__cmpsf2>:
     dd2:	d9 d0       	rcall	.+434    	; 0xf86 <__fp_cmp>
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <__cmpsf2+0x6>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	08 95       	ret

00000dda <__divsf3>:
     dda:	0c d0       	rcall	.+24     	; 0xdf4 <__divsf3x>
     ddc:	0f c1       	rjmp	.+542    	; 0xffc <__fp_round>
     dde:	07 d1       	rcall	.+526    	; 0xfee <__fp_pscB>
     de0:	40 f0       	brcs	.+16     	; 0xdf2 <__divsf3+0x18>
     de2:	fe d0       	rcall	.+508    	; 0xfe0 <__fp_pscA>
     de4:	30 f0       	brcs	.+12     	; 0xdf2 <__divsf3+0x18>
     de6:	21 f4       	brne	.+8      	; 0xdf0 <__divsf3+0x16>
     de8:	5f 3f       	cpi	r21, 0xFF	; 255
     dea:	19 f0       	breq	.+6      	; 0xdf2 <__divsf3+0x18>
     dec:	f0 c0       	rjmp	.+480    	; 0xfce <__fp_inf>
     dee:	51 11       	cpse	r21, r1
     df0:	39 c1       	rjmp	.+626    	; 0x1064 <__fp_szero>
     df2:	f3 c0       	rjmp	.+486    	; 0xfda <__fp_nan>

00000df4 <__divsf3x>:
     df4:	14 d1       	rcall	.+552    	; 0x101e <__fp_split3>
     df6:	98 f3       	brcs	.-26     	; 0xdde <__divsf3+0x4>

00000df8 <__divsf3_pse>:
     df8:	99 23       	and	r25, r25
     dfa:	c9 f3       	breq	.-14     	; 0xdee <__divsf3+0x14>
     dfc:	55 23       	and	r21, r21
     dfe:	b1 f3       	breq	.-20     	; 0xdec <__divsf3+0x12>
     e00:	95 1b       	sub	r25, r21
     e02:	55 0b       	sbc	r21, r21
     e04:	bb 27       	eor	r27, r27
     e06:	aa 27       	eor	r26, r26
     e08:	62 17       	cp	r22, r18
     e0a:	73 07       	cpc	r23, r19
     e0c:	84 07       	cpc	r24, r20
     e0e:	38 f0       	brcs	.+14     	; 0xe1e <__divsf3_pse+0x26>
     e10:	9f 5f       	subi	r25, 0xFF	; 255
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	44 1f       	adc	r20, r20
     e1a:	aa 1f       	adc	r26, r26
     e1c:	a9 f3       	breq	.-22     	; 0xe08 <__divsf3_pse+0x10>
     e1e:	33 d0       	rcall	.+102    	; 0xe86 <__divsf3_pse+0x8e>
     e20:	0e 2e       	mov	r0, r30
     e22:	3a f0       	brmi	.+14     	; 0xe32 <__divsf3_pse+0x3a>
     e24:	e0 e8       	ldi	r30, 0x80	; 128
     e26:	30 d0       	rcall	.+96     	; 0xe88 <__divsf3_pse+0x90>
     e28:	91 50       	subi	r25, 0x01	; 1
     e2a:	50 40       	sbci	r21, 0x00	; 0
     e2c:	e6 95       	lsr	r30
     e2e:	00 1c       	adc	r0, r0
     e30:	ca f7       	brpl	.-14     	; 0xe24 <__divsf3_pse+0x2c>
     e32:	29 d0       	rcall	.+82     	; 0xe86 <__divsf3_pse+0x8e>
     e34:	fe 2f       	mov	r31, r30
     e36:	27 d0       	rcall	.+78     	; 0xe86 <__divsf3_pse+0x8e>
     e38:	66 0f       	add	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	bb 1f       	adc	r27, r27
     e40:	26 17       	cp	r18, r22
     e42:	37 07       	cpc	r19, r23
     e44:	48 07       	cpc	r20, r24
     e46:	ab 07       	cpc	r26, r27
     e48:	b0 e8       	ldi	r27, 0x80	; 128
     e4a:	09 f0       	breq	.+2      	; 0xe4e <__divsf3_pse+0x56>
     e4c:	bb 0b       	sbc	r27, r27
     e4e:	80 2d       	mov	r24, r0
     e50:	bf 01       	movw	r22, r30
     e52:	ff 27       	eor	r31, r31
     e54:	93 58       	subi	r25, 0x83	; 131
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	2a f0       	brmi	.+10     	; 0xe64 <__divsf3_pse+0x6c>
     e5a:	9e 3f       	cpi	r25, 0xFE	; 254
     e5c:	51 05       	cpc	r21, r1
     e5e:	68 f0       	brcs	.+26     	; 0xe7a <__divsf3_pse+0x82>
     e60:	b6 c0       	rjmp	.+364    	; 0xfce <__fp_inf>
     e62:	00 c1       	rjmp	.+512    	; 0x1064 <__fp_szero>
     e64:	5f 3f       	cpi	r21, 0xFF	; 255
     e66:	ec f3       	brlt	.-6      	; 0xe62 <__divsf3_pse+0x6a>
     e68:	98 3e       	cpi	r25, 0xE8	; 232
     e6a:	dc f3       	brlt	.-10     	; 0xe62 <__divsf3_pse+0x6a>
     e6c:	86 95       	lsr	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b7 95       	ror	r27
     e74:	f7 95       	ror	r31
     e76:	9f 5f       	subi	r25, 0xFF	; 255
     e78:	c9 f7       	brne	.-14     	; 0xe6c <__divsf3_pse+0x74>
     e7a:	88 0f       	add	r24, r24
     e7c:	91 1d       	adc	r25, r1
     e7e:	96 95       	lsr	r25
     e80:	87 95       	ror	r24
     e82:	97 f9       	bld	r25, 7
     e84:	08 95       	ret
     e86:	e1 e0       	ldi	r30, 0x01	; 1
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	88 1f       	adc	r24, r24
     e8e:	bb 1f       	adc	r27, r27
     e90:	62 17       	cp	r22, r18
     e92:	73 07       	cpc	r23, r19
     e94:	84 07       	cpc	r24, r20
     e96:	ba 07       	cpc	r27, r26
     e98:	20 f0       	brcs	.+8      	; 0xea2 <__divsf3_pse+0xaa>
     e9a:	62 1b       	sub	r22, r18
     e9c:	73 0b       	sbc	r23, r19
     e9e:	84 0b       	sbc	r24, r20
     ea0:	ba 0b       	sbc	r27, r26
     ea2:	ee 1f       	adc	r30, r30
     ea4:	88 f7       	brcc	.-30     	; 0xe88 <__divsf3_pse+0x90>
     ea6:	e0 95       	com	r30
     ea8:	08 95       	ret

00000eaa <__fixsfsi>:
     eaa:	04 d0       	rcall	.+8      	; 0xeb4 <__fixunssfsi>
     eac:	68 94       	set
     eae:	b1 11       	cpse	r27, r1
     eb0:	d9 c0       	rjmp	.+434    	; 0x1064 <__fp_szero>
     eb2:	08 95       	ret

00000eb4 <__fixunssfsi>:
     eb4:	bc d0       	rcall	.+376    	; 0x102e <__fp_splitA>
     eb6:	88 f0       	brcs	.+34     	; 0xeda <__fixunssfsi+0x26>
     eb8:	9f 57       	subi	r25, 0x7F	; 127
     eba:	90 f0       	brcs	.+36     	; 0xee0 <__fixunssfsi+0x2c>
     ebc:	b9 2f       	mov	r27, r25
     ebe:	99 27       	eor	r25, r25
     ec0:	b7 51       	subi	r27, 0x17	; 23
     ec2:	a0 f0       	brcs	.+40     	; 0xeec <__fixunssfsi+0x38>
     ec4:	d1 f0       	breq	.+52     	; 0xefa <__fixunssfsi+0x46>
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	88 1f       	adc	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	1a f0       	brmi	.+6      	; 0xed6 <__fixunssfsi+0x22>
     ed0:	ba 95       	dec	r27
     ed2:	c9 f7       	brne	.-14     	; 0xec6 <__fixunssfsi+0x12>
     ed4:	12 c0       	rjmp	.+36     	; 0xefa <__fixunssfsi+0x46>
     ed6:	b1 30       	cpi	r27, 0x01	; 1
     ed8:	81 f0       	breq	.+32     	; 0xefa <__fixunssfsi+0x46>
     eda:	c3 d0       	rcall	.+390    	; 0x1062 <__fp_zero>
     edc:	b1 e0       	ldi	r27, 0x01	; 1
     ede:	08 95       	ret
     ee0:	c0 c0       	rjmp	.+384    	; 0x1062 <__fp_zero>
     ee2:	67 2f       	mov	r22, r23
     ee4:	78 2f       	mov	r23, r24
     ee6:	88 27       	eor	r24, r24
     ee8:	b8 5f       	subi	r27, 0xF8	; 248
     eea:	39 f0       	breq	.+14     	; 0xefa <__fixunssfsi+0x46>
     eec:	b9 3f       	cpi	r27, 0xF9	; 249
     eee:	cc f3       	brlt	.-14     	; 0xee2 <__fixunssfsi+0x2e>
     ef0:	86 95       	lsr	r24
     ef2:	77 95       	ror	r23
     ef4:	67 95       	ror	r22
     ef6:	b3 95       	inc	r27
     ef8:	d9 f7       	brne	.-10     	; 0xef0 <__fixunssfsi+0x3c>
     efa:	3e f4       	brtc	.+14     	; 0xf0a <__fixunssfsi+0x56>
     efc:	90 95       	com	r25
     efe:	80 95       	com	r24
     f00:	70 95       	com	r23
     f02:	61 95       	neg	r22
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	8f 4f       	sbci	r24, 0xFF	; 255
     f08:	9f 4f       	sbci	r25, 0xFF	; 255
     f0a:	08 95       	ret

00000f0c <__floatunsisf>:
     f0c:	e8 94       	clt
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <__floatsisf+0x12>

00000f10 <__floatsisf>:
     f10:	97 fb       	bst	r25, 7
     f12:	3e f4       	brtc	.+14     	; 0xf22 <__floatsisf+0x12>
     f14:	90 95       	com	r25
     f16:	80 95       	com	r24
     f18:	70 95       	com	r23
     f1a:	61 95       	neg	r22
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	99 23       	and	r25, r25
     f24:	a9 f0       	breq	.+42     	; 0xf50 <__floatsisf+0x40>
     f26:	f9 2f       	mov	r31, r25
     f28:	96 e9       	ldi	r25, 0x96	; 150
     f2a:	bb 27       	eor	r27, r27
     f2c:	93 95       	inc	r25
     f2e:	f6 95       	lsr	r31
     f30:	87 95       	ror	r24
     f32:	77 95       	ror	r23
     f34:	67 95       	ror	r22
     f36:	b7 95       	ror	r27
     f38:	f1 11       	cpse	r31, r1
     f3a:	f8 cf       	rjmp	.-16     	; 0xf2c <__floatsisf+0x1c>
     f3c:	fa f4       	brpl	.+62     	; 0xf7c <__floatsisf+0x6c>
     f3e:	bb 0f       	add	r27, r27
     f40:	11 f4       	brne	.+4      	; 0xf46 <__floatsisf+0x36>
     f42:	60 ff       	sbrs	r22, 0
     f44:	1b c0       	rjmp	.+54     	; 0xf7c <__floatsisf+0x6c>
     f46:	6f 5f       	subi	r22, 0xFF	; 255
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	16 c0       	rjmp	.+44     	; 0xf7c <__floatsisf+0x6c>
     f50:	88 23       	and	r24, r24
     f52:	11 f0       	breq	.+4      	; 0xf58 <__floatsisf+0x48>
     f54:	96 e9       	ldi	r25, 0x96	; 150
     f56:	11 c0       	rjmp	.+34     	; 0xf7a <__floatsisf+0x6a>
     f58:	77 23       	and	r23, r23
     f5a:	21 f0       	breq	.+8      	; 0xf64 <__floatsisf+0x54>
     f5c:	9e e8       	ldi	r25, 0x8E	; 142
     f5e:	87 2f       	mov	r24, r23
     f60:	76 2f       	mov	r23, r22
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <__floatsisf+0x5e>
     f64:	66 23       	and	r22, r22
     f66:	71 f0       	breq	.+28     	; 0xf84 <__floatsisf+0x74>
     f68:	96 e8       	ldi	r25, 0x86	; 134
     f6a:	86 2f       	mov	r24, r22
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	2a f0       	brmi	.+10     	; 0xf7c <__floatsisf+0x6c>
     f72:	9a 95       	dec	r25
     f74:	66 0f       	add	r22, r22
     f76:	77 1f       	adc	r23, r23
     f78:	88 1f       	adc	r24, r24
     f7a:	da f7       	brpl	.-10     	; 0xf72 <__floatsisf+0x62>
     f7c:	88 0f       	add	r24, r24
     f7e:	96 95       	lsr	r25
     f80:	87 95       	ror	r24
     f82:	97 f9       	bld	r25, 7
     f84:	08 95       	ret

00000f86 <__fp_cmp>:
     f86:	99 0f       	add	r25, r25
     f88:	00 08       	sbc	r0, r0
     f8a:	55 0f       	add	r21, r21
     f8c:	aa 0b       	sbc	r26, r26
     f8e:	e0 e8       	ldi	r30, 0x80	; 128
     f90:	fe ef       	ldi	r31, 0xFE	; 254
     f92:	16 16       	cp	r1, r22
     f94:	17 06       	cpc	r1, r23
     f96:	e8 07       	cpc	r30, r24
     f98:	f9 07       	cpc	r31, r25
     f9a:	c0 f0       	brcs	.+48     	; 0xfcc <__fp_cmp+0x46>
     f9c:	12 16       	cp	r1, r18
     f9e:	13 06       	cpc	r1, r19
     fa0:	e4 07       	cpc	r30, r20
     fa2:	f5 07       	cpc	r31, r21
     fa4:	98 f0       	brcs	.+38     	; 0xfcc <__fp_cmp+0x46>
     fa6:	62 1b       	sub	r22, r18
     fa8:	73 0b       	sbc	r23, r19
     faa:	84 0b       	sbc	r24, r20
     fac:	95 0b       	sbc	r25, r21
     fae:	39 f4       	brne	.+14     	; 0xfbe <__fp_cmp+0x38>
     fb0:	0a 26       	eor	r0, r26
     fb2:	61 f0       	breq	.+24     	; 0xfcc <__fp_cmp+0x46>
     fb4:	23 2b       	or	r18, r19
     fb6:	24 2b       	or	r18, r20
     fb8:	25 2b       	or	r18, r21
     fba:	21 f4       	brne	.+8      	; 0xfc4 <__fp_cmp+0x3e>
     fbc:	08 95       	ret
     fbe:	0a 26       	eor	r0, r26
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <__fp_cmp+0x3e>
     fc2:	a1 40       	sbci	r26, 0x01	; 1
     fc4:	a6 95       	lsr	r26
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	81 1d       	adc	r24, r1
     fca:	81 1d       	adc	r24, r1
     fcc:	08 95       	ret

00000fce <__fp_inf>:
     fce:	97 f9       	bld	r25, 7
     fd0:	9f 67       	ori	r25, 0x7F	; 127
     fd2:	80 e8       	ldi	r24, 0x80	; 128
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	08 95       	ret

00000fda <__fp_nan>:
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	80 ec       	ldi	r24, 0xC0	; 192
     fde:	08 95       	ret

00000fe0 <__fp_pscA>:
     fe0:	00 24       	eor	r0, r0
     fe2:	0a 94       	dec	r0
     fe4:	16 16       	cp	r1, r22
     fe6:	17 06       	cpc	r1, r23
     fe8:	18 06       	cpc	r1, r24
     fea:	09 06       	cpc	r0, r25
     fec:	08 95       	ret

00000fee <__fp_pscB>:
     fee:	00 24       	eor	r0, r0
     ff0:	0a 94       	dec	r0
     ff2:	12 16       	cp	r1, r18
     ff4:	13 06       	cpc	r1, r19
     ff6:	14 06       	cpc	r1, r20
     ff8:	05 06       	cpc	r0, r21
     ffa:	08 95       	ret

00000ffc <__fp_round>:
     ffc:	09 2e       	mov	r0, r25
     ffe:	03 94       	inc	r0
    1000:	00 0c       	add	r0, r0
    1002:	11 f4       	brne	.+4      	; 0x1008 <__fp_round+0xc>
    1004:	88 23       	and	r24, r24
    1006:	52 f0       	brmi	.+20     	; 0x101c <__fp_round+0x20>
    1008:	bb 0f       	add	r27, r27
    100a:	40 f4       	brcc	.+16     	; 0x101c <__fp_round+0x20>
    100c:	bf 2b       	or	r27, r31
    100e:	11 f4       	brne	.+4      	; 0x1014 <__fp_round+0x18>
    1010:	60 ff       	sbrs	r22, 0
    1012:	04 c0       	rjmp	.+8      	; 0x101c <__fp_round+0x20>
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8f 4f       	sbci	r24, 0xFF	; 255
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	08 95       	ret

0000101e <__fp_split3>:
    101e:	57 fd       	sbrc	r21, 7
    1020:	90 58       	subi	r25, 0x80	; 128
    1022:	44 0f       	add	r20, r20
    1024:	55 1f       	adc	r21, r21
    1026:	59 f0       	breq	.+22     	; 0x103e <__fp_splitA+0x10>
    1028:	5f 3f       	cpi	r21, 0xFF	; 255
    102a:	71 f0       	breq	.+28     	; 0x1048 <__fp_splitA+0x1a>
    102c:	47 95       	ror	r20

0000102e <__fp_splitA>:
    102e:	88 0f       	add	r24, r24
    1030:	97 fb       	bst	r25, 7
    1032:	99 1f       	adc	r25, r25
    1034:	61 f0       	breq	.+24     	; 0x104e <__fp_splitA+0x20>
    1036:	9f 3f       	cpi	r25, 0xFF	; 255
    1038:	79 f0       	breq	.+30     	; 0x1058 <__fp_splitA+0x2a>
    103a:	87 95       	ror	r24
    103c:	08 95       	ret
    103e:	12 16       	cp	r1, r18
    1040:	13 06       	cpc	r1, r19
    1042:	14 06       	cpc	r1, r20
    1044:	55 1f       	adc	r21, r21
    1046:	f2 cf       	rjmp	.-28     	; 0x102c <__fp_split3+0xe>
    1048:	46 95       	lsr	r20
    104a:	f1 df       	rcall	.-30     	; 0x102e <__fp_splitA>
    104c:	08 c0       	rjmp	.+16     	; 0x105e <__fp_splitA+0x30>
    104e:	16 16       	cp	r1, r22
    1050:	17 06       	cpc	r1, r23
    1052:	18 06       	cpc	r1, r24
    1054:	99 1f       	adc	r25, r25
    1056:	f1 cf       	rjmp	.-30     	; 0x103a <__fp_splitA+0xc>
    1058:	86 95       	lsr	r24
    105a:	71 05       	cpc	r23, r1
    105c:	61 05       	cpc	r22, r1
    105e:	08 94       	sec
    1060:	08 95       	ret

00001062 <__fp_zero>:
    1062:	e8 94       	clt

00001064 <__fp_szero>:
    1064:	bb 27       	eor	r27, r27
    1066:	66 27       	eor	r22, r22
    1068:	77 27       	eor	r23, r23
    106a:	cb 01       	movw	r24, r22
    106c:	97 f9       	bld	r25, 7
    106e:	08 95       	ret

00001070 <__mulsf3>:
    1070:	0b d0       	rcall	.+22     	; 0x1088 <__mulsf3x>
    1072:	c4 cf       	rjmp	.-120    	; 0xffc <__fp_round>
    1074:	b5 df       	rcall	.-150    	; 0xfe0 <__fp_pscA>
    1076:	28 f0       	brcs	.+10     	; 0x1082 <__mulsf3+0x12>
    1078:	ba df       	rcall	.-140    	; 0xfee <__fp_pscB>
    107a:	18 f0       	brcs	.+6      	; 0x1082 <__mulsf3+0x12>
    107c:	95 23       	and	r25, r21
    107e:	09 f0       	breq	.+2      	; 0x1082 <__mulsf3+0x12>
    1080:	a6 cf       	rjmp	.-180    	; 0xfce <__fp_inf>
    1082:	ab cf       	rjmp	.-170    	; 0xfda <__fp_nan>
    1084:	11 24       	eor	r1, r1
    1086:	ee cf       	rjmp	.-36     	; 0x1064 <__fp_szero>

00001088 <__mulsf3x>:
    1088:	ca df       	rcall	.-108    	; 0x101e <__fp_split3>
    108a:	a0 f3       	brcs	.-24     	; 0x1074 <__mulsf3+0x4>

0000108c <__mulsf3_pse>:
    108c:	95 9f       	mul	r25, r21
    108e:	d1 f3       	breq	.-12     	; 0x1084 <__mulsf3+0x14>
    1090:	95 0f       	add	r25, r21
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	55 1f       	adc	r21, r21
    1096:	62 9f       	mul	r22, r18
    1098:	f0 01       	movw	r30, r0
    109a:	72 9f       	mul	r23, r18
    109c:	bb 27       	eor	r27, r27
    109e:	f0 0d       	add	r31, r0
    10a0:	b1 1d       	adc	r27, r1
    10a2:	63 9f       	mul	r22, r19
    10a4:	aa 27       	eor	r26, r26
    10a6:	f0 0d       	add	r31, r0
    10a8:	b1 1d       	adc	r27, r1
    10aa:	aa 1f       	adc	r26, r26
    10ac:	64 9f       	mul	r22, r20
    10ae:	66 27       	eor	r22, r22
    10b0:	b0 0d       	add	r27, r0
    10b2:	a1 1d       	adc	r26, r1
    10b4:	66 1f       	adc	r22, r22
    10b6:	82 9f       	mul	r24, r18
    10b8:	22 27       	eor	r18, r18
    10ba:	b0 0d       	add	r27, r0
    10bc:	a1 1d       	adc	r26, r1
    10be:	62 1f       	adc	r22, r18
    10c0:	73 9f       	mul	r23, r19
    10c2:	b0 0d       	add	r27, r0
    10c4:	a1 1d       	adc	r26, r1
    10c6:	62 1f       	adc	r22, r18
    10c8:	83 9f       	mul	r24, r19
    10ca:	a0 0d       	add	r26, r0
    10cc:	61 1d       	adc	r22, r1
    10ce:	22 1f       	adc	r18, r18
    10d0:	74 9f       	mul	r23, r20
    10d2:	33 27       	eor	r19, r19
    10d4:	a0 0d       	add	r26, r0
    10d6:	61 1d       	adc	r22, r1
    10d8:	23 1f       	adc	r18, r19
    10da:	84 9f       	mul	r24, r20
    10dc:	60 0d       	add	r22, r0
    10de:	21 1d       	adc	r18, r1
    10e0:	82 2f       	mov	r24, r18
    10e2:	76 2f       	mov	r23, r22
    10e4:	6a 2f       	mov	r22, r26
    10e6:	11 24       	eor	r1, r1
    10e8:	9f 57       	subi	r25, 0x7F	; 127
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	8a f0       	brmi	.+34     	; 0x1110 <__mulsf3_pse+0x84>
    10ee:	e1 f0       	breq	.+56     	; 0x1128 <__mulsf3_pse+0x9c>
    10f0:	88 23       	and	r24, r24
    10f2:	4a f0       	brmi	.+18     	; 0x1106 <__mulsf3_pse+0x7a>
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	bb 1f       	adc	r27, r27
    10fa:	66 1f       	adc	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	88 1f       	adc	r24, r24
    1100:	91 50       	subi	r25, 0x01	; 1
    1102:	50 40       	sbci	r21, 0x00	; 0
    1104:	a9 f7       	brne	.-22     	; 0x10f0 <__mulsf3_pse+0x64>
    1106:	9e 3f       	cpi	r25, 0xFE	; 254
    1108:	51 05       	cpc	r21, r1
    110a:	70 f0       	brcs	.+28     	; 0x1128 <__mulsf3_pse+0x9c>
    110c:	60 cf       	rjmp	.-320    	; 0xfce <__fp_inf>
    110e:	aa cf       	rjmp	.-172    	; 0x1064 <__fp_szero>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	ec f3       	brlt	.-6      	; 0x110e <__mulsf3_pse+0x82>
    1114:	98 3e       	cpi	r25, 0xE8	; 232
    1116:	dc f3       	brlt	.-10     	; 0x110e <__mulsf3_pse+0x82>
    1118:	86 95       	lsr	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b7 95       	ror	r27
    1120:	f7 95       	ror	r31
    1122:	e7 95       	ror	r30
    1124:	9f 5f       	subi	r25, 0xFF	; 255
    1126:	c1 f7       	brne	.-16     	; 0x1118 <__mulsf3_pse+0x8c>
    1128:	fe 2b       	or	r31, r30
    112a:	88 0f       	add	r24, r24
    112c:	91 1d       	adc	r25, r1
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret

00001136 <__mulsi3>:
    1136:	62 9f       	mul	r22, r18
    1138:	d0 01       	movw	r26, r0
    113a:	73 9f       	mul	r23, r19
    113c:	f0 01       	movw	r30, r0
    113e:	82 9f       	mul	r24, r18
    1140:	e0 0d       	add	r30, r0
    1142:	f1 1d       	adc	r31, r1
    1144:	64 9f       	mul	r22, r20
    1146:	e0 0d       	add	r30, r0
    1148:	f1 1d       	adc	r31, r1
    114a:	92 9f       	mul	r25, r18
    114c:	f0 0d       	add	r31, r0
    114e:	83 9f       	mul	r24, r19
    1150:	f0 0d       	add	r31, r0
    1152:	74 9f       	mul	r23, r20
    1154:	f0 0d       	add	r31, r0
    1156:	65 9f       	mul	r22, r21
    1158:	f0 0d       	add	r31, r0
    115a:	99 27       	eor	r25, r25
    115c:	72 9f       	mul	r23, r18
    115e:	b0 0d       	add	r27, r0
    1160:	e1 1d       	adc	r30, r1
    1162:	f9 1f       	adc	r31, r25
    1164:	63 9f       	mul	r22, r19
    1166:	b0 0d       	add	r27, r0
    1168:	e1 1d       	adc	r30, r1
    116a:	f9 1f       	adc	r31, r25
    116c:	bd 01       	movw	r22, r26
    116e:	cf 01       	movw	r24, r30
    1170:	11 24       	eor	r1, r1
    1172:	08 95       	ret

00001174 <__divmodhi4>:
    1174:	97 fb       	bst	r25, 7
    1176:	09 2e       	mov	r0, r25
    1178:	07 26       	eor	r0, r23
    117a:	0a d0       	rcall	.+20     	; 0x1190 <__divmodhi4_neg1>
    117c:	77 fd       	sbrc	r23, 7
    117e:	04 d0       	rcall	.+8      	; 0x1188 <__divmodhi4_neg2>
    1180:	49 d0       	rcall	.+146    	; 0x1214 <__udivmodhi4>
    1182:	06 d0       	rcall	.+12     	; 0x1190 <__divmodhi4_neg1>
    1184:	00 20       	and	r0, r0
    1186:	1a f4       	brpl	.+6      	; 0x118e <__divmodhi4_exit>

00001188 <__divmodhi4_neg2>:
    1188:	70 95       	com	r23
    118a:	61 95       	neg	r22
    118c:	7f 4f       	sbci	r23, 0xFF	; 255

0000118e <__divmodhi4_exit>:
    118e:	08 95       	ret

00001190 <__divmodhi4_neg1>:
    1190:	f6 f7       	brtc	.-4      	; 0x118e <__divmodhi4_exit>
    1192:	90 95       	com	r25
    1194:	81 95       	neg	r24
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	08 95       	ret

0000119a <__udivmodsi4>:
    119a:	a1 e2       	ldi	r26, 0x21	; 33
    119c:	1a 2e       	mov	r1, r26
    119e:	aa 1b       	sub	r26, r26
    11a0:	bb 1b       	sub	r27, r27
    11a2:	fd 01       	movw	r30, r26
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <__udivmodsi4_ep>

000011a6 <__udivmodsi4_loop>:
    11a6:	aa 1f       	adc	r26, r26
    11a8:	bb 1f       	adc	r27, r27
    11aa:	ee 1f       	adc	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	a2 17       	cp	r26, r18
    11b0:	b3 07       	cpc	r27, r19
    11b2:	e4 07       	cpc	r30, r20
    11b4:	f5 07       	cpc	r31, r21
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__udivmodsi4_ep>
    11b8:	a2 1b       	sub	r26, r18
    11ba:	b3 0b       	sbc	r27, r19
    11bc:	e4 0b       	sbc	r30, r20
    11be:	f5 0b       	sbc	r31, r21

000011c0 <__udivmodsi4_ep>:
    11c0:	66 1f       	adc	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	1a 94       	dec	r1
    11ca:	69 f7       	brne	.-38     	; 0x11a6 <__udivmodsi4_loop>
    11cc:	60 95       	com	r22
    11ce:	70 95       	com	r23
    11d0:	80 95       	com	r24
    11d2:	90 95       	com	r25
    11d4:	9b 01       	movw	r18, r22
    11d6:	ac 01       	movw	r20, r24
    11d8:	bd 01       	movw	r22, r26
    11da:	cf 01       	movw	r24, r30
    11dc:	08 95       	ret

000011de <__divmodsi4>:
    11de:	97 fb       	bst	r25, 7
    11e0:	09 2e       	mov	r0, r25
    11e2:	05 26       	eor	r0, r21
    11e4:	0e d0       	rcall	.+28     	; 0x1202 <__divmodsi4_neg1>
    11e6:	57 fd       	sbrc	r21, 7
    11e8:	04 d0       	rcall	.+8      	; 0x11f2 <__divmodsi4_neg2>
    11ea:	d7 df       	rcall	.-82     	; 0x119a <__udivmodsi4>
    11ec:	0a d0       	rcall	.+20     	; 0x1202 <__divmodsi4_neg1>
    11ee:	00 1c       	adc	r0, r0
    11f0:	38 f4       	brcc	.+14     	; 0x1200 <__divmodsi4_exit>

000011f2 <__divmodsi4_neg2>:
    11f2:	50 95       	com	r21
    11f4:	40 95       	com	r20
    11f6:	30 95       	com	r19
    11f8:	21 95       	neg	r18
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	4f 4f       	sbci	r20, 0xFF	; 255
    11fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001200 <__divmodsi4_exit>:
    1200:	08 95       	ret

00001202 <__divmodsi4_neg1>:
    1202:	f6 f7       	brtc	.-4      	; 0x1200 <__divmodsi4_exit>
    1204:	90 95       	com	r25
    1206:	80 95       	com	r24
    1208:	70 95       	com	r23
    120a:	61 95       	neg	r22
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	8f 4f       	sbci	r24, 0xFF	; 255
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	08 95       	ret

00001214 <__udivmodhi4>:
    1214:	aa 1b       	sub	r26, r26
    1216:	bb 1b       	sub	r27, r27
    1218:	51 e1       	ldi	r21, 0x11	; 17
    121a:	07 c0       	rjmp	.+14     	; 0x122a <__udivmodhi4_ep>

0000121c <__udivmodhi4_loop>:
    121c:	aa 1f       	adc	r26, r26
    121e:	bb 1f       	adc	r27, r27
    1220:	a6 17       	cp	r26, r22
    1222:	b7 07       	cpc	r27, r23
    1224:	10 f0       	brcs	.+4      	; 0x122a <__udivmodhi4_ep>
    1226:	a6 1b       	sub	r26, r22
    1228:	b7 0b       	sbc	r27, r23

0000122a <__udivmodhi4_ep>:
    122a:	88 1f       	adc	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	5a 95       	dec	r21
    1230:	a9 f7       	brne	.-22     	; 0x121c <__udivmodhi4_loop>
    1232:	80 95       	com	r24
    1234:	90 95       	com	r25
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	08 95       	ret

0000123c <__tablejump2__>:
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31

00001240 <__tablejump__>:
    1240:	05 90       	lpm	r0, Z+
    1242:	f4 91       	lpm	r31, Z+
    1244:	e0 2d       	mov	r30, r0
    1246:	09 94       	ijmp

00001248 <malloc>:
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	91 05       	cpc	r25, r1
    1250:	10 f4       	brcc	.+4      	; 0x1256 <malloc+0xe>
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	e0 91 4f 02 	lds	r30, 0x024F
    125a:	f0 91 50 02 	lds	r31, 0x0250
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	26 c0       	rjmp	.+76     	; 0x12b4 <malloc+0x6c>
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	68 17       	cp	r22, r24
    126e:	79 07       	cpc	r23, r25
    1270:	e0 f0       	brcs	.+56     	; 0x12aa <malloc+0x62>
    1272:	68 17       	cp	r22, r24
    1274:	79 07       	cpc	r23, r25
    1276:	81 f4       	brne	.+32     	; 0x1298 <malloc+0x50>
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	21 15       	cp	r18, r1
    127e:	31 05       	cpc	r19, r1
    1280:	31 f0       	breq	.+12     	; 0x128e <malloc+0x46>
    1282:	d9 01       	movw	r26, r18
    1284:	13 96       	adiw	r26, 0x03	; 3
    1286:	9c 93       	st	X, r25
    1288:	8e 93       	st	-X, r24
    128a:	12 97       	sbiw	r26, 0x02	; 2
    128c:	2b c0       	rjmp	.+86     	; 0x12e4 <malloc+0x9c>
    128e:	90 93 50 02 	sts	0x0250, r25
    1292:	80 93 4f 02 	sts	0x024F, r24
    1296:	26 c0       	rjmp	.+76     	; 0x12e4 <malloc+0x9c>
    1298:	41 15       	cp	r20, r1
    129a:	51 05       	cpc	r21, r1
    129c:	19 f0       	breq	.+6      	; 0x12a4 <malloc+0x5c>
    129e:	64 17       	cp	r22, r20
    12a0:	75 07       	cpc	r23, r21
    12a2:	18 f4       	brcc	.+6      	; 0x12aa <malloc+0x62>
    12a4:	ab 01       	movw	r20, r22
    12a6:	e9 01       	movw	r28, r18
    12a8:	df 01       	movw	r26, r30
    12aa:	9f 01       	movw	r18, r30
    12ac:	72 81       	ldd	r23, Z+2	; 0x02
    12ae:	63 81       	ldd	r22, Z+3	; 0x03
    12b0:	e7 2f       	mov	r30, r23
    12b2:	f6 2f       	mov	r31, r22
    12b4:	30 97       	sbiw	r30, 0x00	; 0
    12b6:	c1 f6       	brne	.-80     	; 0x1268 <malloc+0x20>
    12b8:	41 15       	cp	r20, r1
    12ba:	51 05       	cpc	r21, r1
    12bc:	01 f1       	breq	.+64     	; 0x12fe <malloc+0xb6>
    12be:	48 1b       	sub	r20, r24
    12c0:	59 0b       	sbc	r21, r25
    12c2:	44 30       	cpi	r20, 0x04	; 4
    12c4:	51 05       	cpc	r21, r1
    12c6:	80 f4       	brcc	.+32     	; 0x12e8 <malloc+0xa0>
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	8d 91       	ld	r24, X+
    12cc:	9c 91       	ld	r25, X
    12ce:	13 97       	sbiw	r26, 0x03	; 3
    12d0:	20 97       	sbiw	r28, 0x00	; 0
    12d2:	19 f0       	breq	.+6      	; 0x12da <malloc+0x92>
    12d4:	9b 83       	std	Y+3, r25	; 0x03
    12d6:	8a 83       	std	Y+2, r24	; 0x02
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <malloc+0x9a>
    12da:	90 93 50 02 	sts	0x0250, r25
    12de:	80 93 4f 02 	sts	0x024F, r24
    12e2:	fd 01       	movw	r30, r26
    12e4:	32 96       	adiw	r30, 0x02	; 2
    12e6:	46 c0       	rjmp	.+140    	; 0x1374 <malloc+0x12c>
    12e8:	fd 01       	movw	r30, r26
    12ea:	e4 0f       	add	r30, r20
    12ec:	f5 1f       	adc	r31, r21
    12ee:	81 93       	st	Z+, r24
    12f0:	91 93       	st	Z+, r25
    12f2:	42 50       	subi	r20, 0x02	; 2
    12f4:	50 40       	sbci	r21, 0x00	; 0
    12f6:	11 96       	adiw	r26, 0x01	; 1
    12f8:	5c 93       	st	X, r21
    12fa:	4e 93       	st	-X, r20
    12fc:	3b c0       	rjmp	.+118    	; 0x1374 <malloc+0x12c>
    12fe:	20 91 4d 02 	lds	r18, 0x024D
    1302:	30 91 4e 02 	lds	r19, 0x024E
    1306:	21 15       	cp	r18, r1
    1308:	31 05       	cpc	r19, r1
    130a:	41 f4       	brne	.+16     	; 0x131c <malloc+0xd4>
    130c:	20 91 4b 01 	lds	r18, 0x014B
    1310:	30 91 4c 01 	lds	r19, 0x014C
    1314:	30 93 4e 02 	sts	0x024E, r19
    1318:	20 93 4d 02 	sts	0x024D, r18
    131c:	20 91 4d 01 	lds	r18, 0x014D
    1320:	30 91 4e 01 	lds	r19, 0x014E
    1324:	21 15       	cp	r18, r1
    1326:	31 05       	cpc	r19, r1
    1328:	41 f4       	brne	.+16     	; 0x133a <malloc+0xf2>
    132a:	2d b7       	in	r18, 0x3d	; 61
    132c:	3e b7       	in	r19, 0x3e	; 62
    132e:	40 91 49 01 	lds	r20, 0x0149
    1332:	50 91 4a 01 	lds	r21, 0x014A
    1336:	24 1b       	sub	r18, r20
    1338:	35 0b       	sbc	r19, r21
    133a:	e0 91 4d 02 	lds	r30, 0x024D
    133e:	f0 91 4e 02 	lds	r31, 0x024E
    1342:	e2 17       	cp	r30, r18
    1344:	f3 07       	cpc	r31, r19
    1346:	a0 f4       	brcc	.+40     	; 0x1370 <malloc+0x128>
    1348:	2e 1b       	sub	r18, r30
    134a:	3f 0b       	sbc	r19, r31
    134c:	28 17       	cp	r18, r24
    134e:	39 07       	cpc	r19, r25
    1350:	78 f0       	brcs	.+30     	; 0x1370 <malloc+0x128>
    1352:	ac 01       	movw	r20, r24
    1354:	4e 5f       	subi	r20, 0xFE	; 254
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
    1358:	24 17       	cp	r18, r20
    135a:	35 07       	cpc	r19, r21
    135c:	48 f0       	brcs	.+18     	; 0x1370 <malloc+0x128>
    135e:	4e 0f       	add	r20, r30
    1360:	5f 1f       	adc	r21, r31
    1362:	50 93 4e 02 	sts	0x024E, r21
    1366:	40 93 4d 02 	sts	0x024D, r20
    136a:	81 93       	st	Z+, r24
    136c:	91 93       	st	Z+, r25
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <malloc+0x12c>
    1370:	e0 e0       	ldi	r30, 0x00	; 0
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	cf 01       	movw	r24, r30
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <free>:
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	09 f4       	brne	.+2      	; 0x1386 <free+0xa>
    1384:	91 c0       	rjmp	.+290    	; 0x14a8 <free+0x12c>
    1386:	fc 01       	movw	r30, r24
    1388:	32 97       	sbiw	r30, 0x02	; 2
    138a:	13 82       	std	Z+3, r1	; 0x03
    138c:	12 82       	std	Z+2, r1	; 0x02
    138e:	60 91 4f 02 	lds	r22, 0x024F
    1392:	70 91 50 02 	lds	r23, 0x0250
    1396:	61 15       	cp	r22, r1
    1398:	71 05       	cpc	r23, r1
    139a:	81 f4       	brne	.+32     	; 0x13bc <free+0x40>
    139c:	20 81       	ld	r18, Z
    139e:	31 81       	ldd	r19, Z+1	; 0x01
    13a0:	28 0f       	add	r18, r24
    13a2:	39 1f       	adc	r19, r25
    13a4:	80 91 4d 02 	lds	r24, 0x024D
    13a8:	90 91 4e 02 	lds	r25, 0x024E
    13ac:	82 17       	cp	r24, r18
    13ae:	93 07       	cpc	r25, r19
    13b0:	99 f5       	brne	.+102    	; 0x1418 <free+0x9c>
    13b2:	f0 93 4e 02 	sts	0x024E, r31
    13b6:	e0 93 4d 02 	sts	0x024D, r30
    13ba:	76 c0       	rjmp	.+236    	; 0x14a8 <free+0x12c>
    13bc:	db 01       	movw	r26, r22
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <free+0x4c>
    13c4:	cd 01       	movw	r24, r26
    13c6:	d9 01       	movw	r26, r18
    13c8:	ae 17       	cp	r26, r30
    13ca:	bf 07       	cpc	r27, r31
    13cc:	48 f4       	brcc	.+18     	; 0x13e0 <free+0x64>
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	2d 91       	ld	r18, X+
    13d2:	3c 91       	ld	r19, X
    13d4:	13 97       	sbiw	r26, 0x03	; 3
    13d6:	21 15       	cp	r18, r1
    13d8:	31 05       	cpc	r19, r1
    13da:	a1 f7       	brne	.-24     	; 0x13c4 <free+0x48>
    13dc:	cd 01       	movw	r24, r26
    13de:	21 c0       	rjmp	.+66     	; 0x1422 <free+0xa6>
    13e0:	b3 83       	std	Z+3, r27	; 0x03
    13e2:	a2 83       	std	Z+2, r26	; 0x02
    13e4:	ef 01       	movw	r28, r30
    13e6:	49 91       	ld	r20, Y+
    13e8:	59 91       	ld	r21, Y+
    13ea:	9e 01       	movw	r18, r28
    13ec:	24 0f       	add	r18, r20
    13ee:	35 1f       	adc	r19, r21
    13f0:	a2 17       	cp	r26, r18
    13f2:	b3 07       	cpc	r27, r19
    13f4:	79 f4       	brne	.+30     	; 0x1414 <free+0x98>
    13f6:	2d 91       	ld	r18, X+
    13f8:	3c 91       	ld	r19, X
    13fa:	11 97       	sbiw	r26, 0x01	; 1
    13fc:	24 0f       	add	r18, r20
    13fe:	35 1f       	adc	r19, r21
    1400:	2e 5f       	subi	r18, 0xFE	; 254
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	31 83       	std	Z+1, r19	; 0x01
    1406:	20 83       	st	Z, r18
    1408:	12 96       	adiw	r26, 0x02	; 2
    140a:	2d 91       	ld	r18, X+
    140c:	3c 91       	ld	r19, X
    140e:	13 97       	sbiw	r26, 0x03	; 3
    1410:	33 83       	std	Z+3, r19	; 0x03
    1412:	22 83       	std	Z+2, r18	; 0x02
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	29 f4       	brne	.+10     	; 0x1422 <free+0xa6>
    1418:	f0 93 50 02 	sts	0x0250, r31
    141c:	e0 93 4f 02 	sts	0x024F, r30
    1420:	43 c0       	rjmp	.+134    	; 0x14a8 <free+0x12c>
    1422:	dc 01       	movw	r26, r24
    1424:	13 96       	adiw	r26, 0x03	; 3
    1426:	fc 93       	st	X, r31
    1428:	ee 93       	st	-X, r30
    142a:	12 97       	sbiw	r26, 0x02	; 2
    142c:	4d 91       	ld	r20, X+
    142e:	5d 91       	ld	r21, X+
    1430:	a4 0f       	add	r26, r20
    1432:	b5 1f       	adc	r27, r21
    1434:	ea 17       	cp	r30, r26
    1436:	fb 07       	cpc	r31, r27
    1438:	69 f4       	brne	.+26     	; 0x1454 <free+0xd8>
    143a:	20 81       	ld	r18, Z
    143c:	31 81       	ldd	r19, Z+1	; 0x01
    143e:	24 0f       	add	r18, r20
    1440:	35 1f       	adc	r19, r21
    1442:	2e 5f       	subi	r18, 0xFE	; 254
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	ec 01       	movw	r28, r24
    1448:	39 83       	std	Y+1, r19	; 0x01
    144a:	28 83       	st	Y, r18
    144c:	22 81       	ldd	r18, Z+2	; 0x02
    144e:	33 81       	ldd	r19, Z+3	; 0x03
    1450:	3b 83       	std	Y+3, r19	; 0x03
    1452:	2a 83       	std	Y+2, r18	; 0x02
    1454:	e0 e0       	ldi	r30, 0x00	; 0
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <free+0xe2>
    145a:	fb 01       	movw	r30, r22
    145c:	bc 01       	movw	r22, r24
    145e:	db 01       	movw	r26, r22
    1460:	12 96       	adiw	r26, 0x02	; 2
    1462:	8d 91       	ld	r24, X+
    1464:	9c 91       	ld	r25, X
    1466:	13 97       	sbiw	r26, 0x03	; 3
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	b9 f7       	brne	.-18     	; 0x145a <free+0xde>
    146c:	9b 01       	movw	r18, r22
    146e:	2e 5f       	subi	r18, 0xFE	; 254
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	8d 91       	ld	r24, X+
    1474:	9c 91       	ld	r25, X
    1476:	11 97       	sbiw	r26, 0x01	; 1
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	40 91 4d 02 	lds	r20, 0x024D
    1480:	50 91 4e 02 	lds	r21, 0x024E
    1484:	48 17       	cp	r20, r24
    1486:	59 07       	cpc	r21, r25
    1488:	79 f4       	brne	.+30     	; 0x14a8 <free+0x12c>
    148a:	30 97       	sbiw	r30, 0x00	; 0
    148c:	29 f4       	brne	.+10     	; 0x1498 <free+0x11c>
    148e:	10 92 50 02 	sts	0x0250, r1
    1492:	10 92 4f 02 	sts	0x024F, r1
    1496:	02 c0       	rjmp	.+4      	; 0x149c <free+0x120>
    1498:	13 82       	std	Z+3, r1	; 0x03
    149a:	12 82       	std	Z+2, r1	; 0x02
    149c:	22 50       	subi	r18, 0x02	; 2
    149e:	30 40       	sbci	r19, 0x00	; 0
    14a0:	30 93 4e 02 	sts	0x024E, r19
    14a4:	20 93 4d 02 	sts	0x024D, r18
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <do_random>:
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ed e5       	ldi	r30, 0x5D	; 93
    14b4:	fa e0       	ldi	r31, 0x0A	; 10
    14b6:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__prologue_saves__+0x10>
    14ba:	ec 01       	movw	r28, r24
    14bc:	68 81       	ld	r22, Y
    14be:	79 81       	ldd	r23, Y+1	; 0x01
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	9b 81       	ldd	r25, Y+3	; 0x03
    14c4:	61 15       	cp	r22, r1
    14c6:	71 05       	cpc	r23, r1
    14c8:	81 05       	cpc	r24, r1
    14ca:	91 05       	cpc	r25, r1
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <do_random+0x28>
    14ce:	64 e2       	ldi	r22, 0x24	; 36
    14d0:	79 ed       	ldi	r23, 0xD9	; 217
    14d2:	8b e5       	ldi	r24, 0x5B	; 91
    14d4:	97 e0       	ldi	r25, 0x07	; 7
    14d6:	2d e1       	ldi	r18, 0x1D	; 29
    14d8:	33 ef       	ldi	r19, 0xF3	; 243
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	0e 94 ef 08 	call	0x11de	; 0x11de <__divmodsi4>
    14e2:	79 01       	movw	r14, r18
    14e4:	8a 01       	movw	r16, r20
    14e6:	27 ea       	ldi	r18, 0xA7	; 167
    14e8:	31 e4       	ldi	r19, 0x41	; 65
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsi3>
    14f2:	5b 01       	movw	r10, r22
    14f4:	6c 01       	movw	r12, r24
    14f6:	c8 01       	movw	r24, r16
    14f8:	b7 01       	movw	r22, r14
    14fa:	2c ee       	ldi	r18, 0xEC	; 236
    14fc:	34 ef       	ldi	r19, 0xF4	; 244
    14fe:	4f ef       	ldi	r20, 0xFF	; 255
    1500:	5f ef       	ldi	r21, 0xFF	; 255
    1502:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	2a 0d       	add	r18, r10
    150c:	3b 1d       	adc	r19, r11
    150e:	4c 1d       	adc	r20, r12
    1510:	5d 1d       	adc	r21, r13
    1512:	57 ff       	sbrs	r21, 7
    1514:	04 c0       	rjmp	.+8      	; 0x151e <do_random+0x70>
    1516:	21 50       	subi	r18, 0x01	; 1
    1518:	30 40       	sbci	r19, 0x00	; 0
    151a:	40 40       	sbci	r20, 0x00	; 0
    151c:	50 48       	sbci	r21, 0x80	; 128
    151e:	28 83       	st	Y, r18
    1520:	39 83       	std	Y+1, r19	; 0x01
    1522:	4a 83       	std	Y+2, r20	; 0x02
    1524:	5b 83       	std	Y+3, r21	; 0x03
    1526:	5f 77       	andi	r21, 0x7F	; 127
    1528:	b9 01       	movw	r22, r18
    152a:	ca 01       	movw	r24, r20
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	ea e0       	ldi	r30, 0x0A	; 10
    1532:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__epilogue_restores__+0x10>

00001536 <random_r>:
    1536:	0e 94 57 0a 	call	0x14ae	; 0x14ae <do_random>
    153a:	08 95       	ret

0000153c <random>:
    153c:	8f e4       	ldi	r24, 0x4F	; 79
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 57 0a 	call	0x14ae	; 0x14ae <do_random>
    1544:	08 95       	ret

00001546 <srandom>:
    1546:	60 93 4f 01 	sts	0x014F, r22
    154a:	70 93 50 01 	sts	0x0150, r23
    154e:	80 93 51 01 	sts	0x0151, r24
    1552:	90 93 52 01 	sts	0x0152, r25
    1556:	08 95       	ret

00001558 <__prologue_saves__>:
    1558:	2f 92       	push	r2
    155a:	3f 92       	push	r3
    155c:	4f 92       	push	r4
    155e:	5f 92       	push	r5
    1560:	6f 92       	push	r6
    1562:	7f 92       	push	r7
    1564:	8f 92       	push	r8
    1566:	9f 92       	push	r9
    1568:	af 92       	push	r10
    156a:	bf 92       	push	r11
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	ca 1b       	sub	r28, r26
    1582:	db 0b       	sbc	r29, r27
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	09 94       	ijmp

00001590 <__epilogue_restores__>:
    1590:	2a 88       	ldd	r2, Y+18	; 0x12
    1592:	39 88       	ldd	r3, Y+17	; 0x11
    1594:	48 88       	ldd	r4, Y+16	; 0x10
    1596:	5f 84       	ldd	r5, Y+15	; 0x0f
    1598:	6e 84       	ldd	r6, Y+14	; 0x0e
    159a:	7d 84       	ldd	r7, Y+13	; 0x0d
    159c:	8c 84       	ldd	r8, Y+12	; 0x0c
    159e:	9b 84       	ldd	r9, Y+11	; 0x0b
    15a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    15a2:	b9 84       	ldd	r11, Y+9	; 0x09
    15a4:	c8 84       	ldd	r12, Y+8	; 0x08
    15a6:	df 80       	ldd	r13, Y+7	; 0x07
    15a8:	ee 80       	ldd	r14, Y+6	; 0x06
    15aa:	fd 80       	ldd	r15, Y+5	; 0x05
    15ac:	0c 81       	ldd	r16, Y+4	; 0x04
    15ae:	1b 81       	ldd	r17, Y+3	; 0x03
    15b0:	aa 81       	ldd	r26, Y+2	; 0x02
    15b2:	b9 81       	ldd	r27, Y+1	; 0x01
    15b4:	ce 0f       	add	r28, r30
    15b6:	d1 1d       	adc	r29, r1
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	ed 01       	movw	r28, r26
    15c4:	08 95       	ret

000015c6 <__do_global_dtors>:
    15c6:	10 e0       	ldi	r17, 0x00	; 0
    15c8:	cc e6       	ldi	r28, 0x6C	; 108
    15ca:	d0 e0       	ldi	r29, 0x00	; 0
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__do_global_dtors+0x10>
    15ce:	fe 01       	movw	r30, r28
    15d0:	0e 94 20 09 	call	0x1240	; 0x1240 <__tablejump__>
    15d4:	22 96       	adiw	r28, 0x02	; 2
    15d6:	ce 36       	cpi	r28, 0x6E	; 110
    15d8:	d1 07       	cpc	r29, r17
    15da:	c9 f7       	brne	.-14     	; 0x15ce <__do_global_dtors+0x8>
    15dc:	f8 94       	cli

000015de <__stop_program>:
    15de:	ff cf       	rjmp	.-2      	; 0x15de <__stop_program>
