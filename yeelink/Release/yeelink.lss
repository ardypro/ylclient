
yeelink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00001098  0000112c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f3  00800178  00800178  000011a4  2**0
                  ALLOC
  3 .stab         0000d998  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001f479  00000000  00000000  0000eb3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__dtors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_16>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_18>
      4c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__vector_19>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	68 00       	.word	0x0068	; ????
      6a:	73 00       	.word	0x0073	; ????
      6c:	7e 00       	.word	0x007e	; ????
      6e:	8d 00       	.word	0x008d	; ????
      70:	98 00       	.word	0x0098	; ????
      72:	a3 00       	.word	0x00a3	; ????
      74:	d8 00       	.word	0x00d8	; ????
      76:	34 03       	mulsu	r19, r20
      78:	ca 03       	fmulsu	r20, r18

0000007a <__ctors_end>:
      7a:	dd 00       	.word	0x00dd	; ????

0000007c <__dtors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 e9       	ldi	r30, 0x98	; 152
      90:	f0 e1       	ldi	r31, 0x10	; 16
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 37       	cpi	r26, 0x78	; 120
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	a8 e7       	ldi	r26, 0x78	; 120
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ab 36       	cpi	r26, 0x6B	; 107
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>

000000ae <__do_global_ctors>:
      ae:	10 e0       	ldi	r17, 0x00	; 0
      b0:	ca e7       	ldi	r28, 0x7A	; 122
      b2:	d0 e0       	ldi	r29, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_global_ctors+0x10>
      b6:	22 97       	sbiw	r28, 0x02	; 2
      b8:	fe 01       	movw	r30, r28
      ba:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__tablejump__>
      be:	c8 36       	cpi	r28, 0x68	; 104
      c0:	d1 07       	cpc	r29, r17
      c2:	c9 f7       	brne	.-14     	; 0xb6 <__do_global_ctors+0x8>
      c4:	0e 94 b3 04 	call	0x966	; 0x966 <main>
      c8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__do_global_dtors>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <_GLOBAL__I__ZN9DhcpClass13beginWithDHCPEPhmm>:
}

IPAddress DhcpClass::getDnsServerIp()
{
    return IPAddress(_dhcpDnsServerIp);
}
      d0:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
      d2:	88 e7       	ldi	r24, 0x78	; 120
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	00 e0       	ldi	r16, 0x00	; 0
      de:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN9IPAddressC1Ehhhh>
      e2:	0f 91       	pop	r16
      e4:	08 95       	ret

000000e6 <_GLOBAL__I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
      e6:	0f 93       	push	r16
      e8:	8e e7       	ldi	r24, 0x7E	; 126
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN9IPAddressC1Ehhhh>
      f8:	0f 91       	pop	r16
      fa:	08 95       	ret

000000fc <_GLOBAL__I__ZN13EthernetClass6_stateE>:
IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}

EthernetClass Ethernet;
      fc:	0f 93       	push	r16
      fe:	8a e8       	ldi	r24, 0x8A	; 138
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	00 e0       	ldi	r16, 0x00	; 0
     10a:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN9IPAddressC1Ehhhh>
#include "EthernetClient.h"
#include "EthernetServer.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
     10e:	84 e8       	ldi	r24, 0x84	; 132
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN9IPAddressC1Ev>
     116:	0f 91       	pop	r16
     118:	08 95       	ret

0000011a <_GLOBAL__I__ZN14EthernetClient8_srcportE>:
// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}
     11a:	0f 93       	push	r16
     11c:	80 e9       	ldi	r24, 0x90	; 144
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN9IPAddressC1Ehhhh>
     12c:	0f 91       	pop	r16
     12e:	08 95       	ret

00000130 <_GLOBAL__I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
     130:	0f 93       	push	r16
     132:	86 e9       	ldi	r24, 0x96	; 150
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN9IPAddressC1Ehhhh>
     142:	0f 91       	pop	r16
     144:	08 95       	ret

00000146 <_GLOBAL__I__ZN11EthernetUDPC2Ev>:
{
  while (available())
  {
    read();
  }
}
     146:	0f 93       	push	r16
     148:	8c e9       	ldi	r24, 0x9C	; 156
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	0e 94 be 03 	call	0x77c	; 0x77c <_ZN9IPAddressC1Ehhhh>
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <_Z41__static_initialization_and_destruction_0ii.clone.0>:
{
	long v;
	v=random(256);
	//client.Post(v);
	delay(20*1000);
}
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	29 f4       	brne	.+10     	; 0x16c <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
#include "ylclient.h"

extern HardwareSerial Serial;
using namespace yeelink;

ylclient client;
     162:	82 ea       	ldi	r24, 0xA2	; 162
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN7yeelink8ylclientC1Ev>
     16a:	08 95       	ret
     16c:	00 97       	sbiw	r24, 0x00	; 0
     16e:	21 f4       	brne	.+8      	; 0x178 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
     170:	82 ea       	ldi	r24, 0xA2	; 162
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 44 01 	call	0x288	; 0x288 <_ZN7yeelink8ylclientD1Ev>
     178:	08 95       	ret

0000017a <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
	Serial.begin(9600);
     17a:	89 e3       	ldi	r24, 0x39	; 57
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	55 e2       	ldi	r21, 0x25	; 37
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN14HardwareSerial5beginEm>
	//初始化yeelink client
	//client.setAPIKey("apikey");	//设置API key，这里采用默认的key
	//client.setAPIVersion("v1.0");	//设置API版本，除非yeelink API升级，则采用默认的v1.0版本

	randomSeed(analogRead(0));
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	0e 94 99 05 	call	0xb32	; 0xb32 <analogRead>
     190:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z10randomSeedj>
}
     194:	08 95       	ret

00000196 <loop>:

// The loop function is called in an endless loop
void loop()
{
	long v;
	v=random(256);
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	71 e0       	ldi	r23, 0x01	; 1
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 95 04 	call	0x92a	; 0x92a <_Z6randoml>
	//client.Post(v);
	delay(20*1000);
     1a2:	60 e2       	ldi	r22, 0x20	; 32
     1a4:	7e e4       	ldi	r23, 0x4E	; 78
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 37 05 	call	0xa6e	; 0xa6e <delay>
}
     1ae:	08 95       	ret

000001b0 <_GLOBAL__I_client>:
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z41__static_initialization_and_destruction_0ii.clone.0>
     1b8:	08 95       	ret

000001ba <_GLOBAL__D_client>:
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z41__static_initialization_and_destruction_0ii.clone.0>
     1c2:	08 95       	ret

000001c4 <_ZN7yeelink17ylGenericEthernetD1Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     1c4:	25 e3       	ldi	r18, 0x35	; 53
     1c6:	31 e0       	ldi	r19, 0x01	; 1
     1c8:	fc 01       	movw	r30, r24
     1ca:	31 83       	std	Z+1, r19	; 0x01
     1cc:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     1ce:	08 95       	ret

000001d0 <_ZN7yeelink17ylGenericEthernet14setSerialIndexEi>:
}

void  ylGenericEthernet::setSerialIndex(int index)
{
	//do nothing in base class
}
     1d0:	08 95       	ret

000001d2 <_ZN7yeelink17ylGenericEthernet6setMacEPh>:

void  ylGenericEthernet::setMac(byte mac[])
{
	//do nothing in base class
}
     1d2:	08 95       	ret

000001d4 <_ZN7yeelink17ylGenericEthernet10setSubMaskEPh>:

void  ylGenericEthernet::setSubMask(byte mask[])
{
	//do nothing in base class
}
     1d4:	08 95       	ret

000001d6 <_ZN7yeelink17ylGenericEthernet5setIPEPh>:

void  ylGenericEthernet::setIP(byte ip[])
{
	//do nothing in base class
}
     1d6:	08 95       	ret

000001d8 <_ZN7yeelink17ylGenericEthernetD0Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     1d8:	25 e3       	ldi	r18, 0x35	; 53
     1da:	31 e0       	ldi	r19, 0x01	; 1
     1dc:	fc 01       	movw	r30, r24
     1de:	31 83       	std	Z+1, r19	; 0x01
     1e0:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     1e2:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZdlPv>
     1e6:	08 95       	ret

000001e8 <_ZN7yeelink17ylGenericEthernetC1Ev>:
//#include "ylconst.h"

namespace yeelink
{

ylGenericEthernet::ylGenericEthernet()
     1e8:	fc 01       	movw	r30, r24
     1ea:	85 e3       	ldi	r24, 0x35	; 53
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	91 83       	std	Z+1, r25	; 0x01
     1f0:	80 83       	st	Z, r24
{
	seconds = 30; //API规定两条记录发送的时间间隔不少于10s
     1f2:	8e e1       	ldi	r24, 0x1E	; 30
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	93 83       	std	Z+3, r25	; 0x03
     1f8:	82 83       	std	Z+2, r24	; 0x02
	apiHeader = 0;
     1fa:	11 86       	std	Z+9, r1	; 0x09
     1fc:	10 86       	std	Z+8, r1	; 0x08
	jsonStr = 0;
     1fe:	13 86       	std	Z+11, r1	; 0x0b
     200:	12 86       	std	Z+10, r1	; 0x0a

}
     202:	08 95       	ret

00000204 <_ZN7yeelink15ylW5100Ethernet4PostEf>:
		r=true;
		}
	else
		r=false;
	return r;
}
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	08 95       	ret

00000208 <_ZN7yeelink15ylW5100Ethernet4PostEl>:

bool ylW5100Ethernet::Post(long value)
{
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	ec 01       	movw	r28, r24
     212:	cb 01       	movw	r24, r22
     214:	ba 01       	movw	r22, r20
	float f;
	f=value*1.0;
	return Post( f);
     216:	08 81       	ld	r16, Y
     218:	19 81       	ldd	r17, Y+1	; 0x01
}

bool ylW5100Ethernet::Post(long value)
{
	float f;
	f=value*1.0;
     21a:	0e 94 bc 05 	call	0xb78	; 0xb78 <__floatsisf>
     21e:	ab 01       	movw	r20, r22
     220:	bc 01       	movw	r22, r24
	return Post( f);
     222:	d8 01       	movw	r26, r16
     224:	16 96       	adiw	r26, 0x06	; 6
     226:	ed 91       	ld	r30, X+
     228:	fc 91       	ld	r31, X
     22a:	17 97       	sbiw	r26, 0x07	; 7
     22c:	ce 01       	movw	r24, r28
     22e:	09 95       	icall
}
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	08 95       	ret

0000023a <_ZN7yeelink15ylW5100Ethernet6setMacEPh>:
}

void ylW5100Ethernet::setMac(byte mac[])
{

}
     23a:	08 95       	ret

0000023c <_ZN7yeelink15ylW5100Ethernet10setSubMaskEPh>:

void ylW5100Ethernet::setSubMask(byte mask[])
{

}
     23c:	08 95       	ret

0000023e <_ZN7yeelink15ylW5100Ethernet5setIPEPh>:

void ylW5100Ethernet::setIP(byte ip[])
{

}
     23e:	08 95       	ret

00000240 <_ZN7yeelink15ylW5100EthernetD1Ev>:
{
	// TODO Auto-generated constructor stub

}

ylW5100Ethernet::~ylW5100Ethernet()
     240:	29 e4       	ldi	r18, 0x49	; 73
     242:	31 e0       	ldi	r19, 0x01	; 1
     244:	fc 01       	movw	r30, r24
     246:	31 83       	std	Z+1, r19	; 0x01
     248:	20 83       	st	Z, r18
     24a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     24e:	08 95       	ret

00000250 <_ZN7yeelink15ylW5100EthernetD0Ev>:
{
	// TODO Auto-generated constructor stub

}

ylW5100Ethernet::~ylW5100Ethernet()
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
     256:	89 e4       	ldi	r24, 0x49	; 73
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	99 83       	std	Y+1, r25	; 0x01
     25c:	88 83       	st	Y, r24
     25e:	ce 01       	movw	r24, r28
     260:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     264:	ce 01       	movw	r24, r28
     266:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZdlPv>
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <_ZN7yeelink15ylW5100EthernetC1Ev>:
#include "ylW5100Ethernet.h"

namespace yeelink
{

ylW5100Ethernet::ylW5100Ethernet()
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	ec 01       	movw	r28, r24
     276:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN7yeelink17ylGenericEthernetC1Ev>
     27a:	89 e4       	ldi	r24, 0x49	; 73
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	99 83       	std	Y+1, r25	; 0x01
     280:	88 83       	st	Y, r24
{
	// TODO Auto-generated constructor stub

}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <_ZN7yeelink8ylclientD1Ev>:
	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消

	this->_apiver = (char*) APIVERSION;
}

ylclient::~ylclient()
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
     28e:	8d e5       	ldi	r24, 0x5D	; 93
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	99 83       	std	Y+1, r25	; 0x01
     294:	88 83       	st	Y, r24
{
	delete net;
     296:	8d 85       	ldd	r24, Y+13	; 0x0d
     298:	9e 85       	ldd	r25, Y+14	; 0x0e
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	39 f0       	breq	.+14     	; 0x2ac <_ZN7yeelink8ylclientD1Ev+0x24>
     29e:	dc 01       	movw	r26, r24
     2a0:	ed 91       	ld	r30, X+
     2a2:	fc 91       	ld	r31, X
     2a4:	02 80       	ldd	r0, Z+2	; 0x02
     2a6:	f3 81       	ldd	r31, Z+3	; 0x03
     2a8:	e0 2d       	mov	r30, r0
     2aa:	09 95       	icall
	net = NULL;
     2ac:	1e 86       	std	Y+14, r1	; 0x0e
     2ae:	1d 86       	std	Y+13, r1	; 0x0d
}
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <_ZN7yeelink8ylclientD0Ev>:
	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消

	this->_apiver = (char*) APIVERSION;
}

ylclient::~ylclient()
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
{
	delete net;
	net = NULL;
}
     2bc:	0e 94 44 01 	call	0x288	; 0x288 <_ZN7yeelink8ylclientD1Ev>
     2c0:	ce 01       	movw	r24, r28
     2c2:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZdlPv>
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <_ZN7yeelink8ylclientC1Ev>:
#endif

namespace yeelink
{

ylclient::ylclient()
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ec 01       	movw	r28, r24
     2d6:	8d e5       	ldi	r24, 0x5D	; 93
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	99 83       	std	Y+1, r25	; 0x01
     2dc:	88 83       	st	Y, r24
{
	//决定ylGenericEthernet的子类类型
#ifdef W5100BOARD
	net = new ylW5100Ethernet();
     2de:	82 e1       	ldi	r24, 0x12	; 18
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 c2 04 	call	0x984	; 0x984 <_Znwj>
     2e6:	8c 01       	movw	r16, r24
     2e8:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7yeelink15ylW5100EthernetC1Ev>
     2ec:	0d 87       	std	Y+13, r16	; 0x0d
     2ee:	1e 87       	std	Y+14, r17	; 0x0e
#else
	net = new ylSerialHTTP();
#endif
#endif

	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	9b 83       	std	Y+3, r25	; 0x03
     2f6:	8a 83       	std	Y+2, r24	; 0x02

	this->_apiver = (char*) APIVERSION;
     2f8:	81 e2       	ldi	r24, 0x21	; 33
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	98 87       	std	Y+8, r25	; 0x08
     2fe:	8f 83       	std	Y+7, r24	; 0x07
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     30a:	fc 01       	movw	r30, r24
     30c:	84 85       	ldd	r24, Z+12	; 0x0c
     30e:	95 85       	ldd	r25, Z+13	; 0x0d
     310:	fc 01       	movw	r30, r24
     312:	e0 5c       	subi	r30, 0xC0	; 192
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	20 81       	ld	r18, Z
     318:	31 81       	ldd	r19, Z+1	; 0x01
     31a:	8e 5b       	subi	r24, 0xBE	; 190
     31c:	9f 4f       	sbci	r25, 0xFF	; 255
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	28 1b       	sub	r18, r24
     326:	39 0b       	sbc	r19, r25
     328:	2f 73       	andi	r18, 0x3F	; 63
     32a:	30 70       	andi	r19, 0x00	; 0
}
     32c:	c9 01       	movw	r24, r18
     32e:	08 95       	ret

00000330 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     330:	fc 01       	movw	r30, r24
     332:	84 85       	ldd	r24, Z+12	; 0x0c
     334:	95 85       	ldd	r25, Z+13	; 0x0d
     336:	fc 01       	movw	r30, r24
     338:	e0 5c       	subi	r30, 0xC0	; 192
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	40 81       	ld	r20, Z
     33e:	51 81       	ldd	r21, Z+1	; 0x01
     340:	fc 01       	movw	r30, r24
     342:	ee 5b       	subi	r30, 0xBE	; 190
     344:	ff 4f       	sbci	r31, 0xFF	; 255
     346:	20 81       	ld	r18, Z
     348:	31 81       	ldd	r19, Z+1	; 0x01
     34a:	42 17       	cp	r20, r18
     34c:	53 07       	cpc	r21, r19
     34e:	41 f0       	breq	.+16     	; 0x360 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     350:	01 90       	ld	r0, Z+
     352:	f0 81       	ld	r31, Z
     354:	e0 2d       	mov	r30, r0
     356:	e8 0f       	add	r30, r24
     358:	f9 1f       	adc	r31, r25
     35a:	20 81       	ld	r18, Z
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	02 c0       	rjmp	.+4      	; 0x364 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     360:	2f ef       	ldi	r18, 0xFF	; 255
     362:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     364:	c9 01       	movw	r24, r18
     366:	08 95       	ret

00000368 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     368:	fc 01       	movw	r30, r24
     36a:	84 85       	ldd	r24, Z+12	; 0x0c
     36c:	95 85       	ldd	r25, Z+13	; 0x0d
     36e:	fc 01       	movw	r30, r24
     370:	e0 5c       	subi	r30, 0xC0	; 192
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	40 81       	ld	r20, Z
     376:	51 81       	ldd	r21, Z+1	; 0x01
     378:	fc 01       	movw	r30, r24
     37a:	ee 5b       	subi	r30, 0xBE	; 190
     37c:	ff 4f       	sbci	r31, 0xFF	; 255
     37e:	20 81       	ld	r18, Z
     380:	31 81       	ldd	r19, Z+1	; 0x01
     382:	42 17       	cp	r20, r18
     384:	53 07       	cpc	r21, r19
     386:	71 f0       	breq	.+28     	; 0x3a4 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     388:	a0 81       	ld	r26, Z
     38a:	b1 81       	ldd	r27, Z+1	; 0x01
     38c:	a8 0f       	add	r26, r24
     38e:	b9 1f       	adc	r27, r25
     390:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     392:	80 81       	ld	r24, Z
     394:	91 81       	ldd	r25, Z+1	; 0x01
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	8f 73       	andi	r24, 0x3F	; 63
     39a:	90 70       	andi	r25, 0x00	; 0
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	80 83       	st	Z, r24
    return c;
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     3a4:	2f ef       	ldi	r18, 0xFF	; 255
     3a6:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     3a8:	c9 01       	movw	r24, r18
     3aa:	08 95       	ret

000003ac <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     3ac:	dc 01       	movw	r26, r24
     3ae:	1e 96       	adiw	r26, 0x0e	; 14
     3b0:	8d 91       	ld	r24, X+
     3b2:	9c 91       	ld	r25, X
     3b4:	1f 97       	sbiw	r26, 0x0f	; 15
     3b6:	fc 01       	movw	r30, r24
     3b8:	e0 5c       	subi	r30, 0xC0	; 192
     3ba:	ff 4f       	sbci	r31, 0xFF	; 255
     3bc:	8e 5b       	subi	r24, 0xBE	; 190
     3be:	9f 4f       	sbci	r25, 0xFF	; 255
     3c0:	40 81       	ld	r20, Z
     3c2:	51 81       	ldd	r21, Z+1	; 0x01
     3c4:	dc 01       	movw	r26, r24
     3c6:	2d 91       	ld	r18, X+
     3c8:	3c 91       	ld	r19, X
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	42 17       	cp	r20, r18
     3ce:	53 07       	cpc	r21, r19
     3d0:	b9 f7       	brne	.-18     	; 0x3c0 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     3d2:	08 95       	ret

000003d4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     3d4:	1f 93       	push	r17
     3d6:	fc 01       	movw	r30, r24
     3d8:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     3da:	26 85       	ldd	r18, Z+14	; 0x0e
     3dc:	37 85       	ldd	r19, Z+15	; 0x0f
     3de:	d9 01       	movw	r26, r18
     3e0:	a0 5c       	subi	r26, 0xC0	; 192
     3e2:	bf 4f       	sbci	r27, 0xFF	; 255
     3e4:	8d 91       	ld	r24, X+
     3e6:	9c 91       	ld	r25, X
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	60 e4       	ldi	r22, 0x40	; 64
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	0e 94 16 06 	call	0xc2c	; 0xc2c <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     3f2:	d9 01       	movw	r26, r18
     3f4:	ae 5b       	subi	r26, 0xBE	; 190
     3f6:	bf 4f       	sbci	r27, 0xFF	; 255
     3f8:	4d 91       	ld	r20, X+
     3fa:	5c 91       	ld	r21, X
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	84 17       	cp	r24, r20
     400:	95 07       	cpc	r25, r21
     402:	d1 f3       	breq	.-12     	; 0x3f8 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     404:	d9 01       	movw	r26, r18
     406:	a0 5c       	subi	r26, 0xC0	; 192
     408:	bf 4f       	sbci	r27, 0xFF	; 255
     40a:	0d 90       	ld	r0, X+
     40c:	bc 91       	ld	r27, X
     40e:	a0 2d       	mov	r26, r0
     410:	a2 0f       	add	r26, r18
     412:	b3 1f       	adc	r27, r19
     414:	1c 93       	st	X, r17
  _tx_buffer->head = i;
     416:	a6 85       	ldd	r26, Z+14	; 0x0e
     418:	b7 85       	ldd	r27, Z+15	; 0x0f
     41a:	a0 5c       	subi	r26, 0xC0	; 192
     41c:	bf 4f       	sbci	r27, 0xFF	; 255
     41e:	11 96       	adiw	r26, 0x01	; 1
     420:	9c 93       	st	X, r25
     422:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     424:	a6 89       	ldd	r26, Z+22	; 0x16
     426:	b7 89       	ldd	r27, Z+23	; 0x17
     428:	2c 91       	ld	r18, X
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	05 8c       	ldd	r0, Z+29	; 0x1d
     430:	02 c0       	rjmp	.+4      	; 0x436 <_ZN14HardwareSerial5writeEh+0x62>
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	0a 94       	dec	r0
     438:	e2 f7       	brpl	.-8      	; 0x432 <_ZN14HardwareSerial5writeEh+0x5e>
     43a:	28 2b       	or	r18, r24
     43c:	2c 93       	st	X, r18
  
  return 1;
}
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	1f 91       	pop	r17
     444:	08 95       	ret

00000446 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     446:	fb 01       	movw	r30, r22
     448:	e0 5c       	subi	r30, 0xC0	; 192
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	20 81       	ld	r18, Z
     44e:	31 81       	ldd	r19, Z+1	; 0x01
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	2f 73       	andi	r18, 0x3F	; 63
     456:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     458:	db 01       	movw	r26, r22
     45a:	ae 5b       	subi	r26, 0xBE	; 190
     45c:	bf 4f       	sbci	r27, 0xFF	; 255
     45e:	4d 91       	ld	r20, X+
     460:	5c 91       	ld	r21, X
     462:	11 97       	sbiw	r26, 0x01	; 1
     464:	24 17       	cp	r18, r20
     466:	35 07       	cpc	r19, r21
     468:	39 f0       	breq	.+14     	; 0x478 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
     46a:	a0 81       	ld	r26, Z
     46c:	b1 81       	ldd	r27, Z+1	; 0x01
     46e:	a6 0f       	add	r26, r22
     470:	b7 1f       	adc	r27, r23
     472:	8c 93       	st	X, r24
    buffer->head = i;
     474:	31 83       	std	Z+1, r19	; 0x01
     476:	20 83       	st	Z, r18
     478:	08 95       	ret

0000047a <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     47a:	08 95       	ret

0000047c <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     49e:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
     4a2:	61 eb       	ldi	r22, 0xB1	; 177
     4a4:	71 e0       	ldi	r23, 0x01	; 1
     4a6:	0e 94 23 02 	call	0x446	; 0x446 <_Z10store_charhP11ring_buffer>
  }
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	bf 91       	pop	r27
     4b0:	af 91       	pop	r26
     4b2:	9f 91       	pop	r25
     4b4:	8f 91       	pop	r24
     4b6:	7f 91       	pop	r23
     4b8:	6f 91       	pop	r22
     4ba:	5f 91       	pop	r21
     4bc:	4f 91       	pop	r20
     4be:	3f 91       	pop	r19
     4c0:	2f 91       	pop	r18
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     4cc:	89 e3       	ldi	r24, 0x39	; 57
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0e 94 85 01 	call	0x30a	; 0x30a <_ZN14HardwareSerial9availableEv>
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	11 f0       	breq	.+4      	; 0x4dc <_Z14serialEventRunv+0x10>
     4d8:	0e 94 3d 02 	call	0x47a	; 0x47a <_Z11serialEventv>
     4dc:	08 95       	ret

000004de <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	5f 93       	push	r21
     4ee:	6f 93       	push	r22
     4f0:	7f 93       	push	r23
     4f2:	8f 93       	push	r24
     4f4:	9f 93       	push	r25
     4f6:	af 93       	push	r26
     4f8:	bf 93       	push	r27
     4fa:	ef 93       	push	r30
     4fc:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     4fe:	20 91 35 02 	lds	r18, 0x0235
     502:	30 91 36 02 	lds	r19, 0x0236
     506:	80 91 37 02 	lds	r24, 0x0237
     50a:	90 91 38 02 	lds	r25, 0x0238
     50e:	28 17       	cp	r18, r24
     510:	39 07       	cpc	r19, r25
     512:	31 f4       	brne	.+12     	; 0x520 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     514:	80 91 c1 00 	lds	r24, 0x00C1
     518:	8f 7d       	andi	r24, 0xDF	; 223
     51a:	80 93 c1 00 	sts	0x00C1, r24
     51e:	16 c0       	rjmp	.+44     	; 0x54c <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     520:	e0 91 37 02 	lds	r30, 0x0237
     524:	f0 91 38 02 	lds	r31, 0x0238
     528:	eb 50       	subi	r30, 0x0B	; 11
     52a:	fe 4f       	sbci	r31, 0xFE	; 254
     52c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     52e:	80 91 37 02 	lds	r24, 0x0237
     532:	90 91 38 02 	lds	r25, 0x0238
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	60 e4       	ldi	r22, 0x40	; 64
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 16 06 	call	0xc2c	; 0xc2c <__divmodhi4>
     540:	90 93 38 02 	sts	0x0238, r25
     544:	80 93 37 02 	sts	0x0237, r24
	
  #if defined(UDR0)
    UDR0 = c;
     548:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     54c:	ff 91       	pop	r31
     54e:	ef 91       	pop	r30
     550:	bf 91       	pop	r27
     552:	af 91       	pop	r26
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	7f 91       	pop	r23
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	3f 91       	pop	r19
     560:	2f 91       	pop	r18
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	ec 01       	movw	r28, r24
     57c:	7a 01       	movw	r14, r20
     57e:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     580:	dd 24       	eor	r13, r13
     582:	d3 94       	inc	r13
     584:	40 30       	cpi	r20, 0x00	; 0
     586:	81 ee       	ldi	r24, 0xE1	; 225
     588:	58 07       	cpc	r21, r24
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	68 07       	cpc	r22, r24
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	78 07       	cpc	r23, r24
     592:	49 f4       	brne	.+18     	; 0x5a6 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     594:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     596:	ec 89       	ldd	r30, Y+20	; 0x14
     598:	fd 89       	ldd	r31, Y+21	; 0x15
     59a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     59c:	60 e8       	ldi	r22, 0x80	; 128
     59e:	74 e8       	ldi	r23, 0x84	; 132
     5a0:	8e e1       	ldi	r24, 0x1E	; 30
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0f c0       	rjmp	.+30     	; 0x5c4 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     5a6:	ec 89       	ldd	r30, Y+20	; 0x14
     5a8:	fd 89       	ldd	r31, Y+21	; 0x15
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 8c       	ldd	r0, Y+30	; 0x1e
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <_ZN14HardwareSerial5beginEm+0x4a>
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	0a 94       	dec	r0
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <_ZN14HardwareSerial5beginEm+0x46>
     5ba:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	79 e0       	ldi	r23, 0x09	; 9
     5c0:	8d e3       	ldi	r24, 0x3D	; 61
     5c2:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     5c4:	a8 01       	movw	r20, r16
     5c6:	97 01       	movw	r18, r14
     5c8:	0e 94 29 06 	call	0xc52	; 0xc52 <__udivmodsi4>
     5cc:	21 50       	subi	r18, 0x01	; 1
     5ce:	30 40       	sbci	r19, 0x00	; 0
     5d0:	40 40       	sbci	r20, 0x00	; 0
     5d2:	50 40       	sbci	r21, 0x00	; 0
     5d4:	56 95       	lsr	r21
     5d6:	47 95       	ror	r20
     5d8:	37 95       	ror	r19
     5da:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     5dc:	80 e1       	ldi	r24, 0x10	; 16
     5de:	20 30       	cpi	r18, 0x00	; 0
     5e0:	38 07       	cpc	r19, r24
     5e2:	10 f0       	brcs	.+4      	; 0x5e8 <_ZN14HardwareSerial5beginEm+0x7c>
     5e4:	dd 20       	and	r13, r13
     5e6:	b1 f6       	brne	.-84     	; 0x594 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     5e8:	e8 89       	ldd	r30, Y+16	; 0x10
     5ea:	f9 89       	ldd	r31, Y+17	; 0x11
     5ec:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     5ee:	ea 89       	ldd	r30, Y+18	; 0x12
     5f0:	fb 89       	ldd	r31, Y+19	; 0x13
     5f2:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     5f4:	ee 89       	ldd	r30, Y+22	; 0x16
     5f6:	ff 89       	ldd	r31, Y+23	; 0x17
     5f8:	40 81       	ld	r20, Z
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	9c 01       	movw	r18, r24
     600:	0a 8c       	ldd	r0, Y+26	; 0x1a
     602:	02 c0       	rjmp	.+4      	; 0x608 <_ZN14HardwareSerial5beginEm+0x9c>
     604:	22 0f       	add	r18, r18
     606:	33 1f       	adc	r19, r19
     608:	0a 94       	dec	r0
     60a:	e2 f7       	brpl	.-8      	; 0x604 <_ZN14HardwareSerial5beginEm+0x98>
     60c:	42 2b       	or	r20, r18
     60e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     610:	ee 89       	ldd	r30, Y+22	; 0x16
     612:	ff 89       	ldd	r31, Y+23	; 0x17
     614:	40 81       	ld	r20, Z
     616:	9c 01       	movw	r18, r24
     618:	0b 8c       	ldd	r0, Y+27	; 0x1b
     61a:	02 c0       	rjmp	.+4      	; 0x620 <_ZN14HardwareSerial5beginEm+0xb4>
     61c:	22 0f       	add	r18, r18
     61e:	33 1f       	adc	r19, r19
     620:	0a 94       	dec	r0
     622:	e2 f7       	brpl	.-8      	; 0x61c <_ZN14HardwareSerial5beginEm+0xb0>
     624:	42 2b       	or	r20, r18
     626:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     628:	ee 89       	ldd	r30, Y+22	; 0x16
     62a:	ff 89       	ldd	r31, Y+23	; 0x17
     62c:	40 81       	ld	r20, Z
     62e:	9c 01       	movw	r18, r24
     630:	0c 8c       	ldd	r0, Y+28	; 0x1c
     632:	02 c0       	rjmp	.+4      	; 0x638 <_ZN14HardwareSerial5beginEm+0xcc>
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	0a 94       	dec	r0
     63a:	e2 f7       	brpl	.-8      	; 0x634 <_ZN14HardwareSerial5beginEm+0xc8>
     63c:	42 2b       	or	r20, r18
     63e:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     640:	ee 89       	ldd	r30, Y+22	; 0x16
     642:	ff 89       	ldd	r31, Y+23	; 0x17
     644:	20 81       	ld	r18, Z
     646:	0d 8c       	ldd	r0, Y+29	; 0x1d
     648:	02 c0       	rjmp	.+4      	; 0x64e <_ZN14HardwareSerial5beginEm+0xe2>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	0a 94       	dec	r0
     650:	e2 f7       	brpl	.-8      	; 0x64a <_ZN14HardwareSerial5beginEm+0xde>
     652:	80 95       	com	r24
     654:	82 23       	and	r24, r18
     656:	80 83       	st	Z, r24
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	08 95       	ret

00000668 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     668:	10 92 3c 02 	sts	0x023C, r1
     66c:	10 92 3b 02 	sts	0x023B, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     670:	88 ee       	ldi	r24, 0xE8	; 232
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	a0 e0       	ldi	r26, 0x00	; 0
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	80 93 3d 02 	sts	0x023D, r24
     67c:	90 93 3e 02 	sts	0x023E, r25
     680:	a0 93 3f 02 	sts	0x023F, r26
     684:	b0 93 40 02 	sts	0x0240, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     688:	eb e3       	ldi	r30, 0x3B	; 59
     68a:	f2 e0       	ldi	r31, 0x02	; 2
     68c:	85 e6       	ldi	r24, 0x65	; 101
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	92 93       	st	-Z, r25
     692:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     694:	81 eb       	ldi	r24, 0xB1	; 177
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	95 87       	std	Z+13, r25	; 0x0d
     69a:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     69c:	85 ef       	ldi	r24, 0xF5	; 245
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	97 87       	std	Z+15, r25	; 0x0f
     6a2:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     6a4:	85 ec       	ldi	r24, 0xC5	; 197
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	91 8b       	std	Z+17, r25	; 0x11
     6aa:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     6ac:	84 ec       	ldi	r24, 0xC4	; 196
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	93 8b       	std	Z+19, r25	; 0x13
     6b2:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     6b4:	80 ec       	ldi	r24, 0xC0	; 192
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	95 8b       	std	Z+21, r25	; 0x15
     6ba:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     6bc:	81 ec       	ldi	r24, 0xC1	; 193
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	97 8b       	std	Z+23, r25	; 0x17
     6c2:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     6c4:	86 ec       	ldi	r24, 0xC6	; 198
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	91 8f       	std	Z+25, r25	; 0x19
     6ca:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     6cc:	84 e0       	ldi	r24, 0x04	; 4
     6ce:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     6d4:	87 e0       	ldi	r24, 0x07	; 7
     6d6:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     6d8:	85 e0       	ldi	r24, 0x05	; 5
     6da:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     6e0:	08 95       	ret

000006e2 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     6e2:	8f 92       	push	r8
     6e4:	9f 92       	push	r9
     6e6:	af 92       	push	r10
     6e8:	bf 92       	push	r11
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	4c 01       	movw	r8, r24
     6fc:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	a8 2e       	mov	r10, r24
     702:	b1 2c       	mov	r11, r1
     704:	a8 0c       	add	r10, r8
     706:	b9 1c       	adc	r11, r9
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     708:	c0 e0       	ldi	r28, 0x00	; 0
     70a:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     70c:	cc 24       	eor	r12, r12
     70e:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     710:	f5 01       	movw	r30, r10
     712:	61 91       	ld	r22, Z+
     714:	5f 01       	movw	r10, r30
     716:	c7 01       	movw	r24, r14
     718:	4a e0       	ldi	r20, 0x0A	; 10
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN5Print5printEhi>
     720:	8c 01       	movw	r16, r24
        n += p.print('.');
     722:	c7 01       	movw	r24, r14
     724:	6e e2       	ldi	r22, 0x2E	; 46
     726:	0e 94 14 04 	call	0x828	; 0x828 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     72a:	08 0f       	add	r16, r24
     72c:	19 1f       	adc	r17, r25
        n += p.print('.');
     72e:	c0 0e       	add	r12, r16
     730:	d1 1e       	adc	r13, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     732:	21 96       	adiw	r28, 0x01	; 1
     734:	c3 30       	cpi	r28, 0x03	; 3
     736:	d1 05       	cpc	r29, r1
     738:	59 f7       	brne	.-42     	; 0x710 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
     73a:	c7 01       	movw	r24, r14
     73c:	f4 01       	movw	r30, r8
     73e:	65 81       	ldd	r22, Z+5	; 0x05
     740:	4a e0       	ldi	r20, 0x0A	; 10
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN5Print5printEhi>
     748:	c8 0e       	add	r12, r24
     74a:	d9 1e       	adc	r13, r25
    return n;
}
     74c:	c6 01       	movw	r24, r12
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	08 95       	ret

00000768 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
     768:	fc 01       	movw	r30, r24
     76a:	85 e7       	ldi	r24, 0x75	; 117
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	91 83       	std	Z+1, r25	; 0x01
     770:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
     772:	12 82       	std	Z+2, r1	; 0x02
     774:	13 82       	std	Z+3, r1	; 0x03
     776:	14 82       	std	Z+4, r1	; 0x04
     778:	15 82       	std	Z+5, r1	; 0x05
}
     77a:	08 95       	ret

0000077c <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     77c:	0f 93       	push	r16
     77e:	fc 01       	movw	r30, r24
     780:	85 e7       	ldi	r24, 0x75	; 117
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
     788:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
     78a:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
     78c:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
     78e:	05 83       	std	Z+5, r16	; 0x05
}
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     794:	85 e7       	ldi	r24, 0x75	; 117
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	90 93 59 02 	sts	0x0259, r25
     79c:	80 93 58 02 	sts	0x0258, r24
{
    _address[0] = first_octet;
     7a0:	10 92 5a 02 	sts	0x025A, r1
    _address[1] = second_octet;
     7a4:	10 92 5b 02 	sts	0x025B, r1
    _address[2] = third_octet;
     7a8:	10 92 5c 02 	sts	0x025C, r1
    _address[3] = fourth_octet;
     7ac:	10 92 5d 02 	sts	0x025D, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
     7b0:	08 95       	ret

000007b2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	6c 01       	movw	r12, r24
     7c4:	7b 01       	movw	r14, r22
     7c6:	8a 01       	movw	r16, r20
  size_t n = 0;
     7c8:	c0 e0       	ldi	r28, 0x00	; 0
     7ca:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     7cc:	0f c0       	rjmp	.+30     	; 0x7ec <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
     7ce:	d7 01       	movw	r26, r14
     7d0:	6d 91       	ld	r22, X+
     7d2:	7d 01       	movw	r14, r26
     7d4:	d6 01       	movw	r26, r12
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
     7da:	01 90       	ld	r0, Z+
     7dc:	f0 81       	ld	r31, Z
     7de:	e0 2d       	mov	r30, r0
     7e0:	c6 01       	movw	r24, r12
     7e2:	09 95       	icall
     7e4:	c8 0f       	add	r28, r24
     7e6:	d9 1f       	adc	r29, r25
     7e8:	01 50       	subi	r16, 0x01	; 1
     7ea:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     7ec:	01 15       	cp	r16, r1
     7ee:	11 05       	cpc	r17, r1
     7f0:	71 f7       	brne	.-36     	; 0x7ce <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     7f2:	ce 01       	movw	r24, r28
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	08 95       	ret

00000806 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     806:	db 01       	movw	r26, r22
     808:	0d 90       	ld	r0, X+
     80a:	00 20       	and	r0, r0
     80c:	e9 f7       	brne	.-6      	; 0x808 <_ZN5Print5writeEPKc+0x2>
     80e:	ad 01       	movw	r20, r26
     810:	41 50       	subi	r20, 0x01	; 1
     812:	50 40       	sbci	r21, 0x00	; 0
     814:	46 1b       	sub	r20, r22
     816:	57 0b       	sbc	r21, r23
     818:	dc 01       	movw	r26, r24
     81a:	ed 91       	ld	r30, X+
     81c:	fc 91       	ld	r31, X
     81e:	02 80       	ldd	r0, Z+2	; 0x02
     820:	f3 81       	ldd	r31, Z+3	; 0x03
     822:	e0 2d       	mov	r30, r0
     824:	09 95       	icall
     826:	08 95       	ret

00000828 <_ZN5Print5printEc>:
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
     828:	dc 01       	movw	r26, r24
     82a:	ed 91       	ld	r30, X+
     82c:	fc 91       	ld	r31, X
     82e:	01 90       	ld	r0, Z+
     830:	f0 81       	ld	r31, Z
     832:	e0 2d       	mov	r30, r0
     834:	09 95       	icall
    size_t println(long, int = DEC);
     836:	08 95       	ret

00000838 <_ZN5Print11printNumberEmh>:
     838:	8f 92       	push	r8
     83a:	9f 92       	push	r9
     83c:	af 92       	push	r10
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	a1 97       	sbiw	r28, 0x21	; 33
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	6c 01       	movw	r12, r24
     862:	04 2f       	mov	r16, r20
     864:	e5 2f       	mov	r30, r21
     866:	cb 01       	movw	r24, r22
     868:	12 2f       	mov	r17, r18
     86a:	19 a2       	std	Y+33, r1	; 0x21
     86c:	22 30       	cpi	r18, 0x02	; 2
     86e:	08 f4       	brcc	.+2      	; 0x872 <_ZN5Print11printNumberEmh+0x3a>
     870:	1a e0       	ldi	r17, 0x0A	; 10
     872:	21 e2       	ldi	r18, 0x21	; 33
     874:	e2 2e       	mov	r14, r18
     876:	f1 2c       	mov	r15, r1
     878:	ec 0e       	add	r14, r28
     87a:	fd 1e       	adc	r15, r29
     87c:	81 2e       	mov	r8, r17
     87e:	99 24       	eor	r9, r9
     880:	aa 24       	eor	r10, r10
     882:	bb 24       	eor	r11, r11
     884:	03 c0       	rjmp	.+6      	; 0x88c <_ZN5Print11printNumberEmh+0x54>
     886:	02 2f       	mov	r16, r18
     888:	e3 2f       	mov	r30, r19
     88a:	ca 01       	movw	r24, r20
     88c:	60 2f       	mov	r22, r16
     88e:	7e 2f       	mov	r23, r30
     890:	a5 01       	movw	r20, r10
     892:	94 01       	movw	r18, r8
     894:	0e 94 29 06 	call	0xc52	; 0xc52 <__udivmodsi4>
     898:	12 9f       	mul	r17, r18
     89a:	80 2d       	mov	r24, r0
     89c:	11 24       	eor	r1, r1
     89e:	08 1b       	sub	r16, r24
     8a0:	08 94       	sec
     8a2:	e1 08       	sbc	r14, r1
     8a4:	f1 08       	sbc	r15, r1
     8a6:	0a 30       	cpi	r16, 0x0A	; 10
     8a8:	14 f4       	brge	.+4      	; 0x8ae <_ZN5Print11printNumberEmh+0x76>
     8aa:	00 5d       	subi	r16, 0xD0	; 208
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <_ZN5Print11printNumberEmh+0x78>
     8ae:	09 5c       	subi	r16, 0xC9	; 201
     8b0:	f7 01       	movw	r30, r14
     8b2:	00 83       	st	Z, r16
     8b4:	21 15       	cp	r18, r1
     8b6:	31 05       	cpc	r19, r1
     8b8:	41 05       	cpc	r20, r1
     8ba:	51 05       	cpc	r21, r1
     8bc:	21 f7       	brne	.-56     	; 0x886 <_ZN5Print11printNumberEmh+0x4e>
     8be:	c6 01       	movw	r24, r12
     8c0:	b7 01       	movw	r22, r14
     8c2:	0e 94 03 04 	call	0x806	; 0x806 <_ZN5Print5writeEPKc>
     8c6:	a1 96       	adiw	r28, 0x21	; 33
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	cf 91       	pop	r28
     8d4:	df 91       	pop	r29
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	08 95       	ret

000008ec <_ZN5Print5printEmi>:
     8ec:	21 15       	cp	r18, r1
     8ee:	31 05       	cpc	r19, r1
     8f0:	49 f4       	brne	.+18     	; 0x904 <__stack+0x5>
     8f2:	dc 01       	movw	r26, r24
     8f4:	ed 91       	ld	r30, X+
     8f6:	fc 91       	ld	r31, X
     8f8:	01 90       	ld	r0, Z+
     8fa:	f0 81       	ld	r31, Z
     8fc:	e0 2d       	mov	r30, r0
     8fe:	64 2f       	mov	r22, r20
     900:	09 95       	icall
     902:	08 95       	ret
     904:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN5Print11printNumberEmh>
     908:	08 95       	ret

0000090a <_ZN5Print5printEhi>:
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
     90a:	9a 01       	movw	r18, r20
    size_t println(void);
     90c:	46 2f       	mov	r20, r22
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN5Print5printEmi>
};
     918:	08 95       	ret

0000091a <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	29 f0       	breq	.+10     	; 0x928 <_Z10randomSeedj+0xe>
    srandom(seed);
     91e:	bc 01       	movw	r22, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 ff 07 	call	0xffe	; 0xffe <srandom>
     928:	08 95       	ret

0000092a <_Z6randoml>:
  }
}

long random(long howbig)
{
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	7b 01       	movw	r14, r22
     934:	8c 01       	movw	r16, r24
  if (howbig == 0) {
     936:	61 15       	cp	r22, r1
     938:	71 05       	cpc	r23, r1
     93a:	81 05       	cpc	r24, r1
     93c:	91 05       	cpc	r25, r1
     93e:	49 f0       	breq	.+18     	; 0x952 <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
     940:	0e 94 fa 07 	call	0xff4	; 0xff4 <random>
     944:	a8 01       	movw	r20, r16
     946:	97 01       	movw	r18, r14
     948:	0e 94 4b 06 	call	0xc96	; 0xc96 <__divmodsi4>
     94c:	9b 01       	movw	r18, r22
     94e:	ac 01       	movw	r20, r24
     950:	03 c0       	rjmp	.+6      	; 0x958 <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
     958:	b9 01       	movw	r22, r18
     95a:	ca 01       	movw	r24, r20
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	08 95       	ret

00000966 <main>:
#include <Arduino.h>

int main(void)
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
	init();
     96a:	0e 94 5e 05 	call	0xabc	; 0xabc <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     96e:	0e 94 bd 00 	call	0x17a	; 0x17a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     972:	c6 e6       	ldi	r28, 0x66	; 102
     974:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     976:	0e 94 cb 00 	call	0x196	; 0x196 <loop>
		if (serialEventRun) serialEventRun();
     97a:	20 97       	sbiw	r28, 0x00	; 0
     97c:	e1 f3       	breq	.-8      	; 0x976 <main+0x10>
     97e:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z14serialEventRunv>
     982:	f9 cf       	rjmp	.-14     	; 0x976 <main+0x10>

00000984 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
     984:	0e 94 80 06 	call	0xd00	; 0xd00 <malloc>
}
     988:	08 95       	ret

0000098a <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
     98a:	0e 94 1a 07 	call	0xe34	; 0xe34 <free>
} 
     98e:	08 95       	ret

00000990 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
     990:	08 95       	ret

00000992 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	8f 93       	push	r24
     9a2:	9f 93       	push	r25
     9a4:	af 93       	push	r26
     9a6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     9a8:	80 91 62 02 	lds	r24, 0x0262
     9ac:	90 91 63 02 	lds	r25, 0x0263
     9b0:	a0 91 64 02 	lds	r26, 0x0264
     9b4:	b0 91 65 02 	lds	r27, 0x0265
	unsigned char f = timer0_fract;
     9b8:	30 91 66 02 	lds	r19, 0x0266

	m += MILLIS_INC;
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	a1 1d       	adc	r26, r1
     9c0:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     9c2:	23 2f       	mov	r18, r19
     9c4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     9c6:	2d 37       	cpi	r18, 0x7D	; 125
     9c8:	20 f0       	brcs	.+8      	; 0x9d2 <__vector_16+0x40>
		f -= FRACT_MAX;
     9ca:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	a1 1d       	adc	r26, r1
     9d0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     9d2:	20 93 66 02 	sts	0x0266, r18
	timer0_millis = m;
     9d6:	80 93 62 02 	sts	0x0262, r24
     9da:	90 93 63 02 	sts	0x0263, r25
     9de:	a0 93 64 02 	sts	0x0264, r26
     9e2:	b0 93 65 02 	sts	0x0265, r27
	timer0_overflow_count++;
     9e6:	80 91 5e 02 	lds	r24, 0x025E
     9ea:	90 91 5f 02 	lds	r25, 0x025F
     9ee:	a0 91 60 02 	lds	r26, 0x0260
     9f2:	b0 91 61 02 	lds	r27, 0x0261
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	a1 1d       	adc	r26, r1
     9fa:	b1 1d       	adc	r27, r1
     9fc:	80 93 5e 02 	sts	0x025E, r24
     a00:	90 93 5f 02 	sts	0x025F, r25
     a04:	a0 93 60 02 	sts	0x0260, r26
     a08:	b0 93 61 02 	sts	0x0261, r27
}
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	0f 90       	pop	r0
     a1e:	1f 90       	pop	r1
     a20:	18 95       	reti

00000a22 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     a22:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     a24:	f8 94       	cli
	m = timer0_overflow_count;
     a26:	20 91 5e 02 	lds	r18, 0x025E
     a2a:	30 91 5f 02 	lds	r19, 0x025F
     a2e:	40 91 60 02 	lds	r20, 0x0260
     a32:	50 91 61 02 	lds	r21, 0x0261
#if defined(TCNT0)
	t = TCNT0;
     a36:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a38:	a8 9b       	sbis	0x15, 0	; 21
     a3a:	06 c0       	rjmp	.+12     	; 0xa48 <micros+0x26>
     a3c:	8f 3f       	cpi	r24, 0xFF	; 255
     a3e:	21 f0       	breq	.+8      	; 0xa48 <micros+0x26>
		m++;
     a40:	2f 5f       	subi	r18, 0xFF	; 255
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     a48:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     a4a:	54 2f       	mov	r21, r20
     a4c:	43 2f       	mov	r20, r19
     a4e:	32 2f       	mov	r19, r18
     a50:	22 27       	eor	r18, r18
     a52:	28 0f       	add	r18, r24
     a54:	31 1d       	adc	r19, r1
     a56:	41 1d       	adc	r20, r1
     a58:	51 1d       	adc	r21, r1
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	44 1f       	adc	r20, r20
     a62:	55 1f       	adc	r21, r21
     a64:	8a 95       	dec	r24
     a66:	d1 f7       	brne	.-12     	; 0xa5c <micros+0x3a>
}
     a68:	b9 01       	movw	r22, r18
     a6a:	ca 01       	movw	r24, r20
     a6c:	08 95       	ret

00000a6e <delay>:

void delay(unsigned long ms)
{
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     a7e:	0e 94 11 05 	call	0xa22	; 0xa22 <micros>
     a82:	eb 01       	movw	r28, r22

	while (ms > 0) {
     a84:	0f c0       	rjmp	.+30     	; 0xaa4 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     a86:	0e 94 11 05 	call	0xa22	; 0xa22 <micros>
     a8a:	6c 1b       	sub	r22, r28
     a8c:	7d 0b       	sbc	r23, r29
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	68 3e       	cpi	r22, 0xE8	; 232
     a92:	78 07       	cpc	r23, r24
     a94:	38 f0       	brcs	.+14     	; 0xaa4 <delay+0x36>
			ms--;
     a96:	08 94       	sec
     a98:	e1 08       	sbc	r14, r1
     a9a:	f1 08       	sbc	r15, r1
     a9c:	01 09       	sbc	r16, r1
     a9e:	11 09       	sbc	r17, r1
			start += 1000;
     aa0:	c8 51       	subi	r28, 0x18	; 24
     aa2:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     aa4:	e1 14       	cp	r14, r1
     aa6:	f1 04       	cpc	r15, r1
     aa8:	01 05       	cpc	r16, r1
     aaa:	11 05       	cpc	r17, r1
     aac:	61 f7       	brne	.-40     	; 0xa86 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	08 95       	ret

00000abc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     abc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     abe:	84 b5       	in	r24, 0x24	; 36
     ac0:	82 60       	ori	r24, 0x02	; 2
     ac2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ac4:	84 b5       	in	r24, 0x24	; 36
     ac6:	81 60       	ori	r24, 0x01	; 1
     ac8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     aca:	85 b5       	in	r24, 0x25	; 37
     acc:	82 60       	ori	r24, 0x02	; 2
     ace:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ad0:	85 b5       	in	r24, 0x25	; 37
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ad6:	ee e6       	ldi	r30, 0x6E	; 110
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ae0:	e1 e8       	ldi	r30, 0x81	; 129
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ae6:	80 81       	ld	r24, Z
     ae8:	82 60       	ori	r24, 0x02	; 2
     aea:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     aec:	80 81       	ld	r24, Z
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     af2:	e0 e8       	ldi	r30, 0x80	; 128
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     afc:	e1 eb       	ldi	r30, 0xB1	; 177
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	84 60       	ori	r24, 0x04	; 4
     b04:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     b06:	e0 eb       	ldi	r30, 0xB0	; 176
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	81 60       	ori	r24, 0x01	; 1
     b0e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     b10:	ea e7       	ldi	r30, 0x7A	; 122
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	84 60       	ori	r24, 0x04	; 4
     b18:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     b1a:	80 81       	ld	r24, Z
     b1c:	82 60       	ori	r24, 0x02	; 2
     b1e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     b20:	80 81       	ld	r24, Z
     b22:	81 60       	ori	r24, 0x01	; 1
     b24:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b26:	80 81       	ld	r24, Z
     b28:	80 68       	ori	r24, 0x80	; 128
     b2a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b2c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     b30:	08 95       	ret

00000b32 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     b32:	8e 30       	cpi	r24, 0x0E	; 14
     b34:	08 f0       	brcs	.+2      	; 0xb38 <analogRead+0x6>
     b36:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     b38:	87 70       	andi	r24, 0x07	; 7
     b3a:	90 91 30 01 	lds	r25, 0x0130
     b3e:	92 95       	swap	r25
     b40:	99 0f       	add	r25, r25
     b42:	99 0f       	add	r25, r25
     b44:	90 7c       	andi	r25, 0xC0	; 192
     b46:	98 2b       	or	r25, r24
     b48:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     b4c:	80 91 7a 00 	lds	r24, 0x007A
     b50:	80 64       	ori	r24, 0x40	; 64
     b52:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     b56:	80 91 7a 00 	lds	r24, 0x007A
     b5a:	86 fd       	sbrc	r24, 6
     b5c:	fc cf       	rjmp	.-8      	; 0xb56 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     b5e:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     b62:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     b66:	93 2f       	mov	r25, r19
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	28 2b       	or	r18, r24
     b6e:	39 2b       	or	r19, r25
}
     b70:	c9 01       	movw	r24, r18
     b72:	08 95       	ret

00000b74 <__floatunsisf>:
     b74:	e8 94       	clt
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <__floatsisf+0x12>

00000b78 <__floatsisf>:
     b78:	97 fb       	bst	r25, 7
     b7a:	3e f4       	brtc	.+14     	; 0xb8a <__floatsisf+0x12>
     b7c:	90 95       	com	r25
     b7e:	80 95       	com	r24
     b80:	70 95       	com	r23
     b82:	61 95       	neg	r22
     b84:	7f 4f       	sbci	r23, 0xFF	; 255
     b86:	8f 4f       	sbci	r24, 0xFF	; 255
     b88:	9f 4f       	sbci	r25, 0xFF	; 255
     b8a:	99 23       	and	r25, r25
     b8c:	a9 f0       	breq	.+42     	; 0xbb8 <__floatsisf+0x40>
     b8e:	f9 2f       	mov	r31, r25
     b90:	96 e9       	ldi	r25, 0x96	; 150
     b92:	bb 27       	eor	r27, r27
     b94:	93 95       	inc	r25
     b96:	f6 95       	lsr	r31
     b98:	87 95       	ror	r24
     b9a:	77 95       	ror	r23
     b9c:	67 95       	ror	r22
     b9e:	b7 95       	ror	r27
     ba0:	f1 11       	cpse	r31, r1
     ba2:	f8 cf       	rjmp	.-16     	; 0xb94 <__floatsisf+0x1c>
     ba4:	fa f4       	brpl	.+62     	; 0xbe4 <__floatsisf+0x6c>
     ba6:	bb 0f       	add	r27, r27
     ba8:	11 f4       	brne	.+4      	; 0xbae <__floatsisf+0x36>
     baa:	60 ff       	sbrs	r22, 0
     bac:	1b c0       	rjmp	.+54     	; 0xbe4 <__floatsisf+0x6c>
     bae:	6f 5f       	subi	r22, 0xFF	; 255
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	8f 4f       	sbci	r24, 0xFF	; 255
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	16 c0       	rjmp	.+44     	; 0xbe4 <__floatsisf+0x6c>
     bb8:	88 23       	and	r24, r24
     bba:	11 f0       	breq	.+4      	; 0xbc0 <__floatsisf+0x48>
     bbc:	96 e9       	ldi	r25, 0x96	; 150
     bbe:	11 c0       	rjmp	.+34     	; 0xbe2 <__floatsisf+0x6a>
     bc0:	77 23       	and	r23, r23
     bc2:	21 f0       	breq	.+8      	; 0xbcc <__floatsisf+0x54>
     bc4:	9e e8       	ldi	r25, 0x8E	; 142
     bc6:	87 2f       	mov	r24, r23
     bc8:	76 2f       	mov	r23, r22
     bca:	05 c0       	rjmp	.+10     	; 0xbd6 <__floatsisf+0x5e>
     bcc:	66 23       	and	r22, r22
     bce:	71 f0       	breq	.+28     	; 0xbec <__floatsisf+0x74>
     bd0:	96 e8       	ldi	r25, 0x86	; 134
     bd2:	86 2f       	mov	r24, r22
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	2a f0       	brmi	.+10     	; 0xbe4 <__floatsisf+0x6c>
     bda:	9a 95       	dec	r25
     bdc:	66 0f       	add	r22, r22
     bde:	77 1f       	adc	r23, r23
     be0:	88 1f       	adc	r24, r24
     be2:	da f7       	brpl	.-10     	; 0xbda <__floatsisf+0x62>
     be4:	88 0f       	add	r24, r24
     be6:	96 95       	lsr	r25
     be8:	87 95       	ror	r24
     bea:	97 f9       	bld	r25, 7
     bec:	08 95       	ret

00000bee <__mulsi3>:
     bee:	62 9f       	mul	r22, r18
     bf0:	d0 01       	movw	r26, r0
     bf2:	73 9f       	mul	r23, r19
     bf4:	f0 01       	movw	r30, r0
     bf6:	82 9f       	mul	r24, r18
     bf8:	e0 0d       	add	r30, r0
     bfa:	f1 1d       	adc	r31, r1
     bfc:	64 9f       	mul	r22, r20
     bfe:	e0 0d       	add	r30, r0
     c00:	f1 1d       	adc	r31, r1
     c02:	92 9f       	mul	r25, r18
     c04:	f0 0d       	add	r31, r0
     c06:	83 9f       	mul	r24, r19
     c08:	f0 0d       	add	r31, r0
     c0a:	74 9f       	mul	r23, r20
     c0c:	f0 0d       	add	r31, r0
     c0e:	65 9f       	mul	r22, r21
     c10:	f0 0d       	add	r31, r0
     c12:	99 27       	eor	r25, r25
     c14:	72 9f       	mul	r23, r18
     c16:	b0 0d       	add	r27, r0
     c18:	e1 1d       	adc	r30, r1
     c1a:	f9 1f       	adc	r31, r25
     c1c:	63 9f       	mul	r22, r19
     c1e:	b0 0d       	add	r27, r0
     c20:	e1 1d       	adc	r30, r1
     c22:	f9 1f       	adc	r31, r25
     c24:	bd 01       	movw	r22, r26
     c26:	cf 01       	movw	r24, r30
     c28:	11 24       	eor	r1, r1
     c2a:	08 95       	ret

00000c2c <__divmodhi4>:
     c2c:	97 fb       	bst	r25, 7
     c2e:	09 2e       	mov	r0, r25
     c30:	07 26       	eor	r0, r23
     c32:	0a d0       	rcall	.+20     	; 0xc48 <__divmodhi4_neg1>
     c34:	77 fd       	sbrc	r23, 7
     c36:	04 d0       	rcall	.+8      	; 0xc40 <__divmodhi4_neg2>
     c38:	49 d0       	rcall	.+146    	; 0xccc <__udivmodhi4>
     c3a:	06 d0       	rcall	.+12     	; 0xc48 <__divmodhi4_neg1>
     c3c:	00 20       	and	r0, r0
     c3e:	1a f4       	brpl	.+6      	; 0xc46 <__divmodhi4_exit>

00000c40 <__divmodhi4_neg2>:
     c40:	70 95       	com	r23
     c42:	61 95       	neg	r22
     c44:	7f 4f       	sbci	r23, 0xFF	; 255

00000c46 <__divmodhi4_exit>:
     c46:	08 95       	ret

00000c48 <__divmodhi4_neg1>:
     c48:	f6 f7       	brtc	.-4      	; 0xc46 <__divmodhi4_exit>
     c4a:	90 95       	com	r25
     c4c:	81 95       	neg	r24
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	08 95       	ret

00000c52 <__udivmodsi4>:
     c52:	a1 e2       	ldi	r26, 0x21	; 33
     c54:	1a 2e       	mov	r1, r26
     c56:	aa 1b       	sub	r26, r26
     c58:	bb 1b       	sub	r27, r27
     c5a:	fd 01       	movw	r30, r26
     c5c:	0d c0       	rjmp	.+26     	; 0xc78 <__udivmodsi4_ep>

00000c5e <__udivmodsi4_loop>:
     c5e:	aa 1f       	adc	r26, r26
     c60:	bb 1f       	adc	r27, r27
     c62:	ee 1f       	adc	r30, r30
     c64:	ff 1f       	adc	r31, r31
     c66:	a2 17       	cp	r26, r18
     c68:	b3 07       	cpc	r27, r19
     c6a:	e4 07       	cpc	r30, r20
     c6c:	f5 07       	cpc	r31, r21
     c6e:	20 f0       	brcs	.+8      	; 0xc78 <__udivmodsi4_ep>
     c70:	a2 1b       	sub	r26, r18
     c72:	b3 0b       	sbc	r27, r19
     c74:	e4 0b       	sbc	r30, r20
     c76:	f5 0b       	sbc	r31, r21

00000c78 <__udivmodsi4_ep>:
     c78:	66 1f       	adc	r22, r22
     c7a:	77 1f       	adc	r23, r23
     c7c:	88 1f       	adc	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	1a 94       	dec	r1
     c82:	69 f7       	brne	.-38     	; 0xc5e <__udivmodsi4_loop>
     c84:	60 95       	com	r22
     c86:	70 95       	com	r23
     c88:	80 95       	com	r24
     c8a:	90 95       	com	r25
     c8c:	9b 01       	movw	r18, r22
     c8e:	ac 01       	movw	r20, r24
     c90:	bd 01       	movw	r22, r26
     c92:	cf 01       	movw	r24, r30
     c94:	08 95       	ret

00000c96 <__divmodsi4>:
     c96:	97 fb       	bst	r25, 7
     c98:	09 2e       	mov	r0, r25
     c9a:	05 26       	eor	r0, r21
     c9c:	0e d0       	rcall	.+28     	; 0xcba <__divmodsi4_neg1>
     c9e:	57 fd       	sbrc	r21, 7
     ca0:	04 d0       	rcall	.+8      	; 0xcaa <__divmodsi4_neg2>
     ca2:	d7 df       	rcall	.-82     	; 0xc52 <__udivmodsi4>
     ca4:	0a d0       	rcall	.+20     	; 0xcba <__divmodsi4_neg1>
     ca6:	00 1c       	adc	r0, r0
     ca8:	38 f4       	brcc	.+14     	; 0xcb8 <__divmodsi4_exit>

00000caa <__divmodsi4_neg2>:
     caa:	50 95       	com	r21
     cac:	40 95       	com	r20
     cae:	30 95       	com	r19
     cb0:	21 95       	neg	r18
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	4f 4f       	sbci	r20, 0xFF	; 255
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255

00000cb8 <__divmodsi4_exit>:
     cb8:	08 95       	ret

00000cba <__divmodsi4_neg1>:
     cba:	f6 f7       	brtc	.-4      	; 0xcb8 <__divmodsi4_exit>
     cbc:	90 95       	com	r25
     cbe:	80 95       	com	r24
     cc0:	70 95       	com	r23
     cc2:	61 95       	neg	r22
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	08 95       	ret

00000ccc <__udivmodhi4>:
     ccc:	aa 1b       	sub	r26, r26
     cce:	bb 1b       	sub	r27, r27
     cd0:	51 e1       	ldi	r21, 0x11	; 17
     cd2:	07 c0       	rjmp	.+14     	; 0xce2 <__udivmodhi4_ep>

00000cd4 <__udivmodhi4_loop>:
     cd4:	aa 1f       	adc	r26, r26
     cd6:	bb 1f       	adc	r27, r27
     cd8:	a6 17       	cp	r26, r22
     cda:	b7 07       	cpc	r27, r23
     cdc:	10 f0       	brcs	.+4      	; 0xce2 <__udivmodhi4_ep>
     cde:	a6 1b       	sub	r26, r22
     ce0:	b7 0b       	sbc	r27, r23

00000ce2 <__udivmodhi4_ep>:
     ce2:	88 1f       	adc	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	5a 95       	dec	r21
     ce8:	a9 f7       	brne	.-22     	; 0xcd4 <__udivmodhi4_loop>
     cea:	80 95       	com	r24
     cec:	90 95       	com	r25
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	08 95       	ret

00000cf4 <__tablejump2__>:
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31

00000cf8 <__tablejump__>:
     cf8:	05 90       	lpm	r0, Z+
     cfa:	f4 91       	lpm	r31, Z+
     cfc:	e0 2d       	mov	r30, r0
     cfe:	09 94       	ijmp

00000d00 <malloc>:
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	91 05       	cpc	r25, r1
     d08:	10 f4       	brcc	.+4      	; 0xd0e <malloc+0xe>
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	e0 91 69 02 	lds	r30, 0x0269
     d12:	f0 91 6a 02 	lds	r31, 0x026A
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	26 c0       	rjmp	.+76     	; 0xd6c <malloc+0x6c>
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	68 17       	cp	r22, r24
     d26:	79 07       	cpc	r23, r25
     d28:	e0 f0       	brcs	.+56     	; 0xd62 <malloc+0x62>
     d2a:	68 17       	cp	r22, r24
     d2c:	79 07       	cpc	r23, r25
     d2e:	81 f4       	brne	.+32     	; 0xd50 <malloc+0x50>
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	21 15       	cp	r18, r1
     d36:	31 05       	cpc	r19, r1
     d38:	31 f0       	breq	.+12     	; 0xd46 <malloc+0x46>
     d3a:	d9 01       	movw	r26, r18
     d3c:	13 96       	adiw	r26, 0x03	; 3
     d3e:	9c 93       	st	X, r25
     d40:	8e 93       	st	-X, r24
     d42:	12 97       	sbiw	r26, 0x02	; 2
     d44:	2b c0       	rjmp	.+86     	; 0xd9c <malloc+0x9c>
     d46:	90 93 6a 02 	sts	0x026A, r25
     d4a:	80 93 69 02 	sts	0x0269, r24
     d4e:	26 c0       	rjmp	.+76     	; 0xd9c <malloc+0x9c>
     d50:	41 15       	cp	r20, r1
     d52:	51 05       	cpc	r21, r1
     d54:	19 f0       	breq	.+6      	; 0xd5c <malloc+0x5c>
     d56:	64 17       	cp	r22, r20
     d58:	75 07       	cpc	r23, r21
     d5a:	18 f4       	brcc	.+6      	; 0xd62 <malloc+0x62>
     d5c:	ab 01       	movw	r20, r22
     d5e:	e9 01       	movw	r28, r18
     d60:	df 01       	movw	r26, r30
     d62:	9f 01       	movw	r18, r30
     d64:	72 81       	ldd	r23, Z+2	; 0x02
     d66:	63 81       	ldd	r22, Z+3	; 0x03
     d68:	e7 2f       	mov	r30, r23
     d6a:	f6 2f       	mov	r31, r22
     d6c:	30 97       	sbiw	r30, 0x00	; 0
     d6e:	c1 f6       	brne	.-80     	; 0xd20 <malloc+0x20>
     d70:	41 15       	cp	r20, r1
     d72:	51 05       	cpc	r21, r1
     d74:	01 f1       	breq	.+64     	; 0xdb6 <malloc+0xb6>
     d76:	48 1b       	sub	r20, r24
     d78:	59 0b       	sbc	r21, r25
     d7a:	44 30       	cpi	r20, 0x04	; 4
     d7c:	51 05       	cpc	r21, r1
     d7e:	80 f4       	brcc	.+32     	; 0xda0 <malloc+0xa0>
     d80:	12 96       	adiw	r26, 0x02	; 2
     d82:	8d 91       	ld	r24, X+
     d84:	9c 91       	ld	r25, X
     d86:	13 97       	sbiw	r26, 0x03	; 3
     d88:	20 97       	sbiw	r28, 0x00	; 0
     d8a:	19 f0       	breq	.+6      	; 0xd92 <malloc+0x92>
     d8c:	9b 83       	std	Y+3, r25	; 0x03
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <malloc+0x9a>
     d92:	90 93 6a 02 	sts	0x026A, r25
     d96:	80 93 69 02 	sts	0x0269, r24
     d9a:	fd 01       	movw	r30, r26
     d9c:	32 96       	adiw	r30, 0x02	; 2
     d9e:	46 c0       	rjmp	.+140    	; 0xe2c <malloc+0x12c>
     da0:	fd 01       	movw	r30, r26
     da2:	e4 0f       	add	r30, r20
     da4:	f5 1f       	adc	r31, r21
     da6:	81 93       	st	Z+, r24
     da8:	91 93       	st	Z+, r25
     daa:	42 50       	subi	r20, 0x02	; 2
     dac:	50 40       	sbci	r21, 0x00	; 0
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	5c 93       	st	X, r21
     db2:	4e 93       	st	-X, r20
     db4:	3b c0       	rjmp	.+118    	; 0xe2c <malloc+0x12c>
     db6:	20 91 67 02 	lds	r18, 0x0267
     dba:	30 91 68 02 	lds	r19, 0x0268
     dbe:	21 15       	cp	r18, r1
     dc0:	31 05       	cpc	r19, r1
     dc2:	41 f4       	brne	.+16     	; 0xdd4 <malloc+0xd4>
     dc4:	20 91 28 01 	lds	r18, 0x0128
     dc8:	30 91 29 01 	lds	r19, 0x0129
     dcc:	30 93 68 02 	sts	0x0268, r19
     dd0:	20 93 67 02 	sts	0x0267, r18
     dd4:	20 91 2a 01 	lds	r18, 0x012A
     dd8:	30 91 2b 01 	lds	r19, 0x012B
     ddc:	21 15       	cp	r18, r1
     dde:	31 05       	cpc	r19, r1
     de0:	41 f4       	brne	.+16     	; 0xdf2 <malloc+0xf2>
     de2:	2d b7       	in	r18, 0x3d	; 61
     de4:	3e b7       	in	r19, 0x3e	; 62
     de6:	40 91 26 01 	lds	r20, 0x0126
     dea:	50 91 27 01 	lds	r21, 0x0127
     dee:	24 1b       	sub	r18, r20
     df0:	35 0b       	sbc	r19, r21
     df2:	e0 91 67 02 	lds	r30, 0x0267
     df6:	f0 91 68 02 	lds	r31, 0x0268
     dfa:	e2 17       	cp	r30, r18
     dfc:	f3 07       	cpc	r31, r19
     dfe:	a0 f4       	brcc	.+40     	; 0xe28 <malloc+0x128>
     e00:	2e 1b       	sub	r18, r30
     e02:	3f 0b       	sbc	r19, r31
     e04:	28 17       	cp	r18, r24
     e06:	39 07       	cpc	r19, r25
     e08:	78 f0       	brcs	.+30     	; 0xe28 <malloc+0x128>
     e0a:	ac 01       	movw	r20, r24
     e0c:	4e 5f       	subi	r20, 0xFE	; 254
     e0e:	5f 4f       	sbci	r21, 0xFF	; 255
     e10:	24 17       	cp	r18, r20
     e12:	35 07       	cpc	r19, r21
     e14:	48 f0       	brcs	.+18     	; 0xe28 <malloc+0x128>
     e16:	4e 0f       	add	r20, r30
     e18:	5f 1f       	adc	r21, r31
     e1a:	50 93 68 02 	sts	0x0268, r21
     e1e:	40 93 67 02 	sts	0x0267, r20
     e22:	81 93       	st	Z+, r24
     e24:	91 93       	st	Z+, r25
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <malloc+0x12c>
     e28:	e0 e0       	ldi	r30, 0x00	; 0
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	cf 01       	movw	r24, r30
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <free>:
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	09 f4       	brne	.+2      	; 0xe3e <free+0xa>
     e3c:	91 c0       	rjmp	.+290    	; 0xf60 <free+0x12c>
     e3e:	fc 01       	movw	r30, r24
     e40:	32 97       	sbiw	r30, 0x02	; 2
     e42:	13 82       	std	Z+3, r1	; 0x03
     e44:	12 82       	std	Z+2, r1	; 0x02
     e46:	60 91 69 02 	lds	r22, 0x0269
     e4a:	70 91 6a 02 	lds	r23, 0x026A
     e4e:	61 15       	cp	r22, r1
     e50:	71 05       	cpc	r23, r1
     e52:	81 f4       	brne	.+32     	; 0xe74 <free+0x40>
     e54:	20 81       	ld	r18, Z
     e56:	31 81       	ldd	r19, Z+1	; 0x01
     e58:	28 0f       	add	r18, r24
     e5a:	39 1f       	adc	r19, r25
     e5c:	80 91 67 02 	lds	r24, 0x0267
     e60:	90 91 68 02 	lds	r25, 0x0268
     e64:	82 17       	cp	r24, r18
     e66:	93 07       	cpc	r25, r19
     e68:	99 f5       	brne	.+102    	; 0xed0 <free+0x9c>
     e6a:	f0 93 68 02 	sts	0x0268, r31
     e6e:	e0 93 67 02 	sts	0x0267, r30
     e72:	76 c0       	rjmp	.+236    	; 0xf60 <free+0x12c>
     e74:	db 01       	movw	r26, r22
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <free+0x4c>
     e7c:	cd 01       	movw	r24, r26
     e7e:	d9 01       	movw	r26, r18
     e80:	ae 17       	cp	r26, r30
     e82:	bf 07       	cpc	r27, r31
     e84:	48 f4       	brcc	.+18     	; 0xe98 <free+0x64>
     e86:	12 96       	adiw	r26, 0x02	; 2
     e88:	2d 91       	ld	r18, X+
     e8a:	3c 91       	ld	r19, X
     e8c:	13 97       	sbiw	r26, 0x03	; 3
     e8e:	21 15       	cp	r18, r1
     e90:	31 05       	cpc	r19, r1
     e92:	a1 f7       	brne	.-24     	; 0xe7c <free+0x48>
     e94:	cd 01       	movw	r24, r26
     e96:	21 c0       	rjmp	.+66     	; 0xeda <free+0xa6>
     e98:	b3 83       	std	Z+3, r27	; 0x03
     e9a:	a2 83       	std	Z+2, r26	; 0x02
     e9c:	ef 01       	movw	r28, r30
     e9e:	49 91       	ld	r20, Y+
     ea0:	59 91       	ld	r21, Y+
     ea2:	9e 01       	movw	r18, r28
     ea4:	24 0f       	add	r18, r20
     ea6:	35 1f       	adc	r19, r21
     ea8:	a2 17       	cp	r26, r18
     eaa:	b3 07       	cpc	r27, r19
     eac:	79 f4       	brne	.+30     	; 0xecc <free+0x98>
     eae:	2d 91       	ld	r18, X+
     eb0:	3c 91       	ld	r19, X
     eb2:	11 97       	sbiw	r26, 0x01	; 1
     eb4:	24 0f       	add	r18, r20
     eb6:	35 1f       	adc	r19, r21
     eb8:	2e 5f       	subi	r18, 0xFE	; 254
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	31 83       	std	Z+1, r19	; 0x01
     ebe:	20 83       	st	Z, r18
     ec0:	12 96       	adiw	r26, 0x02	; 2
     ec2:	2d 91       	ld	r18, X+
     ec4:	3c 91       	ld	r19, X
     ec6:	13 97       	sbiw	r26, 0x03	; 3
     ec8:	33 83       	std	Z+3, r19	; 0x03
     eca:	22 83       	std	Z+2, r18	; 0x02
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	29 f4       	brne	.+10     	; 0xeda <free+0xa6>
     ed0:	f0 93 6a 02 	sts	0x026A, r31
     ed4:	e0 93 69 02 	sts	0x0269, r30
     ed8:	43 c0       	rjmp	.+134    	; 0xf60 <free+0x12c>
     eda:	dc 01       	movw	r26, r24
     edc:	13 96       	adiw	r26, 0x03	; 3
     ede:	fc 93       	st	X, r31
     ee0:	ee 93       	st	-X, r30
     ee2:	12 97       	sbiw	r26, 0x02	; 2
     ee4:	4d 91       	ld	r20, X+
     ee6:	5d 91       	ld	r21, X+
     ee8:	a4 0f       	add	r26, r20
     eea:	b5 1f       	adc	r27, r21
     eec:	ea 17       	cp	r30, r26
     eee:	fb 07       	cpc	r31, r27
     ef0:	69 f4       	brne	.+26     	; 0xf0c <free+0xd8>
     ef2:	20 81       	ld	r18, Z
     ef4:	31 81       	ldd	r19, Z+1	; 0x01
     ef6:	24 0f       	add	r18, r20
     ef8:	35 1f       	adc	r19, r21
     efa:	2e 5f       	subi	r18, 0xFE	; 254
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	ec 01       	movw	r28, r24
     f00:	39 83       	std	Y+1, r19	; 0x01
     f02:	28 83       	st	Y, r18
     f04:	22 81       	ldd	r18, Z+2	; 0x02
     f06:	33 81       	ldd	r19, Z+3	; 0x03
     f08:	3b 83       	std	Y+3, r19	; 0x03
     f0a:	2a 83       	std	Y+2, r18	; 0x02
     f0c:	e0 e0       	ldi	r30, 0x00	; 0
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <free+0xe2>
     f12:	fb 01       	movw	r30, r22
     f14:	bc 01       	movw	r22, r24
     f16:	db 01       	movw	r26, r22
     f18:	12 96       	adiw	r26, 0x02	; 2
     f1a:	8d 91       	ld	r24, X+
     f1c:	9c 91       	ld	r25, X
     f1e:	13 97       	sbiw	r26, 0x03	; 3
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	b9 f7       	brne	.-18     	; 0xf12 <free+0xde>
     f24:	9b 01       	movw	r18, r22
     f26:	2e 5f       	subi	r18, 0xFE	; 254
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	8d 91       	ld	r24, X+
     f2c:	9c 91       	ld	r25, X
     f2e:	11 97       	sbiw	r26, 0x01	; 1
     f30:	82 0f       	add	r24, r18
     f32:	93 1f       	adc	r25, r19
     f34:	40 91 67 02 	lds	r20, 0x0267
     f38:	50 91 68 02 	lds	r21, 0x0268
     f3c:	48 17       	cp	r20, r24
     f3e:	59 07       	cpc	r21, r25
     f40:	79 f4       	brne	.+30     	; 0xf60 <free+0x12c>
     f42:	30 97       	sbiw	r30, 0x00	; 0
     f44:	29 f4       	brne	.+10     	; 0xf50 <free+0x11c>
     f46:	10 92 6a 02 	sts	0x026A, r1
     f4a:	10 92 69 02 	sts	0x0269, r1
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <free+0x120>
     f50:	13 82       	std	Z+3, r1	; 0x03
     f52:	12 82       	std	Z+2, r1	; 0x02
     f54:	22 50       	subi	r18, 0x02	; 2
     f56:	30 40       	sbci	r19, 0x00	; 0
     f58:	30 93 68 02 	sts	0x0268, r19
     f5c:	20 93 67 02 	sts	0x0267, r18
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <do_random>:
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e9 eb       	ldi	r30, 0xB9	; 185
     f6c:	f7 e0       	ldi	r31, 0x07	; 7
     f6e:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__prologue_saves__+0x10>
     f72:	ec 01       	movw	r28, r24
     f74:	68 81       	ld	r22, Y
     f76:	79 81       	ldd	r23, Y+1	; 0x01
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	61 15       	cp	r22, r1
     f7e:	71 05       	cpc	r23, r1
     f80:	81 05       	cpc	r24, r1
     f82:	91 05       	cpc	r25, r1
     f84:	21 f4       	brne	.+8      	; 0xf8e <do_random+0x28>
     f86:	64 e2       	ldi	r22, 0x24	; 36
     f88:	79 ed       	ldi	r23, 0xD9	; 217
     f8a:	8b e5       	ldi	r24, 0x5B	; 91
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	2d e1       	ldi	r18, 0x1D	; 29
     f90:	33 ef       	ldi	r19, 0xF3	; 243
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	0e 94 4b 06 	call	0xc96	; 0xc96 <__divmodsi4>
     f9a:	79 01       	movw	r14, r18
     f9c:	8a 01       	movw	r16, r20
     f9e:	27 ea       	ldi	r18, 0xA7	; 167
     fa0:	31 e4       	ldi	r19, 0x41	; 65
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	0e 94 f7 05 	call	0xbee	; 0xbee <__mulsi3>
     faa:	5b 01       	movw	r10, r22
     fac:	6c 01       	movw	r12, r24
     fae:	c8 01       	movw	r24, r16
     fb0:	b7 01       	movw	r22, r14
     fb2:	2c ee       	ldi	r18, 0xEC	; 236
     fb4:	34 ef       	ldi	r19, 0xF4	; 244
     fb6:	4f ef       	ldi	r20, 0xFF	; 255
     fb8:	5f ef       	ldi	r21, 0xFF	; 255
     fba:	0e 94 f7 05 	call	0xbee	; 0xbee <__mulsi3>
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	2a 0d       	add	r18, r10
     fc4:	3b 1d       	adc	r19, r11
     fc6:	4c 1d       	adc	r20, r12
     fc8:	5d 1d       	adc	r21, r13
     fca:	57 ff       	sbrs	r21, 7
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <do_random+0x70>
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	30 40       	sbci	r19, 0x00	; 0
     fd2:	40 40       	sbci	r20, 0x00	; 0
     fd4:	50 48       	sbci	r21, 0x80	; 128
     fd6:	28 83       	st	Y, r18
     fd8:	39 83       	std	Y+1, r19	; 0x01
     fda:	4a 83       	std	Y+2, r20	; 0x02
     fdc:	5b 83       	std	Y+3, r21	; 0x03
     fde:	5f 77       	andi	r21, 0x7F	; 127
     fe0:	b9 01       	movw	r22, r18
     fe2:	ca 01       	movw	r24, r20
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	ea e0       	ldi	r30, 0x0A	; 10
     fea:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__epilogue_restores__+0x10>

00000fee <random_r>:
     fee:	0e 94 b3 07 	call	0xf66	; 0xf66 <do_random>
     ff2:	08 95       	ret

00000ff4 <random>:
     ff4:	8c e2       	ldi	r24, 0x2C	; 44
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 b3 07 	call	0xf66	; 0xf66 <do_random>
     ffc:	08 95       	ret

00000ffe <srandom>:
     ffe:	60 93 2c 01 	sts	0x012C, r22
    1002:	70 93 2d 01 	sts	0x012D, r23
    1006:	80 93 2e 01 	sts	0x012E, r24
    100a:	90 93 2f 01 	sts	0x012F, r25
    100e:	08 95       	ret

00001010 <__prologue_saves__>:
    1010:	2f 92       	push	r2
    1012:	3f 92       	push	r3
    1014:	4f 92       	push	r4
    1016:	5f 92       	push	r5
    1018:	6f 92       	push	r6
    101a:	7f 92       	push	r7
    101c:	8f 92       	push	r8
    101e:	9f 92       	push	r9
    1020:	af 92       	push	r10
    1022:	bf 92       	push	r11
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	ca 1b       	sub	r28, r26
    103a:	db 0b       	sbc	r29, r27
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	09 94       	ijmp

00001048 <__epilogue_restores__>:
    1048:	2a 88       	ldd	r2, Y+18	; 0x12
    104a:	39 88       	ldd	r3, Y+17	; 0x11
    104c:	48 88       	ldd	r4, Y+16	; 0x10
    104e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1050:	6e 84       	ldd	r6, Y+14	; 0x0e
    1052:	7d 84       	ldd	r7, Y+13	; 0x0d
    1054:	8c 84       	ldd	r8, Y+12	; 0x0c
    1056:	9b 84       	ldd	r9, Y+11	; 0x0b
    1058:	aa 84       	ldd	r10, Y+10	; 0x0a
    105a:	b9 84       	ldd	r11, Y+9	; 0x09
    105c:	c8 84       	ldd	r12, Y+8	; 0x08
    105e:	df 80       	ldd	r13, Y+7	; 0x07
    1060:	ee 80       	ldd	r14, Y+6	; 0x06
    1062:	fd 80       	ldd	r15, Y+5	; 0x05
    1064:	0c 81       	ldd	r16, Y+4	; 0x04
    1066:	1b 81       	ldd	r17, Y+3	; 0x03
    1068:	aa 81       	ldd	r26, Y+2	; 0x02
    106a:	b9 81       	ldd	r27, Y+1	; 0x01
    106c:	ce 0f       	add	r28, r30
    106e:	d1 1d       	adc	r29, r1
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	ed 01       	movw	r28, r26
    107c:	08 95       	ret

0000107e <__do_global_dtors>:
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	ca e7       	ldi	r28, 0x7A	; 122
    1082:	d0 e0       	ldi	r29, 0x00	; 0
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__do_global_dtors+0x10>
    1086:	fe 01       	movw	r30, r28
    1088:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__tablejump__>
    108c:	22 96       	adiw	r28, 0x02	; 2
    108e:	cc 37       	cpi	r28, 0x7C	; 124
    1090:	d1 07       	cpc	r29, r17
    1092:	c9 f7       	brne	.-14     	; 0x1086 <__do_global_dtors+0x8>
    1094:	f8 94       	cli

00001096 <__stop_program>:
    1096:	ff cf       	rjmp	.-2      	; 0x1096 <__stop_program>
