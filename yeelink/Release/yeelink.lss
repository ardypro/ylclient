
yeelink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  0000391c  000039b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000391c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000115  0080023a  0080023a  00003aea  2**0
                  ALLOC
  3 .stab         000137f4  00000000  00000000  00003aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00020581  00000000  00000000  000172e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__dtors_end>
       4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__vector_18>
      4c:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__vector_19>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	7d 09       	sbc	r23, r13
      c4:	ae 0c       	add	r10, r14
      c6:	69 0d       	add	r22, r9
      c8:	89 0f       	add	r24, r25
      ca:	94 0f       	add	r25, r20
      cc:	62 11       	cpse	r22, r2
      ce:	97 11       	cpse	r25, r7
      d0:	ba 12       	cpse	r11, r26
      d2:	02 13       	cpse	r16, r18
      d4:	bc 14       	cp	r11, r12
      d6:	72 15       	cp	r23, r2

000000d8 <__ctors_end>:
      d8:	9c 11       	cpse	r25, r12

000000da <__dtors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	ec e1       	ldi	r30, 0x1C	; 28
      ee:	f9 e3       	ldi	r31, 0x39	; 57
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	aa 33       	cpi	r26, 0x3A	; 58
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	13 e0       	ldi	r17, 0x03	; 3
      fe:	aa e3       	ldi	r26, 0x3A	; 58
     100:	b2 e0       	ldi	r27, 0x02	; 2
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	af 34       	cpi	r26, 0x4F	; 79
     108:	b1 07       	cpc	r27, r17
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>

0000010c <__do_global_ctors>:
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	c8 ed       	ldi	r28, 0xD8	; 216
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	04 c0       	rjmp	.+8      	; 0x11c <__do_global_ctors+0x10>
     114:	22 97       	sbiw	r28, 0x02	; 2
     116:	fe 01       	movw	r30, r28
     118:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__tablejump__>
     11c:	c2 3c       	cpi	r28, 0xC2	; 194
     11e:	d1 07       	cpc	r29, r17
     120:	c9 f7       	brne	.-14     	; 0x114 <__do_global_ctors+0x8>
     122:	0e 94 76 17 	call	0x2eec	; 0x2eec <main>
     126:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__do_global_dtors>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  pinMode(SCK, OUTPUT);
     12e:	8d e0       	ldi	r24, 0x0D	; 13
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	0e 94 b8 18 	call	0x3170	; 0x3170 <pinMode>
  pinMode(MOSI, OUTPUT);
     136:	8b e0       	ldi	r24, 0x0B	; 11
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	0e 94 b8 18 	call	0x3170	; 0x3170 <pinMode>
  pinMode(SS, OUTPUT);
     13e:	8a e0       	ldi	r24, 0x0A	; 10
     140:	61 e0       	ldi	r22, 0x01	; 1
     142:	0e 94 b8 18 	call	0x3170	; 0x3170 <pinMode>
  
  digitalWrite(SCK, LOW);
     146:	8d e0       	ldi	r24, 0x0D	; 13
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <digitalWrite>
  digitalWrite(MOSI, LOW);
     14e:	8b e0       	ldi	r24, 0x0B	; 11
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <digitalWrite>
  digitalWrite(SS, HIGH);
     156:	8a e0       	ldi	r24, 0x0A	; 10
     158:	61 e0       	ldi	r22, 0x01	; 1
     15a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <digitalWrite>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
     15e:	8c b5       	in	r24, 0x2c	; 44
     160:	80 61       	ori	r24, 0x10	; 16
     162:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     164:	8c b5       	in	r24, 0x2c	; 44
     166:	80 64       	ori	r24, 0x40	; 64
     168:	8c bd       	out	0x2c, r24	; 44
}
     16a:	08 95       	ret

0000016c <_ZN10W5100Class6readSnEhj>:
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	04 96       	adiw	r24, 0x04	; 4
     170:	98 2f       	mov	r25, r24
     172:	88 27       	eor	r24, r24
     174:	86 0f       	add	r24, r22
     176:	97 1f       	adc	r25, r23
     178:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN10W5100Class4readEj>
     17c:	08 95       	ret

0000017e <_ZN10W5100Class8readSnIREh>:
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
     17e:	62 e0       	ldi	r22, 0x02	; 2
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     186:	08 95       	ret

00000188 <_ZN10W5100Class8readSnSREh>:
     188:	63 e0       	ldi	r22, 0x03	; 3
     18a:	70 e0       	ldi	r23, 0x00	; 0
     18c:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     190:	08 95       	ret

00000192 <_ZN10W5100Class11readSnRX_RDEh>:
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	18 2f       	mov	r17, r24
     198:	68 e2       	ldi	r22, 0x28	; 40
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     1a0:	08 2f       	mov	r16, r24
     1a2:	81 2f       	mov	r24, r17
     1a4:	69 e2       	ldi	r22, 0x29	; 41
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     1ac:	50 2f       	mov	r21, r16
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	28 2f       	mov	r18, r24
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	24 2b       	or	r18, r20
     1b6:	35 2b       	or	r19, r21
     1b8:	c9 01       	movw	r24, r18
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	08 95       	ret

000001c0 <_ZN10W5100Class7writeSnEhjh>:
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	04 96       	adiw	r24, 0x04	; 4
     1c4:	98 2f       	mov	r25, r24
     1c6:	88 27       	eor	r24, r24
     1c8:	86 0f       	add	r24, r22
     1ca:	97 1f       	adc	r25, r23
     1cc:	64 2f       	mov	r22, r20
     1ce:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN10W5100Class5writeEjh>
     1d2:	08 95       	ret

000001d4 <_ZN10W5100Class9writeSnIREhh>:
     1d4:	46 2f       	mov	r20, r22
     1d6:	62 e0       	ldi	r22, 0x02	; 2
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     1de:	08 95       	ret

000001e0 <_ZN10W5100Class12writeSnDPORTEhj>:
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	18 2f       	mov	r17, r24
     1e6:	06 2f       	mov	r16, r22
     1e8:	47 2f       	mov	r20, r23
     1ea:	60 e1       	ldi	r22, 0x10	; 16
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     1f2:	81 2f       	mov	r24, r17
     1f4:	61 e1       	ldi	r22, 0x11	; 17
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	40 2f       	mov	r20, r16
     1fa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	08 95       	ret

00000204 <_ZN10W5100Class12writeSnRX_RDEhj>:
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	18 2f       	mov	r17, r24
     20a:	06 2f       	mov	r16, r22
     20c:	47 2f       	mov	r20, r23
     20e:	68 e2       	ldi	r22, 0x28	; 40
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     216:	81 2f       	mov	r24, r17
     218:	69 e2       	ldi	r22, 0x29	; 41
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	40 2f       	mov	r20, r16
     21e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	08 95       	ret

00000228 <_ZN10W5100Class9writeSnMREhh>:
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
     228:	46 2f       	mov	r20, r22
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     232:	08 95       	ret

00000234 <_ZN10W5100Class11writeSnPORTEhj>:
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	18 2f       	mov	r17, r24
     23a:	06 2f       	mov	r16, r22
     23c:	47 2f       	mov	r20, r23
     23e:	64 e0       	ldi	r22, 0x04	; 4
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     246:	81 2f       	mov	r24, r17
     248:	65 e0       	ldi	r22, 0x05	; 5
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	40 2f       	mov	r20, r16
     24e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	08 95       	ret

00000258 <_ZN10W5100Class7writeSnEhjPhj>:

uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
     258:	fb 01       	movw	r30, r22
     25a:	ba 01       	movw	r22, r20
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	04 96       	adiw	r24, 0x04	; 4
     260:	98 2f       	mov	r25, r24
     262:	88 27       	eor	r24, r24
     264:	8e 0f       	add	r24, r30
     266:	9f 1f       	adc	r25, r31
     268:	a9 01       	movw	r20, r18
     26a:	0e 94 81 03 	call	0x702	; 0x702 <_ZN10W5100Class5writeEjPKhj>
}
     26e:	08 95       	ret

00000270 <_ZN10W5100Class11writeSnDIPREhPh>:
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
     270:	ab 01       	movw	r20, r22
     272:	6c e0       	ldi	r22, 0x0C	; 12
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	24 e0       	ldi	r18, 0x04	; 4
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN10W5100Class7writeSnEhjPhj>
     27e:	08 95       	ret

00000280 <_Z5closeh>:

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
     280:	1f 93       	push	r17
     282:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_CLOSE);
     284:	8c e3       	ldi	r24, 0x3C	; 60
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	61 2f       	mov	r22, r17
     28a:	40 e1       	ldi	r20, 0x10	; 16
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN10W5100Class9execCmdSnEh7SockCMD>
  W5100.writeSnIR(s, 0xFF);
     292:	81 2f       	mov	r24, r17
     294:	6f ef       	ldi	r22, 0xFF	; 255
     296:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN10W5100Class9writeSnIREhh>
}
     29a:	1f 91       	pop	r17
     29c:	08 95       	ret

0000029e <_Z6sockethhjh>:
/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for W5100 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
{
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	1f 93       	push	r17
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <_Z6sockethhjh+0xc>
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	18 2f       	mov	r17, r24
     2b0:	7a 01       	movw	r14, r20
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
     2b2:	86 2f       	mov	r24, r22
     2b4:	81 50       	subi	r24, 0x01	; 1
     2b6:	85 30       	cpi	r24, 0x05	; 5
     2b8:	40 f5       	brcc	.+80     	; 0x30a <_Z6sockethhjh+0x6c>
  {
    close(s);
     2ba:	81 2f       	mov	r24, r17
     2bc:	2a 83       	std	Y+2, r18	; 0x02
     2be:	69 83       	std	Y+1, r22	; 0x01
     2c0:	0e 94 40 01 	call	0x280	; 0x280 <_Z5closeh>
    W5100.writeSnMR(s, protocol | flag);
     2c4:	2a 81       	ldd	r18, Y+2	; 0x02
     2c6:	69 81       	ldd	r22, Y+1	; 0x01
     2c8:	62 2b       	or	r22, r18
     2ca:	81 2f       	mov	r24, r17
     2cc:	0e 94 14 01 	call	0x228	; 0x228 <_ZN10W5100Class9writeSnMREhh>
    if (port != 0) {
     2d0:	e1 14       	cp	r14, r1
     2d2:	f1 04       	cpc	r15, r1
     2d4:	19 f0       	breq	.+6      	; 0x2dc <_Z6sockethhjh+0x3e>
      W5100.writeSnPORT(s, port);
     2d6:	81 2f       	mov	r24, r17
     2d8:	b7 01       	movw	r22, r14
     2da:	0c c0       	rjmp	.+24     	; 0x2f4 <_Z6sockethhjh+0x56>
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
     2dc:	20 91 3a 02 	lds	r18, 0x023A
     2e0:	30 91 3b 02 	lds	r19, 0x023B
     2e4:	2f 5f       	subi	r18, 0xFF	; 255
     2e6:	3f 4f       	sbci	r19, 0xFF	; 255
     2e8:	30 93 3b 02 	sts	0x023B, r19
     2ec:	20 93 3a 02 	sts	0x023A, r18
      W5100.writeSnPORT(s, local_port);
     2f0:	81 2f       	mov	r24, r17
     2f2:	b9 01       	movw	r22, r18
     2f4:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN10W5100Class11writeSnPORTEhj>
    }

    W5100.execCmdSn(s, Sock_OPEN);
     2f8:	8c e3       	ldi	r24, 0x3C	; 60
     2fa:	92 e0       	ldi	r25, 0x02	; 2
     2fc:	61 2f       	mov	r22, r17
     2fe:	41 e0       	ldi	r20, 0x01	; 1
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN10W5100Class9execCmdSnEh7SockCMD>
    
    return 1;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	01 c0       	rjmp	.+2      	; 0x30c <_Z6sockethhjh+0x6e>
  }

  return 0;
     30a:	80 e0       	ldi	r24, 0x00	; 0
}
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	1f 91       	pop	r17
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	08 95       	ret

0000031c <_Z7connecthPhj>:
 * 		This function waits for the untill the connection is established.
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	18 2f       	mov	r17, r24
     324:	fb 01       	movw	r30, r22
     326:	ea 01       	movw	r28, r20
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
     328:	80 81       	ld	r24, Z
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
     32a:	8f 3f       	cpi	r24, 0xFF	; 255
     32c:	51 f4       	brne	.+20     	; 0x342 <_Z7connecthPhj+0x26>
     32e:	81 81       	ldd	r24, Z+1	; 0x01
     330:	8f 3f       	cpi	r24, 0xFF	; 255
     332:	91 f4       	brne	.+36     	; 0x358 <_Z7connecthPhj+0x3c>
     334:	82 81       	ldd	r24, Z+2	; 0x02
     336:	8f 3f       	cpi	r24, 0xFF	; 255
     338:	79 f4       	brne	.+30     	; 0x358 <_Z7connecthPhj+0x3c>
     33a:	83 81       	ldd	r24, Z+3	; 0x03
     33c:	8f 3f       	cpi	r24, 0xFF	; 255
     33e:	61 f4       	brne	.+24     	; 0x358 <_Z7connecthPhj+0x3c>
     340:	1e c0       	rjmp	.+60     	; 0x37e <_Z7connecthPhj+0x62>
     342:	88 23       	and	r24, r24
     344:	49 f4       	brne	.+18     	; 0x358 <_Z7connecthPhj+0x3c>
     346:	81 81       	ldd	r24, Z+1	; 0x01
     348:	88 23       	and	r24, r24
     34a:	31 f4       	brne	.+12     	; 0x358 <_Z7connecthPhj+0x3c>
     34c:	82 81       	ldd	r24, Z+2	; 0x02
     34e:	88 23       	and	r24, r24
     350:	19 f4       	brne	.+6      	; 0x358 <_Z7connecthPhj+0x3c>
     352:	83 81       	ldd	r24, Z+3	; 0x03
     354:	88 23       	and	r24, r24
     356:	99 f0       	breq	.+38     	; 0x37e <_Z7connecthPhj+0x62>
     358:	20 97       	sbiw	r28, 0x00	; 0
     35a:	89 f0       	breq	.+34     	; 0x37e <_Z7connecthPhj+0x62>
    (port == 0x00) 
    ) 
    return 0;

  // set destination IP
  W5100.writeSnDIPR(s, addr);
     35c:	81 2f       	mov	r24, r17
     35e:	bf 01       	movw	r22, r30
     360:	0e 94 38 01 	call	0x270	; 0x270 <_ZN10W5100Class11writeSnDIPREhPh>
  W5100.writeSnDPORT(s, port);
     364:	81 2f       	mov	r24, r17
     366:	be 01       	movw	r22, r28
     368:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN10W5100Class12writeSnDPORTEhj>
  W5100.execCmdSn(s, Sock_CONNECT);
     36c:	8c e3       	ldi	r24, 0x3C	; 60
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	61 2f       	mov	r22, r17
     372:	44 e0       	ldi	r20, 0x04	; 4
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN10W5100Class9execCmdSnEh7SockCMD>

  return 1;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	01 c0       	rjmp	.+2      	; 0x380 <_Z7connecthPhj+0x64>
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    (port == 0x00) 
    ) 
    return 0;
     37e:	80 e0       	ldi	r24, 0x00	; 0
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);

  return 1;
}
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	08 95       	ret

00000388 <_Z10disconnecth>:
/**
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
     388:	68 2f       	mov	r22, r24
  W5100.execCmdSn(s, Sock_DISCON);
     38a:	8c e3       	ldi	r24, 0x3C	; 60
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	48 e0       	ldi	r20, 0x08	; 8
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
     396:	08 95       	ret

00000398 <_Z4sendhPKhj>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t send(SOCKET s, const uint8_t * buf, uint16_t len)
{
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	18 2f       	mov	r17, r24
     3a8:	7b 01       	movw	r14, r22
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    {
      close(s);
      return 0;
     3aa:	c4 2e       	mov	r12, r20
     3ac:	e6 01       	movw	r28, r12
     3ae:	6e 01       	movw	r12, r28
     3b0:	d5 2e       	mov	r13, r21
     3b2:	e6 01       	movw	r28, r12
     3b4:	38 e0       	ldi	r19, 0x08	; 8
     3b6:	c1 30       	cpi	r28, 0x01	; 1
     3b8:	d3 07       	cpc	r29, r19
     3ba:	10 f0       	brcs	.+4      	; 0x3c0 <_Z4sendhPKhj+0x28>
     3bc:	c0 e0       	ldi	r28, 0x00	; 0
     3be:	d8 e0       	ldi	r29, 0x08	; 8
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = W5100.getTXFreeSize(s);
     3c0:	8c e3       	ldi	r24, 0x3C	; 60
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	61 2f       	mov	r22, r17
     3c6:	0e 94 98 04 	call	0x930	; 0x930 <_ZN10W5100Class13getTXFreeSizeEh>
     3ca:	6c 01       	movw	r12, r24
    status = W5100.readSnSR(s);
     3cc:	81 2f       	mov	r24, r17
     3ce:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN10W5100Class8readSnSREh>
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
     3d2:	87 31       	cpi	r24, 0x17	; 23
     3d4:	11 f0       	breq	.+4      	; 0x3da <_Z4sendhPKhj+0x42>
     3d6:	8c 31       	cpi	r24, 0x1C	; 28
     3d8:	21 f4       	brne	.+8      	; 0x3e2 <_Z4sendhPKhj+0x4a>
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  // if freebuf is available, start.
  do 
     3da:	cc 16       	cp	r12, r28
     3dc:	dd 06       	cpc	r13, r29
     3de:	80 f3       	brcs	.-32     	; 0x3c0 <_Z4sendhPKhj+0x28>
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <_Z4sendhPKhj+0x4e>
  {
    freesize = W5100.getTXFreeSize(s);
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
     3e2:	c0 e0       	ldi	r28, 0x00	; 0
     3e4:	d0 e0       	ldi	r29, 0x00	; 0
    }
  } 
  while (freesize < ret);

  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
     3e6:	8c e3       	ldi	r24, 0x3C	; 60
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	61 2f       	mov	r22, r17
     3ec:	a7 01       	movw	r20, r14
     3ee:	9e 01       	movw	r18, r28
     3f0:	0e 94 40 04 	call	0x880	; 0x880 <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
     3f4:	8c e3       	ldi	r24, 0x3C	; 60
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	61 2f       	mov	r22, r17
     3fa:	40 e2       	ldi	r20, 0x20	; 32
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN10W5100Class9execCmdSnEh7SockCMD>

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
     402:	0b c0       	rjmp	.+22     	; 0x41a <_Z4sendhPKhj+0x82>
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
     404:	81 2f       	mov	r24, r17
     406:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN10W5100Class8readSnSREh>
     40a:	88 23       	and	r24, r24
     40c:	31 f4       	brne	.+12     	; 0x41a <_Z4sendhPKhj+0x82>
    {
      close(s);
     40e:	81 2f       	mov	r24, r17
     410:	0e 94 40 01 	call	0x280	; 0x280 <_Z5closeh>
      return 0;
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	d0 e0       	ldi	r29, 0x00	; 0
     418:	09 c0       	rjmp	.+18     	; 0x42c <_Z4sendhPKhj+0x94>
  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
     41a:	81 2f       	mov	r24, r17
     41c:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN10W5100Class8readSnIREh>
     420:	84 ff       	sbrs	r24, 4
     422:	f0 cf       	rjmp	.-32     	; 0x404 <_Z4sendhPKhj+0x6c>
      close(s);
      return 0;
    }
  }
  /* +2008.01 bj */
  W5100.writeSnIR(s, SnIR::SEND_OK);
     424:	81 2f       	mov	r24, r17
     426:	60 e1       	ldi	r22, 0x10	; 16
     428:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN10W5100Class9writeSnIREhh>
  return ret;
}
     42c:	ce 01       	movw	r24, r28
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	df 90       	pop	r13
     43a:	cf 90       	pop	r12
     43c:	08 95       	ret

0000043e <_Z4recvhPhj>:
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
uint16_t recv(SOCKET s, uint8_t *buf, uint16_t len)
{
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	f8 2e       	mov	r15, r24
     450:	6b 01       	movw	r12, r22
     452:	8a 01       	movw	r16, r20
  // Check how much data is available
  uint16_t ret = W5100.getRXReceivedSize(s);
     454:	8c e3       	ldi	r24, 0x3C	; 60
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	6f 2d       	mov	r22, r15
     45a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN10W5100Class17getRXReceivedSizeEh>
     45e:	ec 01       	movw	r28, r24
  if ( ret == 0 )
     460:	00 97       	sbiw	r24, 0x00	; 0
     462:	61 f4       	brne	.+24     	; 0x47c <_Z4recvhPhj+0x3e>
  {
    // No data available.
    uint8_t status = W5100.readSnSR(s);
     464:	8f 2d       	mov	r24, r15
     466:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN10W5100Class8readSnSREh>
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
     46a:	84 31       	cpi	r24, 0x14	; 20
     46c:	01 f1       	breq	.+64     	; 0x4ae <_Z4recvhPhj+0x70>
     46e:	88 23       	and	r24, r24
     470:	f1 f0       	breq	.+60     	; 0x4ae <_Z4recvhPhj+0x70>
     472:	8c 31       	cpi	r24, 0x1C	; 28
     474:	e1 f0       	breq	.+56     	; 0x4ae <_Z4recvhPhj+0x70>
      ret = 0;
    }
    else
    {
      // The connection is still up, but there's no data waiting to be read
      ret = -1;
     476:	cf ef       	ldi	r28, 0xFF	; 255
     478:	df ef       	ldi	r29, 0xFF	; 255
     47a:	07 c0       	rjmp	.+14     	; 0x48a <_Z4recvhPhj+0x4c>
    }
  }
  else if (ret > len)
     47c:	08 17       	cp	r16, r24
     47e:	19 07       	cpc	r17, r25
     480:	20 f4       	brcc	.+8      	; 0x48a <_Z4recvhPhj+0x4c>
  {
    ret = len;
  }

  if ( ret > 0 )
     482:	01 15       	cp	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	89 f0       	breq	.+34     	; 0x4aa <_Z4recvhPhj+0x6c>
     488:	e8 01       	movw	r28, r16
  {
    W5100.recv_data_processing(s, buf, ret);
     48a:	8c e3       	ldi	r24, 0x3C	; 60
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	6f 2d       	mov	r22, r15
     490:	a6 01       	movw	r20, r12
     492:	9e 01       	movw	r18, r28
     494:	00 e0       	ldi	r16, 0x00	; 0
     496:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN10W5100Class20recv_data_processingEhPhjh>
    W5100.execCmdSn(s, Sock_RECV);
     49a:	8c e3       	ldi	r24, 0x3C	; 60
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	6f 2d       	mov	r22, r15
     4a0:	40 e4       	ldi	r20, 0x40	; 64
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN10W5100Class9execCmdSnEh7SockCMD>
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <_Z4recvhPhj+0x70>
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
     4aa:	c0 e0       	ldi	r28, 0x00	; 0
     4ac:	d0 e0       	ldi	r29, 0x00	; 0
  {
    W5100.recv_data_processing(s, buf, ret);
    W5100.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
     4ae:	ce 01       	movw	r24, r28
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	08 95       	ret

000004c2 <_Z4peekhPh>:
 * @brief	Returns the first byte in the receive queue (no checking)
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
     4c2:	0f 93       	push	r16
     4c4:	28 2f       	mov	r18, r24
     4c6:	ab 01       	movw	r20, r22
  W5100.recv_data_processing(s, buf, 1, 1);
     4c8:	8c e3       	ldi	r24, 0x3C	; 60
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	62 2f       	mov	r22, r18
     4ce:	21 e0       	ldi	r18, 0x01	; 1
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	01 e0       	ldi	r16, 0x01	; 1
     4d4:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN10W5100Class20recv_data_processingEhPhjh>

  return 1;
}
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <_Z10bufferDatahjPKhj>:
  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
     4e0:	8f 92       	push	r8
     4e2:	9f 92       	push	r9
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	18 2f       	mov	r17, r24
     4fa:	6b 01       	movw	r12, r22
     4fc:	5a 01       	movw	r10, r20
     4fe:	e9 01       	movw	r28, r18
  uint16_t ret =0;
  if (len > W5100.getTXFreeSize(s))
     500:	8c e3       	ldi	r24, 0x3C	; 60
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	61 2f       	mov	r22, r17
     506:	0e 94 98 04 	call	0x930	; 0x930 <_ZN10W5100Class13getTXFreeSizeEh>
     50a:	8c 17       	cp	r24, r28
     50c:	9d 07       	cpc	r25, r29
     50e:	38 f4       	brcc	.+14     	; 0x51e <_Z10bufferDatahjPKhj+0x3e>
  {
    ret = W5100.getTXFreeSize(s); // check size not to exceed MAX size.
     510:	8c e3       	ldi	r24, 0x3C	; 60
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	61 2f       	mov	r22, r17
     516:	0e 94 98 04 	call	0x930	; 0x930 <_ZN10W5100Class13getTXFreeSizeEh>
     51a:	7c 01       	movw	r14, r24
     51c:	01 c0       	rjmp	.+2      	; 0x520 <_Z10bufferDatahjPKhj+0x40>
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > W5100.getTXFreeSize(s))
     51e:	7e 01       	movw	r14, r28
  }
  else
  {
    ret = len;
  }
  W5100.send_data_processing_offset(s, offset, buf, ret);
     520:	8c e3       	ldi	r24, 0x3C	; 60
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	61 2f       	mov	r22, r17
     526:	a6 01       	movw	r20, r12
     528:	95 01       	movw	r18, r10
     52a:	87 01       	movw	r16, r14
     52c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
     530:	c7 01       	movw	r24, r14
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	bf 90       	pop	r11
     544:	af 90       	pop	r10
     546:	9f 90       	pop	r9
     548:	8f 90       	pop	r8
     54a:	08 95       	ret

0000054c <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	18 2f       	mov	r17, r24
     554:	fb 01       	movw	r30, r22
     556:	ea 01       	movw	r28, r20
  if
     558:	80 81       	ld	r24, Z
     55a:	88 23       	and	r24, r24
     55c:	49 f4       	brne	.+18     	; 0x570 <_Z8startUDPhPhj+0x24>
     55e:	81 81       	ldd	r24, Z+1	; 0x01
     560:	88 23       	and	r24, r24
     562:	31 f4       	brne	.+12     	; 0x570 <_Z8startUDPhPhj+0x24>
     564:	82 81       	ldd	r24, Z+2	; 0x02
     566:	88 23       	and	r24, r24
     568:	19 f4       	brne	.+6      	; 0x570 <_Z8startUDPhPhj+0x24>
     56a:	83 81       	ldd	r24, Z+3	; 0x03
     56c:	88 23       	and	r24, r24
     56e:	69 f0       	breq	.+26     	; 0x58a <_Z8startUDPhPhj+0x3e>
     570:	20 97       	sbiw	r28, 0x00	; 0
     572:	59 f0       	breq	.+22     	; 0x58a <_Z8startUDPhPhj+0x3e>
  {
    return 0;
  }
  else
  {
    W5100.writeSnDIPR(s, addr);
     574:	81 2f       	mov	r24, r17
     576:	bf 01       	movw	r22, r30
     578:	0e 94 38 01 	call	0x270	; 0x270 <_ZN10W5100Class11writeSnDIPREhPh>
    W5100.writeSnDPORT(s, port);
     57c:	81 2f       	mov	r24, r17
     57e:	be 01       	movw	r22, r28
     580:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN10W5100Class12writeSnDPORTEhj>
    return 1;
     584:	21 e0       	ldi	r18, 0x01	; 1
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <_Z8startUDPhPhj+0x42>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
  }
}
     58e:	c9 01       	movw	r24, r18
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	08 95       	ret

00000598 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
     598:	1f 93       	push	r17
     59a:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_SEND);
     59c:	8c e3       	ldi	r24, 0x3C	; 60
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	61 2f       	mov	r22, r17
     5a2:	40 e2       	ldi	r20, 0x20	; 32
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN10W5100Class9execCmdSnEh7SockCMD>
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
     5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <_Z7sendUDPh+0x2c>
  {
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
     5ac:	81 2f       	mov	r24, r17
     5ae:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN10W5100Class8readSnIREh>
     5b2:	83 ff       	sbrs	r24, 3
     5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <_Z7sendUDPh+0x2c>
    {
      /* +2008.01 [bj]: clear interrupt */
      W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
     5b6:	81 2f       	mov	r24, r17
     5b8:	68 e1       	ldi	r22, 0x18	; 24
     5ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN10W5100Class9writeSnIREhh>
      return 0;
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	0b c0       	rjmp	.+22     	; 0x5da <_Z7sendUDPh+0x42>
int sendUDP(SOCKET s)
{
  W5100.execCmdSn(s, Sock_SEND);
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
     5c4:	81 2f       	mov	r24, r17
     5c6:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN10W5100Class8readSnIREh>
     5ca:	84 ff       	sbrs	r24, 4
     5cc:	ef cf       	rjmp	.-34     	; 0x5ac <_Z7sendUDPh+0x14>
      return 0;
    }
  }

  /* +2008.01 bj */	
  W5100.writeSnIR(s, SnIR::SEND_OK);
     5ce:	81 2f       	mov	r24, r17
     5d0:	60 e1       	ldi	r22, 0x10	; 16
     5d2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN10W5100Class9writeSnIREhh>

  /* Sent ok */
  return 1;
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
}
     5da:	c9 01       	movw	r24, r18
     5dc:	1f 91       	pop	r17
     5de:	08 95       	ret

000005e0 <_ZN8SPIClass8transferEh>:
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
     5e0:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
     5e2:	0d b4       	in	r0, 0x2d	; 45
     5e4:	07 fe       	sbrs	r0, 7
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <_ZN8SPIClass8transferEh+0x2>
    ;
  return SPDR;
     5e8:	8e b5       	in	r24, 0x2e	; 46
}
     5ea:	08 95       	ret

000005ec <_ZN10W5100Class6initSSEv>:
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB162__)
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
     5ec:	22 9a       	sbi	0x04, 2	; 4
     5ee:	08 95       	ret

000005f0 <_ZN10W5100Class5setSSEv>:
  inline static void setSS()     { PORTB &= ~_BV(2); };
     5f0:	2a 98       	cbi	0x05, 2	; 5
     5f2:	08 95       	ret

000005f4 <_ZN10W5100Class7resetSSEv>:
  inline static void resetSS()   { PORTB |=  _BV(2); };
     5f4:	2a 9a       	sbi	0x05, 2	; 5
     5f6:	08 95       	ret

000005f8 <_ZN10W5100Class5writeEjh>:
    read(src_ptr, (uint8_t *) dst, len);
}


uint8_t W5100Class::write(uint16_t _addr, uint8_t _data)
{
     5f8:	1f 93       	push	r17
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	00 d0       	rcall	.+0      	; 0x600 <_ZN10W5100Class5writeEjh+0x8>
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	18 2f       	mov	r17, r24
  setSS();  
     606:	6a 83       	std	Y+2, r22	; 0x02
     608:	99 83       	std	Y+1, r25	; 0x01
     60a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN10W5100Class5setSSEv>
  SPI.transfer(0xF0);
     60e:	80 ef       	ldi	r24, 0xF0	; 240
     610:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
  SPI.transfer(_addr >> 8);
     614:	99 81       	ldd	r25, Y+1	; 0x01
     616:	89 2f       	mov	r24, r25
     618:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
  SPI.transfer(_addr & 0xFF);
     61c:	81 2f       	mov	r24, r17
     61e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
  SPI.transfer(_data);
     622:	6a 81       	ldd	r22, Y+2	; 0x02
     624:	86 2f       	mov	r24, r22
     626:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
  resetSS();
     62a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN10W5100Class7resetSSEv>
  return 1;
}
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	cf 91       	pop	r28
     636:	df 91       	pop	r29
     638:	1f 91       	pop	r17
     63a:	08 95       	ret

0000063c <_ZN10W5100Class9writeSnCREhh>:
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
     63c:	46 2f       	mov	r20, r22
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     646:	08 95       	ret

00000648 <_ZN10W5100Class12writeSnTX_WREhj>:
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	18 2f       	mov	r17, r24
     64e:	06 2f       	mov	r16, r22
     650:	47 2f       	mov	r20, r23
     652:	64 e2       	ldi	r22, 0x24	; 36
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     65a:	81 2f       	mov	r24, r17
     65c:	65 e2       	ldi	r22, 0x25	; 37
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	40 2f       	mov	r20, r16
     662:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN10W5100Class7writeSnEhjh>
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	08 95       	ret

0000066c <_ZN10W5100Class7writeMREh>:
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
     66c:	68 2f       	mov	r22, r24
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN10W5100Class5writeEjh>
     676:	08 95       	ret

00000678 <_ZN10W5100Class9writeTMSREh>:
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size
     678:	68 2f       	mov	r22, r24
     67a:	8b e1       	ldi	r24, 0x1B	; 27
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN10W5100Class5writeEjh>
     682:	08 95       	ret

00000684 <_ZN10W5100Class9writeRMSREh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
     684:	68 2f       	mov	r22, r24
     686:	8a e1       	ldi	r24, 0x1A	; 26
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN10W5100Class5writeEjh>
     68e:	08 95       	ret

00000690 <_ZN10W5100Class4initEv>:

#define TXBUF_BASE 0x4000
#define RXBUF_BASE 0x6000

void W5100Class::init(void)
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	ec 01       	movw	r28, r24
  delay(300);
     696:	6c e2       	ldi	r22, 0x2C	; 44
     698:	71 e0       	ldi	r23, 0x01	; 1
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 08 18 	call	0x3010	; 0x3010 <delay>

  SPI.begin();
     6a2:	0e 94 97 00 	call	0x12e	; 0x12e <_ZN8SPIClass5beginEv>
  initSS();
     6a6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN10W5100Class6initSSEv>
  
  writeMR(1<<RST);
     6aa:	80 e8       	ldi	r24, 0x80	; 128
     6ac:	0e 94 36 03 	call	0x66c	; 0x66c <_ZN10W5100Class7writeMREh>
  writeTMSR(0x55);
     6b0:	85 e5       	ldi	r24, 0x55	; 85
     6b2:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN10W5100Class9writeTMSREh>
  writeRMSR(0x55);
     6b6:	85 e5       	ldi	r24, 0x55	; 85
     6b8:	0e 94 42 03 	call	0x684	; 0x684 <_ZN10W5100Class9writeRMSREh>

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e4       	ldi	r25, 0x40	; 64
     6c0:	99 83       	std	Y+1, r25	; 0x01
     6c2:	88 83       	st	Y, r24
    RBASE[i] = RXBUF_BASE + RSIZE * i;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e6       	ldi	r25, 0x60	; 96
     6c8:	99 87       	std	Y+9, r25	; 0x09
     6ca:	88 87       	std	Y+8, r24	; 0x08
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	98 e4       	ldi	r25, 0x48	; 72
     6d0:	9b 83       	std	Y+3, r25	; 0x03
     6d2:	8a 83       	std	Y+2, r24	; 0x02
    RBASE[i] = RXBUF_BASE + RSIZE * i;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	98 e6       	ldi	r25, 0x68	; 104
     6d8:	9b 87       	std	Y+11, r25	; 0x0b
     6da:	8a 87       	std	Y+10, r24	; 0x0a
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e5       	ldi	r25, 0x50	; 80
     6e0:	9d 83       	std	Y+5, r25	; 0x05
     6e2:	8c 83       	std	Y+4, r24	; 0x04
    RBASE[i] = RXBUF_BASE + RSIZE * i;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e7       	ldi	r25, 0x70	; 112
     6e8:	9d 87       	std	Y+13, r25	; 0x0d
     6ea:	8c 87       	std	Y+12, r24	; 0x0c
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	98 e5       	ldi	r25, 0x58	; 88
     6f0:	9f 83       	std	Y+7, r25	; 0x07
     6f2:	8e 83       	std	Y+6, r24	; 0x06
    RBASE[i] = RXBUF_BASE + RSIZE * i;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	98 e7       	ldi	r25, 0x78	; 120
     6f8:	9f 87       	std	Y+15, r25	; 0x0f
     6fa:	8e 87       	std	Y+14, r24	; 0x0e
  }
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <_ZN10W5100Class5writeEjPKhj>:
  resetSS();
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	6c 01       	movw	r12, r24
     714:	ea 01       	movw	r28, r20
  for (uint16_t i=0; i<_len; i++)
     716:	e6 2e       	mov	r14, r22
     718:	f7 2e       	mov	r15, r23
     71a:	00 e0       	ldi	r16, 0x00	; 0
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	17 c0       	rjmp	.+46     	; 0x74e <_ZN10W5100Class5writeEjPKhj+0x4c>
  {
    setSS();    
     720:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN10W5100Class5setSSEv>
    SPI.transfer(0xF0);
     724:	80 ef       	ldi	r24, 0xF0	; 240
     726:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
    SPI.transfer(_addr >> 8);
     72a:	8d 2d       	mov	r24, r13
     72c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
    SPI.transfer(_addr & 0xFF);
     730:	8c 2d       	mov	r24, r12
     732:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
    _addr++;
     736:	08 94       	sec
     738:	c1 1c       	adc	r12, r1
     73a:	d1 1c       	adc	r13, r1
    SPI.transfer(_buf[i]);
     73c:	f7 01       	movw	r30, r14
     73e:	81 91       	ld	r24, Z+
     740:	7f 01       	movw	r14, r30
     742:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
    resetSS();
     746:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN10W5100Class7resetSSEv>
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
     74a:	0f 5f       	subi	r16, 0xFF	; 255
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	0c 17       	cp	r16, r28
     750:	1d 07       	cpc	r17, r29
     752:	30 f3       	brcs	.-52     	; 0x720 <_ZN10W5100Class5writeEjPKhj+0x1e>
    _addr++;
    SPI.transfer(_buf[i]);
    resetSS();
  }
  return _len;
}
     754:	ce 01       	movw	r24, r28
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	08 95       	ret

00000768 <_ZN10W5100Class4readEj>:

uint8_t W5100Class::read(uint16_t _addr)
{
     768:	1f 93       	push	r17
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	0f 92       	push	r0
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	18 2f       	mov	r17, r24
  setSS();  
     776:	99 83       	std	Y+1, r25	; 0x01
     778:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN10W5100Class5setSSEv>
  SPI.transfer(0x0F);
     77c:	8f e0       	ldi	r24, 0x0F	; 15
     77e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
  SPI.transfer(_addr >> 8);
     782:	99 81       	ldd	r25, Y+1	; 0x01
     784:	89 2f       	mov	r24, r25
     786:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
  SPI.transfer(_addr & 0xFF);
     78a:	81 2f       	mov	r24, r17
     78c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
  uint8_t _data = SPI.transfer(0);
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
  resetSS();
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN10W5100Class7resetSSEv>
  return _data;
}
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	0f 90       	pop	r0
     7a0:	cf 91       	pop	r28
     7a2:	df 91       	pop	r29
     7a4:	1f 91       	pop	r17
     7a6:	08 95       	ret

000007a8 <_ZN10W5100Class8readSnCREh>:
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     7b0:	08 95       	ret

000007b2 <_ZN10W5100Class11readSnTX_WREh>:
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	18 2f       	mov	r17, r24
     7b8:	64 e2       	ldi	r22, 0x24	; 36
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     7c0:	08 2f       	mov	r16, r24
     7c2:	81 2f       	mov	r24, r17
     7c4:	65 e2       	ldi	r22, 0x25	; 37
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     7cc:	50 2f       	mov	r21, r16
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	24 2b       	or	r18, r20
     7d6:	35 2b       	or	r19, r21
     7d8:	c9 01       	movw	r24, r18
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>:
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
}

void W5100Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
     7e0:	9f 92       	push	r9
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	7c 01       	movw	r14, r24
     7f8:	96 2e       	mov	r9, r22
     7fa:	6a 01       	movw	r12, r20
     7fc:	59 01       	movw	r10, r18
  uint16_t ptr = readSnTX_WR(s);
     7fe:	86 2f       	mov	r24, r22
     800:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_ZN10W5100Class11readSnTX_WREh>
  ptr += data_offset;
     804:	c8 0e       	add	r12, r24
     806:	d9 1e       	adc	r13, r25
  uint16_t offset = ptr & SMASK;
     808:	96 01       	movw	r18, r12
     80a:	37 70       	andi	r19, 0x07	; 7
  uint16_t dstAddr = offset + SBASE[s];
     80c:	89 2d       	mov	r24, r9
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	e8 0e       	add	r14, r24
     816:	f9 1e       	adc	r15, r25
     818:	f7 01       	movw	r30, r14
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19

  if (offset + len > SSIZE) 
     822:	a9 01       	movw	r20, r18
     824:	40 0f       	add	r20, r16
     826:	51 1f       	adc	r21, r17
     828:	f8 e0       	ldi	r31, 0x08	; 8
     82a:	41 30       	cpi	r20, 0x01	; 1
     82c:	5f 07       	cpc	r21, r31
     82e:	90 f0       	brcs	.+36     	; 0x854 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0x74>
  {
    // Wrap around circular buffer
    uint16_t size = SSIZE - offset;
     830:	c0 e0       	ldi	r28, 0x00	; 0
     832:	d8 e0       	ldi	r29, 0x08	; 8
     834:	c2 1b       	sub	r28, r18
     836:	d3 0b       	sbc	r29, r19
    write(dstAddr, data, size);
     838:	b5 01       	movw	r22, r10
     83a:	ae 01       	movw	r20, r28
     83c:	0e 94 81 03 	call	0x702	; 0x702 <_ZN10W5100Class5writeEjPKhj>
    write(SBASE[s], data + size, len - size);
     840:	b5 01       	movw	r22, r10
     842:	6c 0f       	add	r22, r28
     844:	7d 1f       	adc	r23, r29
     846:	a8 01       	movw	r20, r16
     848:	4c 1b       	sub	r20, r28
     84a:	5d 0b       	sbc	r21, r29
     84c:	f7 01       	movw	r30, r14
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	02 c0       	rjmp	.+4      	; 0x858 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0x78>
  } 
  else {
    write(dstAddr, data, len);
     854:	b5 01       	movw	r22, r10
     856:	a8 01       	movw	r20, r16
     858:	0e 94 81 03 	call	0x702	; 0x702 <_ZN10W5100Class5writeEjPKhj>
  }

  ptr += len;
     85c:	b6 01       	movw	r22, r12
     85e:	60 0f       	add	r22, r16
     860:	71 1f       	adc	r23, r17
  writeSnTX_WR(s, ptr);
     862:	89 2d       	mov	r24, r9
     864:	0e 94 24 03 	call	0x648	; 0x648 <_ZN10W5100Class12writeSnTX_WREhj>
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	08 95       	ret

00000880 <_ZN10W5100Class20send_data_processingEhPKhj>:
  return val;
}


void W5100Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	fa 01       	movw	r30, r20
     886:	89 01       	movw	r16, r18
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	9f 01       	movw	r18, r30
     88e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
}
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	08 95       	ret

00000898 <_ZN10W5100Class12readSnRX_RSREh>:
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	18 2f       	mov	r17, r24
     89e:	66 e2       	ldi	r22, 0x26	; 38
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     8a6:	08 2f       	mov	r16, r24
     8a8:	81 2f       	mov	r24, r17
     8aa:	67 e2       	ldi	r22, 0x27	; 39
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     8b2:	50 2f       	mov	r21, r16
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	28 2f       	mov	r18, r24
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	24 2b       	or	r18, r20
     8bc:	35 2b       	or	r19, r21
     8be:	c9 01       	movw	r24, r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	08 95       	ret

000008c6 <_ZN10W5100Class17getRXReceivedSizeEh>:
  while (val != val1);
  return val;
}

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	f6 2e       	mov	r15, r22
  uint16_t val=0,val1=0;
     8d4:	c0 e0       	ldi	r28, 0x00	; 0
     8d6:	d0 e0       	ldi	r29, 0x00	; 0
  do {
    val1 = readSnRX_RSR(s);
     8d8:	8f 2d       	mov	r24, r15
     8da:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN10W5100Class12readSnRX_RSREh>
     8de:	8c 01       	movw	r16, r24
    if (val1 != 0)
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	21 f0       	breq	.+8      	; 0x8ec <_ZN10W5100Class17getRXReceivedSizeEh+0x26>
      val = readSnRX_RSR(s);
     8e4:	8f 2d       	mov	r24, r15
     8e6:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN10W5100Class12readSnRX_RSREh>
     8ea:	ec 01       	movw	r28, r24
}

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
  uint16_t val=0,val1=0;
  do {
     8ec:	c0 17       	cp	r28, r16
     8ee:	d1 07       	cpc	r29, r17
     8f0:	99 f7       	brne	.-26     	; 0x8d8 <_ZN10W5100Class17getRXReceivedSizeEh+0x12>
    if (val1 != 0)
      val = readSnRX_RSR(s);
  } 
  while (val != val1);
  return val;
}
     8f2:	ce 01       	movw	r24, r28
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	08 95       	ret

00000902 <_ZN10W5100Class12readSnTX_FSREh>:
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	18 2f       	mov	r17, r24
     908:	60 e2       	ldi	r22, 0x20	; 32
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     910:	08 2f       	mov	r16, r24
     912:	81 2f       	mov	r24, r17
     914:	61 e2       	ldi	r22, 0x21	; 33
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN10W5100Class6readSnEhj>
     91c:	50 2f       	mov	r21, r16
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	28 2f       	mov	r18, r24
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	24 2b       	or	r18, r20
     926:	35 2b       	or	r19, r21
     928:	c9 01       	movw	r24, r18
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <_ZN10W5100Class13getTXFreeSizeEh>:
    RBASE[i] = RXBUF_BASE + RSIZE * i;
  }
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	f6 2e       	mov	r15, r22
  uint16_t val=0, val1=0;
     93e:	c0 e0       	ldi	r28, 0x00	; 0
     940:	d0 e0       	ldi	r29, 0x00	; 0
  do {
    val1 = readSnTX_FSR(s);
     942:	8f 2d       	mov	r24, r15
     944:	0e 94 81 04 	call	0x902	; 0x902 <_ZN10W5100Class12readSnTX_FSREh>
     948:	8c 01       	movw	r16, r24
    if (val1 != 0)
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	21 f0       	breq	.+8      	; 0x956 <_ZN10W5100Class13getTXFreeSizeEh+0x26>
      val = readSnTX_FSR(s);
     94e:	8f 2d       	mov	r24, r15
     950:	0e 94 81 04 	call	0x902	; 0x902 <_ZN10W5100Class12readSnTX_FSREh>
     954:	ec 01       	movw	r28, r24
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
  uint16_t val=0, val1=0;
  do {
     956:	c0 17       	cp	r28, r16
     958:	d1 07       	cpc	r29, r17
     95a:	99 f7       	brne	.-26     	; 0x942 <_ZN10W5100Class13getTXFreeSizeEh+0x12>
    if (val1 != 0)
      val = readSnTX_FSR(s);
  } 
  while (val != val1);
  return val;
}
     95c:	ce 01       	movw	r24, r28
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	08 95       	ret

0000096c <_ZN10W5100Class4readEjPhj>:
  resetSS();
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	6c 01       	movw	r12, r24
     97e:	ea 01       	movw	r28, r20
  for (uint16_t i=0; i<_len; i++)
     980:	e6 2e       	mov	r14, r22
     982:	f7 2e       	mov	r15, r23
     984:	00 e0       	ldi	r16, 0x00	; 0
     986:	10 e0       	ldi	r17, 0x00	; 0
     988:	18 c0       	rjmp	.+48     	; 0x9ba <_ZN10W5100Class4readEjPhj+0x4e>
  {
    setSS();
     98a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN10W5100Class5setSSEv>
    SPI.transfer(0x0F);
     98e:	8f e0       	ldi	r24, 0x0F	; 15
     990:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
    SPI.transfer(_addr >> 8);
     994:	8d 2d       	mov	r24, r13
     996:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
    SPI.transfer(_addr & 0xFF);
     99a:	8c 2d       	mov	r24, r12
     99c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
    _addr++;
     9a0:	08 94       	sec
     9a2:	c1 1c       	adc	r12, r1
     9a4:	d1 1c       	adc	r13, r1
    _buf[i] = SPI.transfer(0);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN8SPIClass8transferEh>
     9ac:	f7 01       	movw	r30, r14
     9ae:	81 93       	st	Z+, r24
     9b0:	7f 01       	movw	r14, r30
    resetSS();
     9b2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN10W5100Class7resetSSEv>
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
     9b6:	0f 5f       	subi	r16, 0xFF	; 255
     9b8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ba:	0c 17       	cp	r16, r28
     9bc:	1d 07       	cpc	r17, r29
     9be:	28 f3       	brcs	.-54     	; 0x98a <_ZN10W5100Class4readEjPhj+0x1e>
    _addr++;
    _buf[i] = SPI.transfer(0);
    resetSS();
  }
  return _len;
}
     9c0:	ce 01       	movw	r24, r28
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	08 95       	ret

000009d4 <_ZN10W5100Class9read_dataEhPVhS1_j>:
    writeSnRX_RD(s, ptr);
  }
}

void W5100Class::read_data(SOCKET s, volatile uint8_t *src, volatile uint8_t *dst, uint16_t len)
{
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	69 01       	movw	r12, r18
     9e6:	78 01       	movw	r14, r16
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  src_mask = (uint16_t)src & RMASK;
     9e8:	57 70       	andi	r21, 0x07	; 7
  src_ptr = RBASE[s] + src_mask;
     9ea:	c6 2f       	mov	r28, r22
     9ec:	d0 e0       	ldi	r29, 0x00	; 0
     9ee:	24 96       	adiw	r28, 0x04	; 4
     9f0:	cc 0f       	add	r28, r28
     9f2:	dd 1f       	adc	r29, r29
     9f4:	c8 0f       	add	r28, r24
     9f6:	d9 1f       	adc	r29, r25
     9f8:	88 81       	ld	r24, Y
     9fa:	99 81       	ldd	r25, Y+1	; 0x01
     9fc:	84 0f       	add	r24, r20
     9fe:	95 1f       	adc	r25, r21

  if( (src_mask + len) > RSIZE ) 
     a00:	98 01       	movw	r18, r16
     a02:	24 0f       	add	r18, r20
     a04:	35 1f       	adc	r19, r21
     a06:	68 e0       	ldi	r22, 0x08	; 8
     a08:	21 30       	cpi	r18, 0x01	; 1
     a0a:	36 07       	cpc	r19, r22
     a0c:	88 f0       	brcs	.+34     	; 0xa30 <_ZN10W5100Class9read_dataEhPVhS1_j+0x5c>
  {
    size = RSIZE - src_mask;
     a0e:	00 e0       	ldi	r16, 0x00	; 0
     a10:	18 e0       	ldi	r17, 0x08	; 8
     a12:	04 1b       	sub	r16, r20
     a14:	15 0b       	sbc	r17, r21
    read(src_ptr, (uint8_t *)dst, size);
     a16:	b6 01       	movw	r22, r12
     a18:	a8 01       	movw	r20, r16
     a1a:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN10W5100Class4readEjPhj>
    dst += size;
     a1e:	b6 01       	movw	r22, r12
     a20:	60 0f       	add	r22, r16
     a22:	71 1f       	adc	r23, r17
    read(RBASE[s], (uint8_t *) dst, len - size);
     a24:	a7 01       	movw	r20, r14
     a26:	40 1b       	sub	r20, r16
     a28:	51 0b       	sbc	r21, r17
     a2a:	88 81       	ld	r24, Y
     a2c:	99 81       	ldd	r25, Y+1	; 0x01
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <_ZN10W5100Class9read_dataEhPVhS1_j+0x60>
  } 
  else
    read(src_ptr, (uint8_t *) dst, len);
     a30:	b6 01       	movw	r22, r12
     a32:	a8 01       	movw	r20, r16
     a34:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN10W5100Class4readEjPhj>
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <_ZN10W5100Class20recv_data_processingEhPhjh>:
  writeSnTX_WR(s, ptr);
}


void W5100Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
{
     a4a:	8f 92       	push	r8
     a4c:	9f 92       	push	r9
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	5c 01       	movw	r10, r24
     a64:	e6 2e       	mov	r14, r22
     a66:	4a 01       	movw	r8, r20
     a68:	69 01       	movw	r12, r18
     a6a:	f0 2e       	mov	r15, r16
  uint16_t ptr;
  ptr = readSnRX_RD(s);
     a6c:	86 2f       	mov	r24, r22
     a6e:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN10W5100Class11readSnRX_RDEh>
     a72:	ec 01       	movw	r28, r24
  read_data(s, (uint8_t *)ptr, data, len);
     a74:	c5 01       	movw	r24, r10
     a76:	6e 2d       	mov	r22, r14
     a78:	ae 01       	movw	r20, r28
     a7a:	94 01       	movw	r18, r8
     a7c:	86 01       	movw	r16, r12
     a7e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN10W5100Class9read_dataEhPVhS1_j>
  if (!peek)
     a82:	ff 20       	and	r15, r15
     a84:	31 f4       	brne	.+12     	; 0xa92 <_ZN10W5100Class20recv_data_processingEhPhjh+0x48>
  {
    ptr += len;
     a86:	be 01       	movw	r22, r28
     a88:	6c 0d       	add	r22, r12
     a8a:	7d 1d       	adc	r23, r13
    writeSnRX_RD(s, ptr);
     a8c:	8e 2d       	mov	r24, r14
     a8e:	0e 94 02 01 	call	0x204	; 0x204 <_ZN10W5100Class12writeSnRX_RDEhj>
  }
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	bf 90       	pop	r11
     aa4:	af 90       	pop	r10
     aa6:	9f 90       	pop	r9
     aa8:	8f 90       	pop	r8
     aaa:	08 95       	ret

00000aac <_ZN10W5100Class9execCmdSnEh7SockCMD>:
    resetSS();
  }
  return _len;
}

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd) {
     aac:	1f 93       	push	r17
     aae:	16 2f       	mov	r17, r22
  // Send command to socket
  writeSnCR(s, _cmd);
     ab0:	86 2f       	mov	r24, r22
     ab2:	64 2f       	mov	r22, r20
     ab4:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN10W5100Class9writeSnCREhh>
  // Wait for command to complete
  while (readSnCR(s))
     ab8:	81 2f       	mov	r24, r17
     aba:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN10W5100Class8readSnCREh>
     abe:	88 23       	and	r24, r24
     ac0:	d9 f7       	brne	.-10     	; 0xab8 <_ZN10W5100Class9execCmdSnEh7SockCMD+0xc>
    ;
}
     ac2:	1f 91       	pop	r17
     ac4:	08 95       	ret

00000ac6 <_ZN11EthernetUDP8remoteIPEv>:
     ac6:	fc 01       	movw	r30, r24
     ac8:	27 e3       	ldi	r18, 0x37	; 55
     aca:	32 e0       	ldi	r19, 0x02	; 2
     acc:	31 83       	std	Z+1, r19	; 0x01
     ace:	20 83       	st	Z, r18
     ad0:	db 01       	movw	r26, r22
     ad2:	51 96       	adiw	r26, 0x11	; 17
     ad4:	2d 91       	ld	r18, X+
     ad6:	3d 91       	ld	r19, X+
     ad8:	4d 91       	ld	r20, X+
     ada:	5c 91       	ld	r21, X
     adc:	54 97       	sbiw	r26, 0x14	; 20
     ade:	22 83       	std	Z+2, r18	; 0x02
     ae0:	33 83       	std	Z+3, r19	; 0x03
     ae2:	44 83       	std	Z+4, r20	; 0x04
     ae4:	55 83       	std	Z+5, r21	; 0x05
     ae6:	08 95       	ret

00000ae8 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>:
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
     ae8:	4f 92       	push	r4
     aea:	5f 92       	push	r5
     aec:	6f 92       	push	r6
     aee:	7f 92       	push	r7
     af0:	8f 92       	push	r8
     af2:	9f 92       	push	r9
     af4:	af 92       	push	r10
     af6:	bf 92       	push	r11
     af8:	cf 92       	push	r12
     afa:	df 92       	push	r13
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	df 93       	push	r29
     b06:	cf 93       	push	r28
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	ac 97       	sbiw	r28, 0x2c	; 44
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	7c 01       	movw	r14, r24
     b1a:	56 2e       	mov	r5, r22
     b1c:	44 2e       	mov	r4, r20
     b1e:	75 2e       	mov	r7, r21
};

     b20:	ed e0       	ldi	r30, 0x0D	; 13
     b22:	8e 2e       	mov	r8, r30
     b24:	91 2c       	mov	r9, r1
     b26:	8c 0e       	add	r8, r28
     b28:	9d 1e       	adc	r9, r29
     b2a:	70 e2       	ldi	r23, 0x20	; 32
     b2c:	67 2e       	mov	r6, r23
     b2e:	f4 01       	movw	r30, r8
     b30:	26 2d       	mov	r18, r6
     b32:	11 92       	st	Z+, r1
     b34:	2a 95       	dec	r18
     b36:	e9 f7       	brne	.-6      	; 0xb32 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x4a>
#endif
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	6f ef       	ldi	r22, 0xFF	; 255
     b3e:	4f ef       	ldi	r20, 0xFF	; 255
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	0f ef       	ldi	r16, 0xFF	; 255
     b44:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
     b48:	87 01       	movw	r16, r14
     b4a:	0e 5d       	subi	r16, 0xDE	; 222
     b4c:	1f 4f       	sbci	r17, 0xFF	; 255

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     b4e:	87 e3       	ldi	r24, 0x37	; 55
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	98 87       	std	Y+8, r25	; 0x08
     b54:	8f 83       	std	Y+7, r24	; 0x07
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	ad 81       	ldd	r26, Y+5	; 0x05
     b5c:	be 81       	ldd	r27, Y+6	; 0x06
     b5e:	89 87       	std	Y+9, r24	; 0x09
     b60:	9a 87       	std	Y+10, r25	; 0x0a
     b62:	ab 87       	std	Y+11, r26	; 0x0b
     b64:	bc 87       	std	Y+12, r27	; 0x0c
{
    uint8_t buffer[32];
    memset(buffer, 0, 32);
    IPAddress dest_addr( 255, 255, 255, 255 ); // Broadcast address

    if (-1 == _dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT))
     b66:	c8 01       	movw	r24, r16
     b68:	be 01       	movw	r22, r28
     b6a:	69 5f       	subi	r22, 0xF9	; 249
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	43 e4       	ldi	r20, 0x43	; 67
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	0e 94 87 10 	call	0x210e	; 0x210e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
     b76:	ef ef       	ldi	r30, 0xFF	; 255
     b78:	8f 3f       	cpi	r24, 0xFF	; 255
     b7a:	9e 07       	cpc	r25, r30
     b7c:	09 f4       	brne	.+2      	; 0xb80 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x98>
     b7e:	e2 c0       	rjmp	.+452    	; 0xd44 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x25c>
    {
        // FIXME Need to return errors
        return;
    }

    buffer[0] = DHCP_BOOTREQUEST;   // op
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = DHCP_HTYPE10MB;     // htype
     b84:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = DHCP_HLENETHERNET;  // hlen
     b86:	86 e0       	ldi	r24, 0x06	; 6
     b88:	8f 87       	std	Y+15, r24	; 0x0f
    buffer[3] = DHCP_HOPS;          // hops
     b8a:	18 8a       	std	Y+16, r1	; 0x10

    // xid
    unsigned long xid = htonl(_dhcpTransactionId);
     b8c:	f7 01       	movw	r30, r14
     b8e:	a4 80       	ldd	r10, Z+4	; 0x04
     b90:	b5 80       	ldd	r11, Z+5	; 0x05
     b92:	c6 80       	ldd	r12, Z+6	; 0x06
     b94:	d7 80       	ldd	r13, Z+7	; 0x07
     b96:	8d 2d       	mov	r24, r13
     b98:	99 27       	eor	r25, r25
     b9a:	aa 27       	eor	r26, r26
     b9c:	bb 27       	eor	r27, r27
     b9e:	5a 2d       	mov	r21, r10
     ba0:	44 27       	eor	r20, r20
     ba2:	33 27       	eor	r19, r19
     ba4:	22 27       	eor	r18, r18
     ba6:	82 2b       	or	r24, r18
     ba8:	93 2b       	or	r25, r19
     baa:	a4 2b       	or	r26, r20
     bac:	b5 2b       	or	r27, r21
     bae:	5c 2d       	mov	r21, r12
     bb0:	4b 2d       	mov	r20, r11
     bb2:	3a 2d       	mov	r19, r10
     bb4:	22 27       	eor	r18, r18
     bb6:	20 70       	andi	r18, 0x00	; 0
     bb8:	30 70       	andi	r19, 0x00	; 0
     bba:	50 70       	andi	r21, 0x00	; 0
     bbc:	82 2b       	or	r24, r18
     bbe:	93 2b       	or	r25, r19
     bc0:	a4 2b       	or	r26, r20
     bc2:	b5 2b       	or	r27, r21
     bc4:	55 27       	eor	r21, r21
     bc6:	4d 2d       	mov	r20, r13
     bc8:	3c 2d       	mov	r19, r12
     bca:	2b 2d       	mov	r18, r11
     bcc:	20 70       	andi	r18, 0x00	; 0
     bce:	40 70       	andi	r20, 0x00	; 0
     bd0:	50 70       	andi	r21, 0x00	; 0
     bd2:	82 2b       	or	r24, r18
     bd4:	93 2b       	or	r25, r19
     bd6:	a4 2b       	or	r26, r20
     bd8:	b5 2b       	or	r27, r21
    memcpy(buffer + 4, &(xid), 4);
     bda:	f4 01       	movw	r30, r8
     bdc:	84 83       	std	Z+4, r24	; 0x04
     bde:	95 83       	std	Z+5, r25	; 0x05
     be0:	a6 83       	std	Z+6, r26	; 0x06
     be2:	b7 83       	std	Z+7, r27	; 0x07

    // 8, 9 - seconds elapsed
    buffer[8] = ((secondsElapsed & 0xff00) >> 8);
     be4:	7d 8a       	std	Y+21, r7	; 0x15
    buffer[9] = (secondsElapsed & 0x00ff);
     be6:	4e 8a       	std	Y+22, r4	; 0x16

    // flags
    unsigned short flags = htons(DHCP_FLAGSBROADCAST);
    memcpy(buffer + 10, &(flags), 2);
     be8:	80 e8       	ldi	r24, 0x80	; 128
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	93 87       	std	Z+11, r25	; 0x0b
     bee:	82 87       	std	Z+10, r24	; 0x0a
    // yiaddr: already zeroed
    // siaddr: already zeroed
    // giaddr: already zeroed

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 28);
     bf0:	c8 01       	movw	r24, r16
     bf2:	b4 01       	movw	r22, r8
     bf4:	4c e1       	ldi	r20, 0x1C	; 28
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
     bfc:	f4 01       	movw	r30, r8
     bfe:	11 92       	st	Z+, r1
     c00:	6a 94       	dec	r6
     c02:	e9 f7       	brne	.-6      	; 0xbfe <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x116>

    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
     c04:	28 e0       	ldi	r18, 0x08	; 8
     c06:	62 2e       	mov	r6, r18
     c08:	71 2c       	mov	r7, r1
     c0a:	6e 0c       	add	r6, r14
     c0c:	7f 1c       	adc	r7, r15
     c0e:	d4 01       	movw	r26, r8
     c10:	f3 01       	movw	r30, r6
     c12:	86 e0       	ldi	r24, 0x06	; 6
     c14:	01 90       	ld	r0, Z+
     c16:	0d 92       	st	X+, r0
     c18:	81 50       	subi	r24, 0x01	; 1
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x12c>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 16);
     c1c:	9d e0       	ldi	r25, 0x0D	; 13
     c1e:	c9 2e       	mov	r12, r25
     c20:	d1 2c       	mov	r13, r1
     c22:	cc 0e       	add	r12, r28
     c24:	dd 1e       	adc	r13, r29
     c26:	c8 01       	movw	r24, r16
     c28:	b6 01       	movw	r22, r12
     c2a:	40 e1       	ldi	r20, 0x10	; 16
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
     c32:	80 e2       	ldi	r24, 0x20	; 32
     c34:	f6 01       	movw	r30, r12
     c36:	11 92       	st	Z+, r1
     c38:	8a 95       	dec	r24
     c3a:	e9 f7       	brne	.-6      	; 0xc36 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x14e>

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
     c3c:	aa 24       	eor	r10, r10
     c3e:	bb 24       	eor	r11, r11
        _dhcpUdpSocket.write(buffer, 32);
     c40:	8c 2c       	mov	r8, r12
     c42:	cd 2c       	mov	r12, r13
     c44:	c8 01       	movw	r24, r16
     c46:	68 2d       	mov	r22, r8
     c48:	7c 2d       	mov	r23, r12
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>
    memset(buffer, 0, 32); // clear local buffer

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
     c52:	08 94       	sec
     c54:	a1 1c       	adc	r10, r1
     c56:	b1 1c       	adc	r11, r1
     c58:	f6 e0       	ldi	r31, 0x06	; 6
     c5a:	af 16       	cp	r10, r31
     c5c:	b1 04       	cpc	r11, r1
     c5e:	91 f7       	brne	.-28     	; 0xc44 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x15c>
        _dhcpUdpSocket.write(buffer, 32);
    }
  
    // OPT - Magic Cookie
    buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
     c60:	83 e6       	ldi	r24, 0x63	; 99
     c62:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
     c64:	92 e8       	ldi	r25, 0x82	; 130
     c66:	9e 87       	std	Y+14, r25	; 0x0e
    buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
     c68:	93 e5       	ldi	r25, 0x53	; 83
     c6a:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
     c6c:	88 8b       	std	Y+16, r24	; 0x10

    // OPT - message type
    buffer[4] = dhcpMessageType;
     c6e:	85 e3       	ldi	r24, 0x35	; 53
     c70:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = 0x01;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = messageType; //DHCP_REQUEST;
     c76:	5b 8a       	std	Y+19, r5	; 0x13

    // OPT - client identifier
    buffer[7] = dhcpClientIdentifier;
     c78:	9d e3       	ldi	r25, 0x3D	; 61
     c7a:	9c 8b       	std	Y+20, r25	; 0x14
    buffer[8] = 0x07;
     c7c:	97 e0       	ldi	r25, 0x07	; 7
     c7e:	9d 8b       	std	Y+21, r25	; 0x15
    buffer[9] = 0x01;
     c80:	8e 8b       	std	Y+22, r24	; 0x16
    memcpy(buffer + 10, _dhcpMacAddr, 6);
     c82:	de 01       	movw	r26, r28
     c84:	57 96       	adiw	r26, 0x17	; 23
     c86:	f3 01       	movw	r30, r6
     c88:	86 e0       	ldi	r24, 0x06	; 6
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	81 50       	subi	r24, 0x01	; 1
     c90:	e1 f7       	brne	.-8      	; 0xc8a <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x1a2>

    // OPT - host name
    buffer[16] = hostName;
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	8d 8f       	std	Y+29, r24	; 0x1d
    buffer[17] = strlen(HOST_NAME) + 3; // length of hostname + last 3 bytes of mac address
     c96:	89 e0       	ldi	r24, 0x09	; 9
     c98:	8e 8f       	std	Y+30, r24	; 0x1e
    strcpy((char*)&(buffer[18]), HOST_NAME);
     c9a:	8d e0       	ldi	r24, 0x0D	; 13
     c9c:	c8 2e       	mov	r12, r24
     c9e:	d1 2c       	mov	r13, r1
     ca0:	cc 0e       	add	r12, r28
     ca2:	dd 1e       	adc	r13, r29
     ca4:	ce 01       	movw	r24, r28
     ca6:	4f 96       	adiw	r24, 0x1f	; 31
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	71 e0       	ldi	r23, 0x01	; 1
     cac:	0e 94 43 1c 	call	0x3886	; 0x3886 <strcpy>

    buffer[24] = _dhcpMacAddr[3];
     cb0:	f7 01       	movw	r30, r14
     cb2:	83 85       	ldd	r24, Z+11	; 0x0b
     cb4:	8d a3       	std	Y+37, r24	; 0x25
    buffer[25] = _dhcpMacAddr[4];
     cb6:	84 85       	ldd	r24, Z+12	; 0x0c
     cb8:	8e a3       	std	Y+38, r24	; 0x26
    buffer[26] = _dhcpMacAddr[5];
     cba:	85 85       	ldd	r24, Z+13	; 0x0d
     cbc:	8f a3       	std	Y+39, r24	; 0x27

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 27);
     cbe:	c8 01       	movw	r24, r16
     cc0:	b6 01       	movw	r22, r12
     cc2:	4b e1       	ldi	r20, 0x1B	; 27
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    if(messageType == DHCP_REQUEST)
     cca:	f5 2d       	mov	r31, r5
     ccc:	f3 30       	cpi	r31, 0x03	; 3
     cce:	f1 f4       	brne	.+60     	; 0xd0c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x224>
    {
        buffer[0] = dhcpRequestedIPaddr;
     cd0:	82 e3       	ldi	r24, 0x32	; 50
     cd2:	8d 87       	std	Y+13, r24	; 0x0d
        buffer[1] = 0x04;
     cd4:	84 e0       	ldi	r24, 0x04	; 4
     cd6:	8e 87       	std	Y+14, r24	; 0x0e
        buffer[2] = _dhcpLocalIp[0];
     cd8:	f7 01       	movw	r30, r14
     cda:	96 85       	ldd	r25, Z+14	; 0x0e
     cdc:	9f 87       	std	Y+15, r25	; 0x0f
        buffer[3] = _dhcpLocalIp[1];
     cde:	97 85       	ldd	r25, Z+15	; 0x0f
     ce0:	98 8b       	std	Y+16, r25	; 0x10
        buffer[4] = _dhcpLocalIp[2];
     ce2:	90 89       	ldd	r25, Z+16	; 0x10
     ce4:	99 8b       	std	Y+17, r25	; 0x11
        buffer[5] = _dhcpLocalIp[3];
     ce6:	91 89       	ldd	r25, Z+17	; 0x11
     ce8:	9a 8b       	std	Y+18, r25	; 0x12

        buffer[6] = dhcpServerIdentifier;
     cea:	96 e3       	ldi	r25, 0x36	; 54
     cec:	9b 8b       	std	Y+19, r25	; 0x13
        buffer[7] = 0x04;
     cee:	8c 8b       	std	Y+20, r24	; 0x14
        buffer[8] = _dhcpDhcpServerIp[0];
     cf0:	82 8d       	ldd	r24, Z+26	; 0x1a
     cf2:	8d 8b       	std	Y+21, r24	; 0x15
        buffer[9] = _dhcpDhcpServerIp[1];
     cf4:	83 8d       	ldd	r24, Z+27	; 0x1b
     cf6:	8e 8b       	std	Y+22, r24	; 0x16
        buffer[10] = _dhcpDhcpServerIp[2];
     cf8:	84 8d       	ldd	r24, Z+28	; 0x1c
     cfa:	8f 8b       	std	Y+23, r24	; 0x17
        buffer[11] = _dhcpDhcpServerIp[3];
     cfc:	85 8d       	ldd	r24, Z+29	; 0x1d
     cfe:	88 8f       	std	Y+24, r24	; 0x18

        //put data in W5100 transmit buffer
        _dhcpUdpSocket.write(buffer, 12);
     d00:	c8 01       	movw	r24, r16
     d02:	b6 01       	movw	r22, r12
     d04:	4c e0       	ldi	r20, 0x0C	; 12
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>
    }
    
    buffer[0] = dhcpParamRequest;
     d0c:	87 e3       	ldi	r24, 0x37	; 55
     d0e:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = 0x06;
     d10:	86 e0       	ldi	r24, 0x06	; 6
     d12:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = subnetMask;
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = routersOnSubnet;
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	98 8b       	std	Y+16, r25	; 0x10
    buffer[4] = dns;
     d1c:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = domainName;
     d1e:	8f e0       	ldi	r24, 0x0F	; 15
     d20:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = dhcpT1value;
     d22:	8a e3       	ldi	r24, 0x3A	; 58
     d24:	8b 8b       	std	Y+19, r24	; 0x13
    buffer[7] = dhcpT2value;
     d26:	8b e3       	ldi	r24, 0x3B	; 59
     d28:	8c 8b       	std	Y+20, r24	; 0x14
    buffer[8] = endOption;
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	8d 8b       	std	Y+21, r24	; 0x15
    
    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 9);
     d2e:	c8 01       	movw	r24, r16
     d30:	be 01       	movw	r22, r28
     d32:	63 5f       	subi	r22, 0xF3	; 243
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	49 e0       	ldi	r20, 0x09	; 9
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    _dhcpUdpSocket.endPacket();
     d3e:	c8 01       	movw	r24, r16
     d40:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN11EthernetUDP9endPacketEv>
}
     d44:	ac 96       	adiw	r28, 0x2c	; 44
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	bf 90       	pop	r11
     d62:	af 90       	pop	r10
     d64:	9f 90       	pop	r9
     d66:	8f 90       	pop	r8
     d68:	7f 90       	pop	r7
     d6a:	6f 90       	pop	r6
     d6c:	5f 90       	pop	r5
     d6e:	4f 90       	pop	r4
     d70:	08 95       	ret

00000d72 <_ZN9DhcpClass17parseDHCPResponseEmRm>:

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
     d72:	2f 92       	push	r2
     d74:	3f 92       	push	r3
     d76:	4f 92       	push	r4
     d78:	5f 92       	push	r5
     d7a:	6f 92       	push	r6
     d7c:	7f 92       	push	r7
     d7e:	8f 92       	push	r8
     d80:	9f 92       	push	r9
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	e4 97       	sbiw	r28, 0x34	; 52
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	4c 01       	movw	r8, r24
     da6:	2a 01       	movw	r4, r20
     da8:	3b 01       	movw	r6, r22
     daa:	19 01       	movw	r2, r18
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();
     dac:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
     db0:	6b 01       	movw	r12, r22
     db2:	7c 01       	movw	r14, r24

    while(_dhcpUdpSocket.parsePacket() <= 0)
     db4:	84 01       	movw	r16, r8
     db6:	0e 5d       	subi	r16, 0xDE	; 222
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	12 c0       	rjmp	.+36     	; 0xde0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x6e>
    {
        if((millis() - startTime) > responseTimeout)
     dbc:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
     dc0:	6c 19       	sub	r22, r12
     dc2:	7d 09       	sbc	r23, r13
     dc4:	8e 09       	sbc	r24, r14
     dc6:	9f 09       	sbc	r25, r15
     dc8:	46 16       	cp	r4, r22
     dca:	57 06       	cpc	r5, r23
     dcc:	68 06       	cpc	r6, r24
     dce:	79 06       	cpc	r7, r25
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x62>
     dd2:	50 c1       	rjmp	.+672    	; 0x1074 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x302>
        {
            return 255;
        }
        delay(50);
     dd4:	62 e3       	ldi	r22, 0x32	; 50
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 08 18 	call	0x3010	; 0x3010 <delay>
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();

    while(_dhcpUdpSocket.parsePacket() <= 0)
     de0:	c8 01       	movw	r24, r16
     de2:	0e 94 1b 10 	call	0x2036	; 0x2036 <_ZN11EthernetUDP11parsePacketEv>
     de6:	18 16       	cp	r1, r24
     de8:	19 06       	cpc	r1, r25
     dea:	44 f7       	brge	.-48     	; 0xdbc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4a>
        }
        delay(50);
    }
    // start reading in the packet
    RIP_MSG_FIXED fixedMsg;
    _dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
     dec:	c8 01       	movw	r24, r16
     dee:	be 01       	movw	r22, r28
     df0:	63 5f       	subi	r22, 0xF3	; 243
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	42 e2       	ldi	r20, 0x22	; 34
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
  
    if(fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT)
     dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	09 f0       	breq	.+2      	; 0xe04 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x92>
     e02:	33 c1       	rjmp	.+614    	; 0x106a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2f8>
     e04:	f4 01       	movw	r30, r8
     e06:	87 a9       	ldd	r24, Z+55	; 0x37
     e08:	90 ad       	ldd	r25, Z+56	; 0x38
     e0a:	83 34       	cpi	r24, 0x43	; 67
     e0c:	91 05       	cpc	r25, r1
     e0e:	09 f0       	breq	.+2      	; 0xe12 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xa0>
     e10:	2c c1       	rjmp	.+600    	; 0x106a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2f8>
    {
        transactionId = ntohl(fixedMsg.xid);
     e12:	29 89       	ldd	r18, Y+17	; 0x11
     e14:	3a 89       	ldd	r19, Y+18	; 0x12
     e16:	4b 89       	ldd	r20, Y+19	; 0x13
     e18:	5c 89       	ldd	r21, Y+20	; 0x14
     e1a:	c5 2e       	mov	r12, r21
     e1c:	dd 24       	eor	r13, r13
     e1e:	ee 24       	eor	r14, r14
     e20:	ff 24       	eor	r15, r15
     e22:	b2 2f       	mov	r27, r18
     e24:	aa 27       	eor	r26, r26
     e26:	99 27       	eor	r25, r25
     e28:	88 27       	eor	r24, r24
     e2a:	c8 2a       	or	r12, r24
     e2c:	d9 2a       	or	r13, r25
     e2e:	ea 2a       	or	r14, r26
     e30:	fb 2a       	or	r15, r27
     e32:	b4 2f       	mov	r27, r20
     e34:	a3 2f       	mov	r26, r19
     e36:	92 2f       	mov	r25, r18
     e38:	88 27       	eor	r24, r24
     e3a:	80 70       	andi	r24, 0x00	; 0
     e3c:	90 70       	andi	r25, 0x00	; 0
     e3e:	b0 70       	andi	r27, 0x00	; 0
     e40:	c8 2a       	or	r12, r24
     e42:	d9 2a       	or	r13, r25
     e44:	ea 2a       	or	r14, r26
     e46:	fb 2a       	or	r15, r27
     e48:	23 2f       	mov	r18, r19
     e4a:	34 2f       	mov	r19, r20
     e4c:	45 2f       	mov	r20, r21
     e4e:	55 27       	eor	r21, r21
     e50:	20 70       	andi	r18, 0x00	; 0
     e52:	40 70       	andi	r20, 0x00	; 0
     e54:	50 70       	andi	r21, 0x00	; 0
     e56:	c2 2a       	or	r12, r18
     e58:	d3 2a       	or	r13, r19
     e5a:	e4 2a       	or	r14, r20
     e5c:	f5 2a       	or	r15, r21
     e5e:	f1 01       	movw	r30, r2
     e60:	c0 82       	st	Z, r12
     e62:	d1 82       	std	Z+1, r13	; 0x01
     e64:	e2 82       	std	Z+2, r14	; 0x02
     e66:	f3 82       	std	Z+3, r15	; 0x03
        if(memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 || (transactionId < _dhcpInitialTransactionId) || (transactionId > _dhcpTransactionId))
     e68:	b4 01       	movw	r22, r8
     e6a:	68 5f       	subi	r22, 0xF8	; 248
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	ce 01       	movw	r24, r28
     e70:	89 96       	adiw	r24, 0x29	; 41
     e72:	46 e0       	ldi	r20, 0x06	; 6
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	0e 94 2d 1c 	call	0x385a	; 0x385a <memcmp>
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	99 f4       	brne	.+38     	; 0xea4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x132>
     e7e:	f4 01       	movw	r30, r8
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	a2 81       	ldd	r26, Z+2	; 0x02
     e86:	b3 81       	ldd	r27, Z+3	; 0x03
     e88:	c8 16       	cp	r12, r24
     e8a:	d9 06       	cpc	r13, r25
     e8c:	ea 06       	cpc	r14, r26
     e8e:	fb 06       	cpc	r15, r27
     e90:	48 f0       	brcs	.+18     	; 0xea4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x132>
     e92:	84 81       	ldd	r24, Z+4	; 0x04
     e94:	95 81       	ldd	r25, Z+5	; 0x05
     e96:	a6 81       	ldd	r26, Z+6	; 0x06
     e98:	b7 81       	ldd	r27, Z+7	; 0x07
     e9a:	8c 15       	cp	r24, r12
     e9c:	9d 05       	cpc	r25, r13
     e9e:	ae 05       	cpc	r26, r14
     ea0:	bf 05       	cpc	r27, r15
     ea2:	28 f4       	brcc	.+10     	; 0xeae <_ZN9DhcpClass17parseDHCPResponseEmRm+0x13c>
        {
            // Need to read the rest of the packet here regardless
            _dhcpUdpSocket.flush();
     ea4:	c8 01       	movw	r24, r16
     ea6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN11EthernetUDP5flushEv>
            return 0;
     eaa:	bb 24       	eor	r11, r11
     eac:	e5 c0       	rjmp	.+458    	; 0x1078 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x306>
        }

        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
     eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb2:	af 8d       	ldd	r26, Y+31	; 0x1f
     eb4:	b8 a1       	ldd	r27, Y+32	; 0x20
     eb6:	f4 01       	movw	r30, r8
     eb8:	86 87       	std	Z+14, r24	; 0x0e
     eba:	97 87       	std	Z+15, r25	; 0x0f
     ebc:	a0 8b       	std	Z+16, r26	; 0x10
     ebe:	b1 8b       	std	Z+17, r27	; 0x11
     ec0:	be ec       	ldi	r27, 0xCE	; 206
     ec2:	eb 2e       	mov	r14, r27
     ec4:	f1 2c       	mov	r15, r1
        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
     ec6:	c8 01       	movw	r24, r16
     ec8:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
     ecc:	08 94       	sec
     ece:	e1 08       	sbc	r14, r1
     ed0:	f1 08       	sbc	r15, r1
        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
     ed2:	e1 14       	cp	r14, r1
     ed4:	f1 04       	cpc	r15, r1
     ed6:	b9 f7       	brne	.-18     	; 0xec6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x154>
     ed8:	bb 24       	eor	r11, r11
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
     eda:	c4 01       	movw	r24, r8
     edc:	4e 96       	adiw	r24, 0x1e	; 30
     ede:	98 ab       	std	Y+48, r25	; 0x30
     ee0:	8f a7       	std	Y+47, r24	; 0x2f
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
     ee2:	aa e1       	ldi	r26, 0x1A	; 26
     ee4:	4a 2e       	mov	r4, r26
     ee6:	51 2c       	mov	r5, r1
     ee8:	48 0c       	add	r4, r8
     eea:	59 1c       	adc	r5, r9
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
     eec:	1e 01       	movw	r2, r28
     eee:	08 94       	sec
     ef0:	21 1c       	adc	r2, r1
     ef2:	31 1c       	adc	r3, r1
     ef4:	f7 e0       	ldi	r31, 0x07	; 7
     ef6:	6f 2e       	mov	r6, r31
     ef8:	71 2c       	mov	r7, r1
     efa:	6c 0e       	add	r6, r28
     efc:	7d 1e       	adc	r7, r29
                    type = _dhcpUdpSocket.read();
                    break;
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
     efe:	f4 01       	movw	r30, r8
     f00:	72 96       	adiw	r30, 0x12	; 18
     f02:	fa ab       	std	Y+50, r31	; 0x32
     f04:	e9 ab       	std	Y+49, r30	; 0x31
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
     f06:	c4 01       	movw	r24, r8
     f08:	46 96       	adiw	r24, 0x16	; 22
     f0a:	9c ab       	std	Y+52, r25	; 0x34
     f0c:	8b ab       	std	Y+51, r24	; 0x33
     f0e:	a5 c0       	rjmp	.+330    	; 0x105a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
        {
            switch (_dhcpUdpSocket.read()) 
     f10:	c8 01       	movw	r24, r16
     f12:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
     f16:	86 30       	cpi	r24, 0x06	; 6
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1ac>
     f1c:	45 c0       	rjmp	.+138    	; 0xfa8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x236>
     f1e:	87 30       	cpi	r24, 0x07	; 7
     f20:	91 05       	cpc	r25, r1
     f22:	54 f4       	brge	.+20     	; 0xf38 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1c6>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	91 05       	cpc	r25, r1
     f28:	d9 f0       	breq	.+54     	; 0xf60 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1ee>
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	91 05       	cpc	r25, r1
     f2e:	f9 f0       	breq	.+62     	; 0xf6e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fc>
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	09 f4       	brne	.+2      	; 0xf36 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1c4>
     f34:	92 c0       	rjmp	.+292    	; 0x105a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
     f36:	86 c0       	rjmp	.+268    	; 0x1044 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d2>
     f38:	86 33       	cpi	r24, 0x36	; 54
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1ce>
     f3e:	51 c0       	rjmp	.+162    	; 0xfe2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x270>
     f40:	8f 3f       	cpi	r24, 0xFF	; 255
     f42:	91 05       	cpc	r25, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d6>
     f46:	89 c0       	rjmp	.+274    	; 0x105a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
     f48:	85 33       	cpi	r24, 0x35	; 53
     f4a:	91 05       	cpc	r25, r1
     f4c:	09 f0       	breq	.+2      	; 0xf50 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1de>
     f4e:	7a c0       	rjmp	.+244    	; 0x1044 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d2>
                    
                case padOption :
                    break;
                
                case dhcpMessageType :
                    opt_len = _dhcpUdpSocket.read();
     f50:	c8 01       	movw	r24, r16
     f52:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
                    type = _dhcpUdpSocket.read();
     f56:	c8 01       	movw	r24, r16
     f58:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
     f5c:	b8 2e       	mov	r11, r24
                    break;
     f5e:	7d c0       	rjmp	.+250    	; 0x105a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
     f60:	c8 01       	movw	r24, r16
     f62:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
     f66:	c8 01       	movw	r24, r16
     f68:	69 a9       	ldd	r22, Y+49	; 0x31
     f6a:	7a a9       	ldd	r23, Y+50	; 0x32
     f6c:	5f c0       	rjmp	.+190    	; 0x102c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ba>
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
     f6e:	c8 01       	movw	r24, r16
     f70:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
     f74:	c8 2e       	mov	r12, r24
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
     f76:	c8 01       	movw	r24, r16
     f78:	6b a9       	ldd	r22, Y+51	; 0x33
     f7a:	7c a9       	ldd	r23, Y+52	; 0x34
     f7c:	44 e0       	ldi	r20, 0x04	; 4
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
     f84:	ee 24       	eor	r14, r14
     f86:	ff 24       	eor	r15, r15
     f88:	dd 24       	eor	r13, r13
     f8a:	ec ef       	ldi	r30, 0xFC	; 252
     f8c:	ff ef       	ldi	r31, 0xFF	; 255
     f8e:	ce 0e       	add	r12, r30
     f90:	df 1e       	adc	r13, r31
     f92:	06 c0       	rjmp	.+12     	; 0xfa0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22e>
                    {
                        _dhcpUdpSocket.read();
     f94:	c8 01       	movw	r24, r16
     f96:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
     f9a:	08 94       	sec
     f9c:	e1 1c       	adc	r14, r1
     f9e:	f1 1c       	adc	r15, r1
     fa0:	ec 14       	cp	r14, r12
     fa2:	fd 04       	cpc	r15, r13
     fa4:	bc f3       	brlt	.-18     	; 0xf94 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x222>
     fa6:	59 c0       	rjmp	.+178    	; 0x105a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
     fae:	e8 2e       	mov	r14, r24
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
     fb0:	c8 01       	movw	r24, r16
     fb2:	6f a5       	ldd	r22, Y+47	; 0x2f
     fb4:	78 a9       	ldd	r23, Y+48	; 0x30
     fb6:	44 e0       	ldi	r20, 0x04	; 4
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
     fbe:	cc 24       	eor	r12, r12
     fc0:	dd 24       	eor	r13, r13
     fc2:	ff 24       	eor	r15, r15
     fc4:	8c ef       	ldi	r24, 0xFC	; 252
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
     fc8:	e8 0e       	add	r14, r24
     fca:	f9 1e       	adc	r15, r25
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <_ZN9DhcpClass17parseDHCPResponseEmRm+0x268>
                    {
                        _dhcpUdpSocket.read();
     fce:	c8 01       	movw	r24, r16
     fd0:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
     fd4:	08 94       	sec
     fd6:	c1 1c       	adc	r12, r1
     fd8:	d1 1c       	adc	r13, r1
     fda:	ce 14       	cp	r12, r14
     fdc:	df 04       	cpc	r13, r15
     fde:	bc f3       	brlt	.-18     	; 0xfce <_ZN9DhcpClass17parseDHCPResponseEmRm+0x25c>
     fe0:	3c c0       	rjmp	.+120    	; 0x105a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
     fe2:	c8 01       	movw	r24, r16
     fe4:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
     fe8:	e8 2e       	mov	r14, r24
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
     fea:	f4 01       	movw	r30, r8
     fec:	82 8d       	ldd	r24, Z+26	; 0x1a
     fee:	93 8d       	ldd	r25, Z+27	; 0x1b
     ff0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     ff2:	b5 8d       	ldd	r27, Z+29	; 0x1d
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	a1 05       	cpc	r26, r1
     ff8:	b1 05       	cpc	r27, r1
     ffa:	b1 f0       	breq	.+44     	; 0x1028 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2b6>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
     ffc:	c1 01       	movw	r24, r2
     ffe:	b2 01       	movw	r22, r4
    1000:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <_ZN9IPAddressC1EPKh>
    1004:	c3 01       	movw	r24, r6
    1006:	b8 01       	movw	r22, r16
    1008:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN11EthernetUDP8remoteIPEv>
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    100c:	2b 81       	ldd	r18, Y+3	; 0x03
    100e:	3c 81       	ldd	r19, Y+4	; 0x04
    1010:	4d 81       	ldd	r20, Y+5	; 0x05
    1012:	5e 81       	ldd	r21, Y+6	; 0x06
    1014:	f3 01       	movw	r30, r6
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	a4 81       	ldd	r26, Z+4	; 0x04
    101c:	b5 81       	ldd	r27, Z+5	; 0x05
    101e:	28 17       	cp	r18, r24
    1020:	39 07       	cpc	r19, r25
    1022:	4a 07       	cpc	r20, r26
    1024:	5b 07       	cpc	r21, r27
    1026:	59 f4       	brne	.+22     	; 0x103e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2cc>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    1028:	c8 01       	movw	r24, r16
    102a:	b2 01       	movw	r22, r4
    102c:	44 e0       	ldi	r20, 0x04	; 4
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
    1034:	12 c0       	rjmp	.+36     	; 0x105a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
                        {
                            _dhcpUdpSocket.read();
    1036:	c8 01       	movw	r24, r16
    1038:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
    103c:	ea 94       	dec	r14
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    103e:	ee 20       	and	r14, r14
    1040:	d1 f7       	brne	.-12     	; 0x1036 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2c4>
    1042:	0b c0       	rjmp	.+22     	; 0x105a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e8>
                    }
                    break;
                
                case dhcpIPaddrLeaseTime :
                default :
                    opt_len = _dhcpUdpSocket.read();
    1044:	c8 01       	movw	r24, r16
    1046:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
    104a:	e8 2e       	mov	r14, r24
                    // Skip over the rest of this option
                    while (opt_len--)
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2e4>
                    {
                        _dhcpUdpSocket.read();
    104e:	c8 01       	movw	r24, r16
    1050:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
    1054:	ea 94       	dec	r14
                
                case dhcpIPaddrLeaseTime :
                default :
                    opt_len = _dhcpUdpSocket.read();
                    // Skip over the rest of this option
                    while (opt_len--)
    1056:	ee 20       	and	r14, r14
    1058:	d1 f7       	brne	.-12     	; 0x104e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2dc>
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 a5 10 	call	0x214a	; 0x214a <_ZN11EthernetUDP9availableEv>
    1060:	18 16       	cp	r1, r24
    1062:	19 06       	cpc	r1, r25
    1064:	0c f4       	brge	.+2      	; 0x1068 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2f6>
    1066:	54 cf       	rjmp	.-344    	; 0xf10 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x19e>
    1068:	01 c0       	rjmp	.+2      	; 0x106c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2fa>
    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    uint8_t type = 0;
    106a:	bb 24       	eor	r11, r11
            }
        }
    }

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();
    106c:	c8 01       	movw	r24, r16
    106e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN11EthernetUDP5flushEv>

    return type;
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x306>

    while(_dhcpUdpSocket.parsePacket() <= 0)
    {
        if((millis() - startTime) > responseTimeout)
        {
            return 255;
    1074:	bb 24       	eor	r11, r11
    1076:	ba 94       	dec	r11

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();

    return type;
}
    1078:	8b 2d       	mov	r24, r11
    107a:	e4 96       	adiw	r28, 0x34	; 52
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	bf 90       	pop	r11
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	5f 90       	pop	r5
    10a2:	4f 90       	pop	r4
    10a4:	3f 90       	pop	r3
    10a6:	2f 90       	pop	r2
    10a8:	08 95       	ret

000010aa <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Dhcp.h"
#include "Arduino.h"
#include "util.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
    10aa:	2f 92       	push	r2
    10ac:	3f 92       	push	r3
    10ae:	4f 92       	push	r4
    10b0:	5f 92       	push	r5
    10b2:	6f 92       	push	r6
    10b4:	7f 92       	push	r7
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	2a 97       	sbiw	r28, 0x0a	; 10
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	6c 01       	movw	r12, r24
    10e0:	2f 83       	std	Y+7, r18	; 0x07
    10e2:	38 87       	std	Y+8, r19	; 0x08
    10e4:	49 87       	std	Y+9, r20	; 0x09
    10e6:	5a 87       	std	Y+10, r21	; 0x0a
    10e8:	17 01       	movw	r2, r14
    10ea:	28 01       	movw	r4, r16
    uint8_t dhcp_state = STATE_DHCP_START;
    uint8_t messageType = 0;
  
    // zero out _dhcpMacAddr, _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpMacAddr, 0, 26); 
    10ec:	08 96       	adiw	r24, 0x08	; 8
    10ee:	2a e1       	ldi	r18, 0x1A	; 26
    10f0:	dc 01       	movw	r26, r24
    10f2:	1d 92       	st	X+, r1
    10f4:	2a 95       	dec	r18
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x48>

    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
    10f8:	fc 01       	movw	r30, r24
    10fa:	86 2f       	mov	r24, r22
    10fc:	97 2f       	mov	r25, r23
    10fe:	dc 01       	movw	r26, r24
    1100:	86 e0       	ldi	r24, 0x06	; 6
    1102:	0d 90       	ld	r0, X+
    1104:	01 92       	st	Z+, r0
    1106:	81 50       	subi	r24, 0x01	; 1
    1108:	e1 f7       	brne	.-8      	; 0x1102 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x58>
  
    // Pick an initial transaction ID
    _dhcpTransactionId = random(1UL, 2000UL);
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	20 ed       	ldi	r18, 0xD0	; 208
    1114:	37 e0       	ldi	r19, 0x07	; 7
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <_Z6randomll>
    111e:	f6 01       	movw	r30, r12
    1120:	64 83       	std	Z+4, r22	; 0x04
    1122:	75 83       	std	Z+5, r23	; 0x05
    1124:	86 83       	std	Z+6, r24	; 0x06
    1126:	97 83       	std	Z+7, r25	; 0x07
    _dhcpInitialTransactionId = _dhcpTransactionId;
    1128:	60 83       	st	Z, r22
    112a:	71 83       	std	Z+1, r23	; 0x01
    112c:	82 83       	std	Z+2, r24	; 0x02
    112e:	93 83       	std	Z+3, r25	; 0x03

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    1130:	96 01       	movw	r18, r12
    1132:	2e 5d       	subi	r18, 0xDE	; 222
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	3e 83       	std	Y+6, r19	; 0x06
    1138:	2d 83       	std	Y+5, r18	; 0x05
    113a:	c9 01       	movw	r24, r18
    113c:	64 e4       	ldi	r22, 0x44	; 68
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	0e 94 ac 10 	call	0x2158	; 0x2158 <_ZN11EthernetUDP5beginEj>
    1144:	88 23       	and	r24, r24
    1146:	09 f4       	brne	.+2      	; 0x114a <_ZN9DhcpClass13beginWithDHCPEPhmm+0xa0>
    1148:	87 c0       	rjmp	.+270    	; 0x1258 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x1ae>
    
    presend_DHCP();
    
    int result = 0;
    
    unsigned long startTime = millis();
    114a:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    114e:	4b 01       	movw	r8, r22
    1150:	5c 01       	movw	r10, r24
      return 0;
    }
    
    presend_DHCP();
    
    int result = 0;
    1152:	ee 24       	eor	r14, r14
    1154:	ff 24       	eor	r15, r15
#include "Arduino.h"
#include "util.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
    uint8_t dhcp_state = STATE_DHCP_START;
    1156:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
        else if(dhcp_state == STATE_DHCP_REQUEST)
        {
            uint32_t respId;
            messageType = parseDHCPResponse(responseTimeout, respId);
    1158:	3e 01       	movw	r6, r28
    115a:	08 94       	sec
    115c:	61 1c       	adc	r6, r1
    115e:	71 1c       	adc	r7, r1
    
    unsigned long startTime = millis();
    
    while(dhcp_state != STATE_DHCP_LEASED)
    {
        if(dhcp_state == STATE_DHCP_START)
    1160:	11 23       	and	r17, r17
    1162:	f9 f4       	brne	.+62     	; 0x11a2 <_ZN9DhcpClass13beginWithDHCPEPhmm+0xf8>
        {
            _dhcpTransactionId++;
    1164:	f6 01       	movw	r30, r12
    1166:	84 81       	ldd	r24, Z+4	; 0x04
    1168:	95 81       	ldd	r25, Z+5	; 0x05
    116a:	a6 81       	ldd	r26, Z+6	; 0x06
    116c:	b7 81       	ldd	r27, Z+7	; 0x07
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	a1 1d       	adc	r26, r1
    1172:	b1 1d       	adc	r27, r1
    1174:	84 83       	std	Z+4, r24	; 0x04
    1176:	95 83       	std	Z+5, r25	; 0x05
    1178:	a6 83       	std	Z+6, r26	; 0x06
    117a:	b7 83       	std	Z+7, r27	; 0x07
            
            send_DHCP_MESSAGE(DHCP_DISCOVER, ((millis() - startTime) / 1000));
    117c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    1180:	68 19       	sub	r22, r8
    1182:	79 09       	sbc	r23, r9
    1184:	8a 09       	sbc	r24, r10
    1186:	9b 09       	sbc	r25, r11
    1188:	28 ee       	ldi	r18, 0xE8	; 232
    118a:	33 e0       	ldi	r19, 0x03	; 3
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	0e 94 83 19 	call	0x3306	; 0x3306 <__udivmodsi4>
    1194:	c6 01       	movw	r24, r12
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	a9 01       	movw	r20, r18
    119a:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            dhcp_state = STATE_DHCP_DISCOVER;
    119e:	11 e0       	ldi	r17, 0x01	; 1
    11a0:	36 c0       	rjmp	.+108    	; 0x120e <_ZN9DhcpClass13beginWithDHCPEPhmm+0x164>
        }
        else if(dhcp_state == STATE_DHCP_DISCOVER)
    11a2:	11 30       	cpi	r17, 0x01	; 1
    11a4:	21 f5       	brne	.+72     	; 0x11ee <_ZN9DhcpClass13beginWithDHCPEPhmm+0x144>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(responseTimeout, respId);
    11a6:	c6 01       	movw	r24, r12
    11a8:	b2 01       	movw	r22, r4
    11aa:	a1 01       	movw	r20, r2
    11ac:	93 01       	movw	r18, r6
    11ae:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN9DhcpClass17parseDHCPResponseEmRm>
            if(messageType == DHCP_OFFER)
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	49 f5       	brne	.+82     	; 0x1208 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x15e>
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	ab 81       	ldd	r26, Y+3	; 0x03
    11bc:	bc 81       	ldd	r27, Y+4	; 0x04
    11be:	f6 01       	movw	r30, r12
    11c0:	84 83       	std	Z+4, r24	; 0x04
    11c2:	95 83       	std	Z+5, r25	; 0x05
    11c4:	a6 83       	std	Z+6, r26	; 0x06
    11c6:	b7 83       	std	Z+7, r27	; 0x07
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    11c8:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    11cc:	68 19       	sub	r22, r8
    11ce:	79 09       	sbc	r23, r9
    11d0:	8a 09       	sbc	r24, r10
    11d2:	9b 09       	sbc	r25, r11
    11d4:	28 ee       	ldi	r18, 0xE8	; 232
    11d6:	33 e0       	ldi	r19, 0x03	; 3
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	0e 94 83 19 	call	0x3306	; 0x3306 <__udivmodsi4>
    11e0:	c6 01       	movw	r24, r12
    11e2:	63 e0       	ldi	r22, 0x03	; 3
    11e4:	a9 01       	movw	r20, r18
    11e6:	0e 94 74 05 	call	0xae8	; 0xae8 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
                dhcp_state = STATE_DHCP_REQUEST;
    11ea:	12 e0       	ldi	r17, 0x02	; 2
    11ec:	10 c0       	rjmp	.+32     	; 0x120e <_ZN9DhcpClass13beginWithDHCPEPhmm+0x164>
            }
        }
        else if(dhcp_state == STATE_DHCP_REQUEST)
    11ee:	12 30       	cpi	r17, 0x02	; 2
    11f0:	71 f4       	brne	.+28     	; 0x120e <_ZN9DhcpClass13beginWithDHCPEPhmm+0x164>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(responseTimeout, respId);
    11f2:	c6 01       	movw	r24, r12
    11f4:	b2 01       	movw	r22, r4
    11f6:	a1 01       	movw	r20, r2
    11f8:	93 01       	movw	r18, r6
    11fa:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN9DhcpClass17parseDHCPResponseEmRm>
            if(messageType == DHCP_ACK)
    11fe:	85 30       	cpi	r24, 0x05	; 5
    1200:	09 f4       	brne	.+2      	; 0x1204 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x15a>
    1202:	46 c0       	rjmp	.+140    	; 0x1290 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x1e6>
            {
                dhcp_state = STATE_DHCP_LEASED;
                result = 1;
            }
            else if(messageType == DHCP_NAK)
    1204:	86 30       	cpi	r24, 0x06	; 6
    1206:	11 f0       	breq	.+4      	; 0x120c <_ZN9DhcpClass13beginWithDHCPEPhmm+0x162>
                dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
    1208:	8f 3f       	cpi	r24, 0xFF	; 255
    120a:	09 f4       	brne	.+2      	; 0x120e <_ZN9DhcpClass13beginWithDHCPEPhmm+0x164>
        {
            messageType = 0;
            dhcp_state = STATE_DHCP_START;
    120c:	10 e0       	ldi	r17, 0x00	; 0
        }
        
        if(result != 1 && ((millis() - startTime) > timeout))
    120e:	f1 e0       	ldi	r31, 0x01	; 1
    1210:	ef 16       	cp	r14, r31
    1212:	f1 04       	cpc	r15, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x16e>
    1216:	41 c0       	rjmp	.+130    	; 0x129a <_ZN9DhcpClass13beginWithDHCPEPhmm+0x1f0>
    1218:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    121c:	68 19       	sub	r22, r8
    121e:	79 09       	sbc	r23, r9
    1220:	8a 09       	sbc	r24, r10
    1222:	9b 09       	sbc	r25, r11
    1224:	2f 81       	ldd	r18, Y+7	; 0x07
    1226:	38 85       	ldd	r19, Y+8	; 0x08
    1228:	49 85       	ldd	r20, Y+9	; 0x09
    122a:	5a 85       	ldd	r21, Y+10	; 0x0a
    122c:	26 17       	cp	r18, r22
    122e:	37 07       	cpc	r19, r23
    1230:	48 07       	cpc	r20, r24
    1232:	59 07       	cpc	r21, r25
    1234:	90 f5       	brcc	.+100    	; 0x129a <_ZN9DhcpClass13beginWithDHCPEPhmm+0x1f0>
            break;
    }
    
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN11EthernetUDP4stopEv>
    _dhcpTransactionId++;
    123e:	f6 01       	movw	r30, r12
    1240:	84 81       	ldd	r24, Z+4	; 0x04
    1242:	95 81       	ldd	r25, Z+5	; 0x05
    1244:	a6 81       	ldd	r26, Z+6	; 0x06
    1246:	b7 81       	ldd	r27, Z+7	; 0x07
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	a1 1d       	adc	r26, r1
    124c:	b1 1d       	adc	r27, r1
    124e:	84 83       	std	Z+4, r24	; 0x04
    1250:	95 83       	std	Z+5, r25	; 0x05
    1252:	a6 83       	std	Z+6, r26	; 0x06
    1254:	b7 83       	std	Z+7, r27	; 0x07
    
    return result;
    1256:	02 c0       	rjmp	.+4      	; 0x125c <_ZN9DhcpClass13beginWithDHCPEPhmm+0x1b2>
    _dhcpInitialTransactionId = _dhcpTransactionId;

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    {
      // Couldn't get a socket
      return 0;
    1258:	ee 24       	eor	r14, r14
    125a:	ff 24       	eor	r15, r15
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    _dhcpTransactionId++;
    
    return result;
}
    125c:	c7 01       	movw	r24, r14
    125e:	2a 96       	adiw	r28, 0x0a	; 10
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	7f 90       	pop	r7
    1284:	6f 90       	pop	r6
    1286:	5f 90       	pop	r5
    1288:	4f 90       	pop	r4
    128a:	3f 90       	pop	r3
    128c:	2f 90       	pop	r2
    128e:	08 95       	ret
            uint32_t respId;
            messageType = parseDHCPResponse(responseTimeout, respId);
            if(messageType == DHCP_ACK)
            {
                dhcp_state = STATE_DHCP_LEASED;
                result = 1;
    1290:	e1 e0       	ldi	r30, 0x01	; 1
    1292:	ee 2e       	mov	r14, r30
    1294:	f1 2c       	mov	r15, r1
        {
            uint32_t respId;
            messageType = parseDHCPResponse(responseTimeout, respId);
            if(messageType == DHCP_ACK)
            {
                dhcp_state = STATE_DHCP_LEASED;
    1296:	13 e0       	ldi	r17, 0x03	; 3
    1298:	ba cf       	rjmp	.-140    	; 0x120e <_ZN9DhcpClass13beginWithDHCPEPhmm+0x164>
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(dhcp_state != STATE_DHCP_LEASED)
    129a:	13 30       	cpi	r17, 0x03	; 3
    129c:	09 f0       	breq	.+2      	; 0x12a0 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x1f6>
    129e:	60 cf       	rjmp	.-320    	; 0x1160 <_ZN9DhcpClass13beginWithDHCPEPhmm+0xb6>
    12a0:	ca cf       	rjmp	.-108    	; 0x1236 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x18c>

000012a2 <_ZN9DhcpClass10getLocalIpEv>:

    return type;
}

IPAddress DhcpClass::getLocalIp()
{
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpLocalIp);
    12a8:	62 5f       	subi	r22, 0xF2	; 242
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <_ZN9IPAddressC1EPKh>
}
    12b0:	ce 01       	movw	r24, r28
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpSubnetMask);
    12be:	6e 5e       	subi	r22, 0xEE	; 238
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <_ZN9IPAddressC1EPKh>
}
    12c6:	ce 01       	movw	r24, r28
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpGatewayIp);
    12d4:	6a 5e       	subi	r22, 0xEA	; 234
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <_ZN9IPAddressC1EPKh>
}
    12dc:	ce 01       	movw	r24, r28
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <_ZN9DhcpClass14getDnsServerIpEv>:
{
    return IPAddress(_dhcpDhcpServerIp);
}

IPAddress DhcpClass::getDnsServerIp()
{
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDnsServerIp);
    12ea:	62 5e       	subi	r22, 0xE2	; 226
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <_ZN9IPAddressC1EPKh>
}
    12f2:	ce 01       	movw	r24, r28
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <_GLOBAL__I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    12fa:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    12fc:	8c e4       	ldi	r24, 0x4C	; 76
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	00 e0       	ldi	r16, 0x00	; 0
    1308:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
    130c:	0f 91       	pop	r16
    130e:	08 95       	ret

00001310 <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    1310:	fc 01       	movw	r30, r24

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    1312:	db 01       	movw	r26, r22
    1314:	12 96       	adiw	r26, 0x02	; 2
    1316:	2d 91       	ld	r18, X+
    1318:	3d 91       	ld	r19, X+
    131a:	4d 91       	ld	r20, X+
    131c:	5c 91       	ld	r21, X
    131e:	15 97       	sbiw	r26, 0x05	; 5
    1320:	22 83       	std	Z+2, r18	; 0x02
    1322:	33 83       	std	Z+3, r19	; 0x03
    1324:	44 83       	std	Z+4, r20	; 0x04
    1326:	55 83       	std	Z+5, r21	; 0x05
    iDNSServer = aDNSServer;
    iRequestId = 0;
    1328:	17 82       	std	Z+7, r1	; 0x07
    132a:	16 82       	std	Z+6, r1	; 0x06
}
    132c:	08 95       	ret

0000132e <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    132e:	e6 2f       	mov	r30, r22
    1330:	f7 2f       	mov	r31, r23

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    1332:	df 01       	movw	r26, r30
    1334:	8d 91       	ld	r24, X+
    1336:	88 23       	and	r24, r24
    1338:	e9 f7       	brne	.-6      	; 0x1334 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x6>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	20 c0       	rjmp	.+64     	; 0x1384 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x56>
        while (*p && (segment < 4))
        {
            if (*p == '.')
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    1344:	8f 3f       	cpi	r24, 0xFF	; 255
    1346:	91 05       	cpc	r25, r1
    1348:	09 f0       	breq	.+2      	; 0x134c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1e>
    134a:	9c f5       	brge	.+102    	; 0x13b2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x84>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    134c:	da 01       	movw	r26, r20
    134e:	a2 0f       	add	r26, r18
    1350:	b3 1f       	adc	r27, r19
    1352:	12 96       	adiw	r26, 0x02	; 2
    1354:	8c 93       	st	X, r24
    1356:	12 97       	sbiw	r26, 0x02	; 2
                    segment++;
    1358:	2f 5f       	subi	r18, 0xFF	; 255
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
                    segmentValue = 0;
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	11 c0       	rjmp	.+34     	; 0x1384 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x56>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    1362:	bc 01       	movw	r22, r24
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	b3 e0       	ldi	r27, 0x03	; 3
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	ba 95       	dec	r27
    1370:	e1 f7       	brne	.-8      	; 0x136a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x3c>
    1372:	68 0f       	add	r22, r24
    1374:	79 1f       	adc	r23, r25
    1376:	8a 2f       	mov	r24, r26
    1378:	99 27       	eor	r25, r25
    137a:	87 fd       	sbrc	r24, 7
    137c:	90 95       	com	r25
    137e:	c0 97       	sbiw	r24, 0x30	; 48
    1380:	86 0f       	add	r24, r22
    1382:	97 1f       	adc	r25, r23
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    1384:	a1 91       	ld	r26, Z+
    1386:	aa 23       	and	r26, r26
    1388:	31 f0       	breq	.+12     	; 0x1396 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x68>
    138a:	24 30       	cpi	r18, 0x04	; 4
    138c:	31 05       	cpc	r19, r1
    138e:	1c f4       	brge	.+6      	; 0x1396 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x68>
        {
            if (*p == '.')
    1390:	ae 32       	cpi	r26, 0x2E	; 46
    1392:	39 f7       	brne	.-50     	; 0x1362 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x34>
    1394:	d7 cf       	rjmp	.-82     	; 0x1344 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    1396:	8f 3f       	cpi	r24, 0xFF	; 255
    1398:	91 05       	cpc	r25, r1
    139a:	09 f0       	breq	.+2      	; 0x139e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x70>
    139c:	54 f4       	brge	.+20     	; 0x13b2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x84>
    139e:	24 30       	cpi	r18, 0x04	; 4
    13a0:	31 05       	cpc	r19, r1
    13a2:	3c f4       	brge	.+14     	; 0x13b2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x84>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    13a4:	24 0f       	add	r18, r20
    13a6:	35 1f       	adc	r19, r21
    13a8:	f9 01       	movw	r30, r18
    13aa:	82 83       	std	Z+2, r24	; 0x02
            return 1;
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x88>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    13b6:	c9 01       	movw	r24, r18
    13b8:	08 95       	ret

000013ba <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    13ba:	6f 92       	push	r6
    13bc:	7f 92       	push	r7
    13be:	8f 92       	push	r8
    13c0:	9f 92       	push	r9
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <_ZN9DNSClient12BuildRequestEPKc+0x1e>
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	7c 01       	movw	r14, r24
    13e0:	a6 2e       	mov	r10, r22
    13e2:	87 2e       	mov	r8, r23
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    13e4:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    13e8:	f7 01       	movw	r30, r14
    13ea:	77 83       	std	Z+7, r23	; 0x07
    13ec:	66 83       	std	Z+6, r22	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    13ee:	87 01       	movw	r16, r14
    13f0:	08 5f       	subi	r16, 0xF8	; 248
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	b7 01       	movw	r22, r14
    13f6:	6a 5f       	subi	r22, 0xFA	; 250
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	c8 01       	movw	r24, r16
    13fc:	42 e0       	ldi	r20, 0x02	; 2
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9b 83       	std	Y+3, r25	; 0x03
    140a:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    140c:	92 e0       	ldi	r25, 0x02	; 2
    140e:	e9 2e       	mov	r14, r25
    1410:	f1 2c       	mov	r15, r1
    1412:	ec 0e       	add	r14, r28
    1414:	fd 1e       	adc	r15, r29
    1416:	c8 01       	movw	r24, r16
    1418:	b7 01       	movw	r22, r14
    141a:	42 e0       	ldi	r20, 0x02	; 2
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	9b 83       	std	Y+3, r25	; 0x03
    1428:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    142a:	c8 01       	movw	r24, r16
    142c:	b7 01       	movw	r22, r14
    142e:	42 e0       	ldi	r20, 0x02	; 2
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    1436:	1b 82       	std	Y+3, r1	; 0x03
    1438:	1a 82       	std	Y+2, r1	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    143a:	c8 01       	movw	r24, r16
    143c:	b7 01       	movw	r22, r14
    143e:	42 e0       	ldi	r20, 0x02	; 2
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    1446:	c8 01       	movw	r24, r16
    1448:	b7 01       	movw	r22, r14
    144a:	42 e0       	ldi	r20, 0x02	; 2
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    1452:	c8 01       	movw	r24, r16
    1454:	b7 01       	movw	r22, r14
    1456:	42 e0       	ldi	r20, 0x02	; 2
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    // Build question
    const char* start =aName;
    const char* end =start;
    145e:	ca 2c       	mov	r12, r10
    1460:	d8 2c       	mov	r13, r8
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    1462:	b8 2c       	mov	r11, r8

        if (end-start > 0)
        {
            // Write out the size of this section
            len = end-start;
            iUdp.write(&len, sizeof(len));
    1464:	3e 01       	movw	r6, r28
    1466:	08 94       	sec
    1468:	61 1c       	adc	r6, r1
    146a:	71 1c       	adc	r7, r1
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    146c:	1f c0       	rjmp	.+62     	; 0x14ac <_ZN9DNSClient12BuildRequestEPKc+0xf2>
    146e:	f5 01       	movw	r30, r10
    1470:	6f 01       	movw	r12, r30
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    1472:	81 91       	ld	r24, Z+
    1474:	88 23       	and	r24, r24
    1476:	11 f0       	breq	.+4      	; 0x147c <_ZN9DNSClient12BuildRequestEPKc+0xc2>
    1478:	8e 32       	cpi	r24, 0x2E	; 46
    147a:	d1 f7       	brne	.-12     	; 0x1470 <_ZN9DNSClient12BuildRequestEPKc+0xb6>
        {
            end++;
        }

        if (end-start > 0)
    147c:	46 01       	movw	r8, r12
    147e:	8a 18       	sub	r8, r10
    1480:	9b 08       	sbc	r9, r11
    1482:	18 14       	cp	r1, r8
    1484:	19 04       	cpc	r1, r9
    1486:	74 f4       	brge	.+28     	; 0x14a4 <_ZN9DNSClient12BuildRequestEPKc+0xea>
        {
            // Write out the size of this section
            len = end-start;
    1488:	8c 2d       	mov	r24, r12
    148a:	8a 19       	sub	r24, r10
    148c:	89 83       	std	Y+1, r24	; 0x01
            iUdp.write(&len, sizeof(len));
    148e:	c8 01       	movw	r24, r16
    1490:	b3 01       	movw	r22, r6
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    149a:	c8 01       	movw	r24, r16
    149c:	b5 01       	movw	r22, r10
    149e:	a4 01       	movw	r20, r8
    14a0:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>
        }
        start = end+1;
    14a4:	56 01       	movw	r10, r12
    14a6:	08 94       	sec
    14a8:	a1 1c       	adc	r10, r1
    14aa:	b1 1c       	adc	r11, r1
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    14ac:	f6 01       	movw	r30, r12
    14ae:	80 81       	ld	r24, Z
    14b0:	88 23       	and	r24, r24
    14b2:	e9 f6       	brne	.-70     	; 0x146e <_ZN9DNSClient12BuildRequestEPKc+0xb4>
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    14b4:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write(&len, sizeof(len));
    14b6:	c8 01       	movw	r24, r16
    14b8:	be 01       	movw	r22, r28
    14ba:	6f 5f       	subi	r22, 0xFF	; 255
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    14c6:	c1 2c       	mov	r12, r1
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	d8 2e       	mov	r13, r24
    14cc:	db 82       	std	Y+3, r13	; 0x03
    14ce:	ca 82       	std	Y+2, r12	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    14d0:	c8 01       	movw	r24, r16
    14d2:	b7 01       	movw	r22, r14
    14d4:	42 e0       	ldi	r20, 0x02	; 2
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    14dc:	db 82       	std	Y+3, r13	; 0x03
    14de:	ca 82       	std	Y+2, r12	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    14e0:	c8 01       	movw	r24, r16
    14e2:	b7 01       	movw	r22, r14
    14e4:	42 e0       	ldi	r20, 0x02	; 2
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	bf 90       	pop	r11
    1508:	af 90       	pop	r10
    150a:	9f 90       	pop	r9
    150c:	8f 90       	pop	r8
    150e:	7f 90       	pop	r7
    1510:	6f 90       	pop	r6
    1512:	08 95       	ret

00001514 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    1514:	2f 92       	push	r2
    1516:	3f 92       	push	r3
    1518:	4f 92       	push	r4
    151a:	5f 92       	push	r5
    151c:	6f 92       	push	r6
    151e:	7f 92       	push	r7
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	6b 97       	sbiw	r28, 0x1b	; 27
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	6c 01       	movw	r12, r24
    154a:	4b 01       	movw	r8, r22
    154c:	5b 8f       	std	Y+27, r21	; 0x1b
    154e:	4a 8f       	std	Y+26, r20	; 0x1a
    uint32_t startTime = millis();
    1550:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    1554:	2b 01       	movw	r4, r22
    1556:	3c 01       	movw	r6, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    1558:	58 e0       	ldi	r21, 0x08	; 8
    155a:	e5 2e       	mov	r14, r21
    155c:	f1 2c       	mov	r15, r1
    155e:	ec 0c       	add	r14, r12
    1560:	fd 1c       	adc	r15, r13
    {
        if((millis() - startTime) > aTimeout)
    1562:	aa 24       	eor	r10, r10
    1564:	bb 24       	eor	r11, r11
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    1566:	12 c0       	rjmp	.+36     	; 0x158c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x78>
    {
        if((millis() - startTime) > aTimeout)
    1568:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    156c:	64 19       	sub	r22, r4
    156e:	75 09       	sbc	r23, r5
    1570:	86 09       	sbc	r24, r6
    1572:	97 09       	sbc	r25, r7
    1574:	86 16       	cp	r8, r22
    1576:	97 06       	cpc	r9, r23
    1578:	a8 06       	cpc	r10, r24
    157a:	b9 06       	cpc	r11, r25
    157c:	08 f4       	brcc	.+2      	; 0x1580 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x6c>
    157e:	27 c1       	rjmp	.+590    	; 0x17ce <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ba>
            return TIMED_OUT;
        delay(50);
    1580:	62 e3       	ldi	r22, 0x32	; 50
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 08 18 	call	0x3010	; 0x3010 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    158c:	c7 01       	movw	r24, r14
    158e:	0e 94 1b 10 	call	0x2036	; 0x2036 <_ZN11EthernetUDP11parsePacketEv>
    1592:	18 16       	cp	r1, r24
    1594:	19 06       	cpc	r1, r25
    1596:	44 f7       	brge	.-48     	; 0x1568 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x54>
    IPAddress(uint32_t address);
    IPAddress(const uint8_t *address);

    // Overloaded cast operator to allow IPAddress objects to be used where a pointer
    // to a four-byte uint8_t array is expected
    operator uint32_t() { return *((uint32_t*)_address); };
    1598:	f6 01       	movw	r30, r12
    159a:	82 80       	ldd	r8, Z+2	; 0x02
    159c:	93 80       	ldd	r9, Z+3	; 0x03
    159e:	a4 80       	ldd	r10, Z+4	; 0x04
    15a0:	b5 80       	ldd	r11, Z+5	; 0x05

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    15a2:	8e 01       	movw	r16, r28
    15a4:	08 5f       	subi	r16, 0xF8	; 248
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	c8 01       	movw	r24, r16
    15aa:	b7 01       	movw	r22, r14
    15ac:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN11EthernetUDP8remoteIPEv>
    15b0:	f8 01       	movw	r30, r16
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	a4 81       	ldd	r26, Z+4	; 0x04
    15b8:	b5 81       	ldd	r27, Z+5	; 0x05
    15ba:	88 16       	cp	r8, r24
    15bc:	99 06       	cpc	r9, r25
    15be:	aa 06       	cpc	r10, r26
    15c0:	bb 06       	cpc	r11, r27
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb2>
    15c4:	07 c1       	rjmp	.+526    	; 0x17d4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2c0>
    15c6:	f6 01       	movw	r30, r12
    15c8:	85 8d       	ldd	r24, Z+29	; 0x1d
    15ca:	96 8d       	ldd	r25, Z+30	; 0x1e
    15cc:	85 33       	cpi	r24, 0x35	; 53
    15ce:	91 05       	cpc	r25, r1
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc0>
    15d2:	00 c1       	rjmp	.+512    	; 0x17d4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2c0>
    15d4:	1e c1       	rjmp	.+572    	; 0x1812 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    15d6:	8e 01       	movw	r16, r28
    15d8:	02 5f       	subi	r16, 0xF2	; 242
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	c7 01       	movw	r24, r14
    15de:	b8 01       	movw	r22, r16
    15e0:	4c e0       	ldi	r20, 0x0C	; 12
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    15e8:	f8 01       	movw	r30, r16
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	98 27       	eor	r25, r24
    15f0:	89 27       	eor	r24, r25
    15f2:	98 27       	eor	r25, r24
    15f4:	9b 83       	std	Y+3, r25	; 0x03
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    15f8:	f6 01       	movw	r30, r12
    15fa:	46 81       	ldd	r20, Z+6	; 0x06
    15fc:	57 81       	ldd	r21, Z+7	; 0x07
    15fe:	2e 85       	ldd	r18, Y+14	; 0x0e
    1600:	3f 85       	ldd	r19, Y+15	; 0x0f
    1602:	42 17       	cp	r20, r18
    1604:	53 07       	cpc	r21, r19
    1606:	11 f4       	brne	.+4      	; 0x160c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xf8>
    1608:	97 fd       	sbrc	r25, 7
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x104>
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    160c:	c7 01       	movw	r24, r14
    160e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    1612:	2c ef       	ldi	r18, 0xFC	; 252
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	e3 c0       	rjmp	.+454    	; 0x17de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ca>
    // Success!  Everything buffered okay
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
    1618:	8f 70       	andi	r24, 0x0F	; 15
    161a:	92 70       	andi	r25, 0x02	; 2
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	31 f0       	breq	.+12     	; 0x162c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x118>
    {
        // Mark the entire packet as read
        iUdp.flush();
    1620:	c7 01       	movw	r24, r14
    1622:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    1626:	2b ef       	ldi	r18, 0xFB	; 251
    1628:	3f ef       	ldi	r19, 0xFF	; 255
    162a:	d9 c0       	rjmp	.+434    	; 0x17de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ca>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    162c:	f8 01       	movw	r30, r16
    162e:	26 80       	ldd	r2, Z+6	; 0x06
    1630:	37 80       	ldd	r3, Z+7	; 0x07
    1632:	32 24       	eor	r3, r2
    1634:	23 24       	eor	r2, r3
    1636:	32 24       	eor	r3, r2
    if (answerCount == 0 )
    1638:	21 14       	cp	r2, r1
    163a:	31 04       	cpc	r3, r1
    163c:	41 f0       	breq	.+16     	; 0x164e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x13a>
    163e:	cc 24       	eor	r12, r12
    1640:	dd 24       	eor	r13, r13
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    1642:	58 01       	movw	r10, r16
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    1644:	4e 01       	movw	r8, r28
    1646:	08 94       	sec
    1648:	81 1c       	adc	r8, r1
    164a:	91 1c       	adc	r9, r1
    164c:	29 c0       	rjmp	.+82     	; 0x16a0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x18c>
    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    {
        // Mark the entire packet as read
        iUdp.flush();
    164e:	c7 01       	movw	r24, r14
    1650:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    1654:	2a ef       	ldi	r18, 0xFA	; 250
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	c2 c0       	rjmp	.+388    	; 0x17de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ca>
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    165a:	c7 01       	movw	r24, r14
    165c:	b4 01       	movw	r22, r8
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	88 23       	and	r24, r24
    166a:	21 f4       	brne	.+8      	; 0x1674 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x16c>
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
    166e:	c7 01       	movw	r24, r14
    1670:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	98 2f       	mov	r25, r24
    1678:	91 50       	subi	r25, 0x01	; 1
    167a:	99 83       	std	Y+1, r25	; 0x01
    167c:	88 23       	and	r24, r24
    167e:	b9 f7       	brne	.-18     	; 0x166e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x15a>
    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    {
        // Skip over the name
        uint8_t len;
        do
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	88 23       	and	r24, r24
    1684:	51 f7       	brne	.-44     	; 0x165a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x146>
    1686:	00 e0       	ldi	r16, 0x00	; 0
    1688:	10 e0       	ldi	r17, 0x00	; 0
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    168a:	c7 01       	movw	r24, r14
    168c:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
                }
            }
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
    1690:	0f 5f       	subi	r16, 0xFF	; 255
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	04 30       	cpi	r16, 0x04	; 4
    1696:	11 05       	cpc	r17, r1
    1698:	c1 f7       	brne	.-16     	; 0x168a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x176>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    169a:	08 94       	sec
    169c:	c1 1c       	adc	r12, r1
    169e:	d1 1c       	adc	r13, r1
    16a0:	f5 01       	movw	r30, r10
    16a2:	84 81       	ldd	r24, Z+4	; 0x04
    16a4:	95 81       	ldd	r25, Z+5	; 0x05
    16a6:	98 27       	eor	r25, r24
    16a8:	89 27       	eor	r24, r25
    16aa:	98 27       	eor	r25, r24
    16ac:	c8 16       	cp	r12, r24
    16ae:	d9 06       	cpc	r13, r25
    16b0:	a0 f2       	brcs	.-88     	; 0x165a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x146>
    16b2:	cc 24       	eor	r12, r12
    16b4:	dd 24       	eor	r13, r13
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    16b6:	4e 01       	movw	r8, r28
    16b8:	08 94       	sec
    16ba:	81 1c       	adc	r8, r1
    16bc:	91 1c       	adc	r9, r1
        } while (len != 0);

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    16be:	44 e0       	ldi	r20, 0x04	; 4
    16c0:	a4 2e       	mov	r10, r20
    16c2:	b1 2c       	mov	r11, r1
    16c4:	ac 0e       	add	r10, r28
    16c6:	bd 1e       	adc	r11, r29
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    16c8:	36 e0       	ldi	r19, 0x06	; 6
    16ca:	43 2e       	mov	r4, r19
    16cc:	51 2c       	mov	r5, r1
    16ce:	4c 0e       	add	r4, r28
    16d0:	5d 1e       	adc	r5, r29
            iUdp.read(); // we don't care about the returned byte
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    16d2:	22 e0       	ldi	r18, 0x02	; 2
    16d4:	62 2e       	mov	r6, r18
    16d6:	71 2c       	mov	r7, r1
    16d8:	6c 0e       	add	r6, r28
    16da:	7d 1e       	adc	r7, r29
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    16dc:	c7 01       	movw	r24, r14
    16de:	b4 01       	movw	r22, r8
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	98 2f       	mov	r25, r24
    16ec:	90 7c       	andi	r25, 0xC0	; 192
    16ee:	69 f4       	brne	.+26     	; 0x170a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1f6>
            {
                // It's just a normal label
                if (len > 0)
    16f0:	88 23       	and	r24, r24
    16f2:	21 f4       	brne	.+8      	; 0x16fc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1e8>
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1fe>
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
                    {
                        iUdp.read(); // we don't care about the returned byte
    16f6:	c7 01       	movw	r24, r14
    16f8:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	98 2f       	mov	r25, r24
    1700:	91 50       	subi	r25, 0x01	; 1
    1702:	99 83       	std	Y+1, r25	; 0x01
    1704:	88 23       	and	r24, r24
    1706:	b9 f7       	brne	.-18     	; 0x16f6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1e2>
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1fe>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    170a:	c7 01       	movw	r24, r14
    170c:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
                // And set len so that we drop out of the name loop
                len = 0;
    1710:	19 82       	std	Y+1, r1	; 0x01

    for (uint16_t i =0; i < answerCount; i++)
    {
        // Skip the name
        uint8_t len;
        do
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	88 23       	and	r24, r24
    1716:	11 f7       	brne	.-60     	; 0x16dc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c8>
        } while (len != 0);

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    1718:	c7 01       	movw	r24, r14
    171a:	b5 01       	movw	r22, r10
    171c:	42 e0       	ldi	r20, 0x02	; 2
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    1724:	c7 01       	movw	r24, r14
    1726:	b2 01       	movw	r22, r4
    1728:	42 e0       	ldi	r20, 0x02	; 2
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
    1730:	04 e0       	ldi	r16, 0x04	; 4
    1732:	10 e0       	ldi	r17, 0x00	; 0

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    1734:	c7 01       	movw	r24, r14
    1736:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
    173a:	01 50       	subi	r16, 0x01	; 1
    173c:	10 40       	sbci	r17, 0x00	; 0
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
    173e:	d1 f7       	brne	.-12     	; 0x1734 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x220>
            iUdp.read(); // we don't care about the returned byte
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    1740:	c7 01       	movw	r24, r14
    1742:	b3 01       	movw	r22, r6
    1744:	42 e0       	ldi	r20, 0x02	; 2
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	f1 e0       	ldi	r31, 0x01	; 1
    1752:	80 30       	cpi	r24, 0x00	; 0
    1754:	9f 07       	cpc	r25, r31
    1756:	19 f0       	breq	.+6      	; 0x175e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x24a>
    1758:	00 e0       	ldi	r16, 0x00	; 0
    175a:	10 e0       	ldi	r17, 0x00	; 0
    175c:	23 c0       	rjmp	.+70     	; 0x17a4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x290>
    175e:	8e 81       	ldd	r24, Y+6	; 0x06
    1760:	9f 81       	ldd	r25, Y+7	; 0x07
    1762:	21 e0       	ldi	r18, 0x01	; 1
    1764:	80 30       	cpi	r24, 0x00	; 0
    1766:	92 07       	cpc	r25, r18
    1768:	b9 f7       	brne	.-18     	; 0x1758 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x244>
        {
            if (htons(header_flags) != 4)
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	9b 81       	ldd	r25, Y+3	; 0x03
    176e:	e4 e0       	ldi	r30, 0x04	; 4
    1770:	80 30       	cpi	r24, 0x00	; 0
    1772:	9e 07       	cpc	r25, r30
    1774:	31 f0       	breq	.+12     	; 0x1782 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26e>
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    1776:	c7 01       	movw	r24, r14
    1778:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN11EthernetUDP5flushEv>
                return -9;//INVALID_RESPONSE;
    177c:	27 ef       	ldi	r18, 0xF7	; 247
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	2e c0       	rjmp	.+92     	; 0x17de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ca>
            }
            iUdp.read(aAddress.raw_address(), 4);
    1782:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1784:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1786:	6e 5f       	subi	r22, 0xFE	; 254
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	c7 01       	movw	r24, r14
    178c:	44 e0       	ldi	r20, 0x04	; 4
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN11EthernetUDP4readEPhj>
            return SUCCESS;
    1794:	21 e0       	ldi	r18, 0x01	; 1
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	22 c0       	rjmp	.+68     	; 0x17de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ca>
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
            {
                iUdp.read(); // we don't care about the returned byte
    179a:	c7 01       	movw	r24, r14
    179c:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN11EthernetUDP4readEv>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    17a0:	0f 5f       	subi	r16, 0xFF	; 255
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	98 27       	eor	r25, r24
    17aa:	89 27       	eor	r24, r25
    17ac:	98 27       	eor	r25, r24
    17ae:	08 17       	cp	r16, r24
    17b0:	19 07       	cpc	r17, r25
    17b2:	98 f3       	brcs	.-26     	; 0x179a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x286>
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    17b4:	08 94       	sec
    17b6:	c1 1c       	adc	r12, r1
    17b8:	d1 1c       	adc	r13, r1
    17ba:	c2 14       	cp	r12, r2
    17bc:	d3 04       	cpc	r13, r3
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ae>
    17c0:	8d cf       	rjmp	.-230    	; 0x16dc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c8>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    17c2:	c7 01       	movw	r24, r14
    17c4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN11EthernetUDP5flushEv>

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    17c8:	26 ef       	ldi	r18, 0xF6	; 246
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ca>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    17ce:	2f ef       	ldi	r18, 0xFF	; 255
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	05 c0       	rjmp	.+10     	; 0x17de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ca>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    17d4:	2e ef       	ldi	r18, 0xFE	; 254
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ca>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    17da:	2d ef       	ldi	r18, 0xFD	; 253
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    17de:	c9 01       	movw	r24, r18
    17e0:	6b 96       	adiw	r28, 0x1b	; 27
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	bf 90       	pop	r11
    17fe:	af 90       	pop	r10
    1800:	9f 90       	pop	r9
    1802:	8f 90       	pop	r8
    1804:	7f 90       	pop	r7
    1806:	6f 90       	pop	r6
    1808:	5f 90       	pop	r5
    180a:	4f 90       	pop	r4
    180c:	3f 90       	pop	r3
    180e:	2f 90       	pop	r2
    1810:	08 95       	ret
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    1812:	c7 01       	movw	r24, r14
    1814:	0e 94 a5 10 	call	0x214a	; 0x214a <_ZN11EthernetUDP9availableEv>
    1818:	8c 30       	cpi	r24, 0x0C	; 12
    181a:	91 05       	cpc	r25, r1
    181c:	f4 f2       	brlt	.-68     	; 0x17da <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2c6>
    181e:	db ce       	rjmp	.-586    	; 0x15d6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc2>

00001820 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    1820:	af 92       	push	r10
    1822:	bf 92       	push	r11
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	28 97       	sbiw	r28, 0x08	; 8
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	8c 01       	movw	r16, r24
    1846:	6b 01       	movw	r12, r22
    1848:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    184a:	0e 94 97 09 	call	0x132e	; 0x132e <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	09 f0       	breq	.+2      	; 0x1854 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x34>
    1852:	6a c0       	rjmp	.+212    	; 0x1928 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x108>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    1854:	f8 01       	movw	r30, r16
    1856:	22 81       	ldd	r18, Z+2	; 0x02
    1858:	33 81       	ldd	r19, Z+3	; 0x03
    185a:	44 81       	ldd	r20, Z+4	; 0x04
    185c:	55 81       	ldd	r21, Z+5	; 0x05
    185e:	80 91 54 02 	lds	r24, 0x0254
    1862:	90 91 55 02 	lds	r25, 0x0255
    1866:	a0 91 56 02 	lds	r26, 0x0256
    186a:	b0 91 57 02 	lds	r27, 0x0257
    186e:	28 17       	cp	r18, r24
    1870:	39 07       	cpc	r19, r25
    1872:	4a 07       	cpc	r20, r26
    1874:	5b 07       	cpc	r21, r27
    1876:	09 f4       	brne	.+2      	; 0x187a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x5a>
    1878:	5a c0       	rjmp	.+180    	; 0x192e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x10e>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    187a:	68 e0       	ldi	r22, 0x08	; 8
    187c:	e6 2e       	mov	r14, r22
    187e:	f1 2c       	mov	r15, r1
    1880:	e0 0e       	add	r14, r16
    1882:	f1 1e       	adc	r15, r17
    1884:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    1888:	6f 70       	andi	r22, 0x0F	; 15
    188a:	70 70       	andi	r23, 0x00	; 0
    188c:	60 50       	subi	r22, 0x00	; 0
    188e:	7c 4f       	sbci	r23, 0xFC	; 252
    1890:	c7 01       	movw	r24, r14
    1892:	0e 94 ac 10 	call	0x2158	; 0x2158 <_ZN11EthernetUDP5beginEj>
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	09 f0       	breq	.+2      	; 0x189c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x7c>
    189a:	4c c0       	rjmp	.+152    	; 0x1934 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x114>

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    189c:	87 e3       	ldi	r24, 0x37	; 55
    189e:	92 e0       	ldi	r25, 0x02	; 2
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	f8 01       	movw	r30, r16
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	a4 81       	ldd	r26, Z+4	; 0x04
    18ac:	b5 81       	ldd	r27, Z+5	; 0x05
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	ad 83       	std	Y+5, r26	; 0x05
    18b4:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    18b6:	c7 01       	movw	r24, r14
    18b8:	be 01       	movw	r22, r28
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	45 e3       	ldi	r20, 0x35	; 53
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	0e 94 87 10 	call	0x210e	; 0x210e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    18c6:	9c 01       	movw	r18, r24
            if (ret != 0)
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	31 f1       	breq	.+76     	; 0x1918 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xf8>
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    18cc:	c8 01       	movw	r24, r16
    18ce:	b6 01       	movw	r22, r12
    18d0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN9DNSClient12BuildRequestEPKc>
                if (ret != 0)
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	f1 f0       	breq	.+60     	; 0x1914 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xf4>
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    18d8:	c7 01       	movw	r24, r14
    18da:	0e 94 82 10 	call	0x2104	; 0x2104 <_ZN11EthernetUDP9endPacketEv>
    18de:	9c 01       	movw	r18, r24
                    if (ret != 0)
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	31 f4       	brne	.+12     	; 0x18f0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd0>
    18e4:	19 c0       	rjmp	.+50     	; 0x1918 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xf8>
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    18e6:	ff ef       	ldi	r31, 0xFF	; 255
    18e8:	2f 3f       	cpi	r18, 0xFF	; 255
    18ea:	3f 07       	cpc	r19, r31
    18ec:	a9 f4       	brne	.+42     	; 0x1918 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xf8>
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd4>
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
                    if (ret != 0)
    18f0:	cc 24       	eor	r12, r12
    18f2:	dd 24       	eor	r13, r13
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    18f4:	c8 01       	movw	r24, r16
    18f6:	68 e8       	ldi	r22, 0x88	; 136
    18f8:	73 e1       	ldi	r23, 0x13	; 19
    18fa:	a5 01       	movw	r20, r10
    18fc:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    1900:	28 2f       	mov	r18, r24
    1902:	39 2f       	mov	r19, r25
                            wait_retries++;
    1904:	08 94       	sec
    1906:	c1 1c       	adc	r12, r1
    1908:	d1 1c       	adc	r13, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	c8 16       	cp	r12, r24
    190e:	d1 04       	cpc	r13, r1
    1910:	19 f0       	breq	.+6      	; 0x1918 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xf8>
    1912:	e9 cf       	rjmp	.-46     	; 0x18e6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xc6>
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
            if (ret != 0)
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    1918:	c7 01       	movw	r24, r14
    191a:	2f 83       	std	Y+7, r18	; 0x07
    191c:	38 87       	std	Y+8, r19	; 0x08
    191e:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN11EthernetUDP4stopEv>
    1922:	2f 81       	ldd	r18, Y+7	; 0x07
    1924:	38 85       	ldd	r19, Y+8	; 0x08
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x118>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    1928:	21 e0       	ldi	r18, 0x01	; 1
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x118>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    192e:	2e ef       	ldi	r18, 0xFE	; 254
    1930:	3f ef       	ldi	r19, 0xFF	; 255
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x118>
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    1938:	c9 01       	movw	r24, r18
    193a:	28 96       	adiw	r28, 0x08	; 8
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	df 90       	pop	r13
    1954:	cf 90       	pop	r12
    1956:	bf 90       	pop	r11
    1958:	af 90       	pop	r10
    195a:	08 95       	ret

0000195c <_GLOBAL__I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    195c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    195e:	82 e5       	ldi	r24, 0x52	; 82
    1960:	92 e0       	ldi	r25, 0x02	; 2
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	00 e0       	ldi	r16, 0x00	; 0
    196a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
    196e:	0f 91       	pop	r16
    1970:	08 95       	ret

00001972 <_ZN10W5100Class8writeGAREPh>:
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    1972:	bc 01       	movw	r22, r24
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	44 e0       	ldi	r20, 0x04	; 4
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	0e 94 81 03 	call	0x702	; 0x702 <_ZN10W5100Class5writeEjPKhj>
    1980:	08 95       	ret

00001982 <_ZN10W5100Class9writeSUBREPh>:
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    1982:	bc 01       	movw	r22, r24
    1984:	85 e0       	ldi	r24, 0x05	; 5
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	44 e0       	ldi	r20, 0x04	; 4
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	0e 94 81 03 	call	0x702	; 0x702 <_ZN10W5100Class5writeEjPKhj>
    1990:	08 95       	ret

00001992 <_ZN10W5100Class9writeSHAREPh>:
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
    1992:	bc 01       	movw	r22, r24
    1994:	89 e0       	ldi	r24, 0x09	; 9
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	46 e0       	ldi	r20, 0x06	; 6
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	0e 94 81 03 	call	0x702	; 0x702 <_ZN10W5100Class5writeEjPKhj>
    19a0:	08 95       	ret

000019a2 <_ZN10W5100Class9writeSIPREPh>:
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    19a2:	bc 01       	movw	r22, r24
    19a4:	8f e0       	ldi	r24, 0x0F	; 15
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	44 e0       	ldi	r20, 0x04	; 4
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	0e 94 81 03 	call	0x702	; 0x702 <_ZN10W5100Class5writeEjPKhj>
    19b0:	08 95       	ret

000019b2 <_ZN13EthernetClass5beginEPh>:
  0, 0, 0, 0 };
uint16_t EthernetClass::_server_port[MAX_SOCK_NUM] = { 
  0, 0, 0, 0 };

int EthernetClass::begin(uint8_t *mac_address)
{
    19b2:	af 92       	push	r10
    19b4:	bf 92       	push	r11
    19b6:	cf 92       	push	r12
    19b8:	df 92       	push	r13
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	c9 55       	subi	r28, 0x59	; 89
    19cc:	d0 40       	sbci	r29, 0x00	; 0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	5c 01       	movw	r10, r24
    19da:	7b 01       	movw	r14, r22
	uint8_t  siaddr[4];
	uint8_t  giaddr[4];
	uint8_t  chaddr[6];
}RIP_MSG_FIXED;

class DhcpClass {
    19dc:	ff e1       	ldi	r31, 0x1F	; 31
    19de:	cf 2e       	mov	r12, r31
    19e0:	d1 2c       	mov	r13, r1
    19e2:	cc 0e       	add	r12, r28
    19e4:	dd 1e       	adc	r13, r29
    19e6:	c6 01       	movw	r24, r12
    19e8:	82 96       	adiw	r24, 0x22	; 34
    19ea:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN11EthernetUDPC1Ev>
  DhcpClass dhcp;

  // Initialise the basic info
  W5100.init();
    19ee:	8c e3       	ldi	r24, 0x3C	; 60
    19f0:	92 e0       	ldi	r25, 0x02	; 2
    19f2:	0e 94 48 03 	call	0x690	; 0x690 <_ZN10W5100Class4initEv>
void W5100Class::getMACAddress(uint8_t *_addr) {
  readSHAR(_addr);
}

void W5100Class::setMACAddress(uint8_t *_addr) {
  writeSHAR(_addr);
    19f6:	c7 01       	movw	r24, r14
    19f8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN10W5100Class9writeSHAREPh>
  W5100.setMACAddress(mac_address);
  W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	00 e0       	ldi	r16, 0x00	; 0
    1a08:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
void W5100Class::getIPAddress(uint8_t *_addr) {
  readSIPR(_addr);
}

void W5100Class::setIPAddress(uint8_t *_addr) {
  writeSIPR(_addr);
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	03 96       	adiw	r24, 0x03	; 3
    1a10:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZN10W5100Class9writeSIPREPh>

  // Now try to get our config info from a DHCP server
  int ret = dhcp.beginWithDHCP(mac_address);
    1a14:	c6 01       	movw	r24, r12
    1a16:	b7 01       	movw	r22, r14
    1a18:	20 e6       	ldi	r18, 0x60	; 96
    1a1a:	3a ee       	ldi	r19, 0xEA	; 234
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	e0 ea       	ldi	r30, 0xA0	; 160
    1a22:	ee 2e       	mov	r14, r30
    1a24:	ef e0       	ldi	r30, 0x0F	; 15
    1a26:	fe 2e       	mov	r15, r30
    1a28:	01 2d       	mov	r16, r1
    1a2a:	11 2d       	mov	r17, r1
    1a2c:	0e 94 55 08 	call	0x10aa	; 0x10aa <_ZN9DhcpClass13beginWithDHCPEPhmm>
    1a30:	8c 01       	movw	r16, r24
  if(ret == 1)
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	91 05       	cpc	r25, r1
    1a36:	49 f5       	brne	.+82     	; 0x1a8a <_ZN13EthernetClass5beginEPh+0xd8>
  {
    // We've successfully found a DHCP server and got our configuration info, so set things
    // accordingly
    W5100.setIPAddress(dhcp.getLocalIp().raw_address());
    1a38:	ce 01       	movw	r24, r28
    1a3a:	07 96       	adiw	r24, 0x07	; 7
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN9DhcpClass10getLocalIpEv>
    1a42:	ce 01       	movw	r24, r28
    1a44:	09 96       	adiw	r24, 0x09	; 9
    1a46:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZN10W5100Class9writeSIPREPh>
    W5100.setGatewayIp(dhcp.getGatewayIp().raw_address());
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	0d 96       	adiw	r24, 0x0d	; 13
    1a4e:	b6 01       	movw	r22, r12
    1a50:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN9DhcpClass12getGatewayIpEv>
void W5100Class::getGatewayIp(uint8_t *_addr) {
  readGAR(_addr);
}

void W5100Class::setGatewayIp(uint8_t *_addr) {
  writeGAR(_addr);
    1a54:	ce 01       	movw	r24, r28
    1a56:	0f 96       	adiw	r24, 0x0f	; 15
    1a58:	0e 94 b9 0c 	call	0x1972	; 0x1972 <_ZN10W5100Class8writeGAREPh>
    W5100.setSubnetMask(dhcp.getSubnetMask().raw_address());
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	43 96       	adiw	r24, 0x13	; 19
    1a60:	b6 01       	movw	r22, r12
    1a62:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN9DhcpClass13getSubnetMaskEv>
void W5100Class::getSubnetMask(uint8_t *_addr) {
  readSUBR(_addr);
}

void W5100Class::setSubnetMask(uint8_t *_addr) {
  writeSUBR(_addr);
    1a66:	ce 01       	movw	r24, r28
    1a68:	45 96       	adiw	r24, 0x15	; 21
    1a6a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <_ZN10W5100Class9writeSUBREPh>
    _dnsServerAddress = dhcp.getDnsServerIp();
    1a6e:	ce 01       	movw	r24, r28
    1a70:	49 96       	adiw	r24, 0x19	; 25
    1a72:	b6 01       	movw	r22, r12
    1a74:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_ZN9DhcpClass14getDnsServerIpEv>

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    1a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1a7e:	be 8d       	ldd	r27, Y+30	; 0x1e
    1a80:	f5 01       	movw	r30, r10
    1a82:	82 83       	std	Z+2, r24	; 0x02
    1a84:	93 83       	std	Z+3, r25	; 0x03
    1a86:	a4 83       	std	Z+4, r26	; 0x04
    1a88:	b5 83       	std	Z+5, r27	; 0x05
  }

  return ret;
}
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	c7 5a       	subi	r28, 0xA7	; 167
    1a8e:	df 4f       	sbci	r29, 0xFF	; 255
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	ff 90       	pop	r15
    1aa4:	ef 90       	pop	r14
    1aa6:	df 90       	pop	r13
    1aa8:	cf 90       	pop	r12
    1aaa:	bf 90       	pop	r11
    1aac:	af 90       	pop	r10
    1aae:	08 95       	ret

00001ab0 <_ZN13EthernetClass11dnsServerIPEv>:
  return ret;
}

IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	27 e3       	ldi	r18, 0x37	; 55
    1ab4:	32 e0       	ldi	r19, 0x02	; 2
    1ab6:	31 83       	std	Z+1, r19	; 0x01
    1ab8:	20 83       	st	Z, r18
    1aba:	db 01       	movw	r26, r22
    1abc:	12 96       	adiw	r26, 0x02	; 2
    1abe:	2d 91       	ld	r18, X+
    1ac0:	3d 91       	ld	r19, X+
    1ac2:	4d 91       	ld	r20, X+
    1ac4:	5c 91       	ld	r21, X
    1ac6:	15 97       	sbiw	r26, 0x05	; 5
    1ac8:	22 83       	std	Z+2, r18	; 0x02
    1aca:	33 83       	std	Z+3, r19	; 0x03
    1acc:	44 83       	std	Z+4, r20	; 0x04
    1ace:	55 83       	std	Z+5, r21	; 0x05
}
    1ad0:	08 95       	ret

00001ad2 <_GLOBAL__I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    1ad2:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1ad4:	86 e6       	ldi	r24, 0x66	; 102
    1ad6:	92 e0       	ldi	r25, 0x02	; 2
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	00 e0       	ldi	r16, 0x00	; 0
    1ae0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
#include "EthernetClient.h"
#include "EthernetServer.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
    1ae4:	80 e6       	ldi	r24, 0x60	; 96
    1ae6:	92 e0       	ldi	r25, 0x02	; 2
    1ae8:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <_ZN9IPAddressC1Ev>
    1aec:	0f 91       	pop	r16
    1aee:	08 95       	ret

00001af0 <_ZN14EthernetClient5writeEh>:
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	0f 92       	push	r0
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    1afc:	dc 01       	movw	r26, r24
    1afe:	ed 91       	ld	r30, X+
    1b00:	fc 91       	ld	r31, X
    1b02:	02 80       	ldd	r0, Z+2	; 0x02
    1b04:	f3 81       	ldd	r31, Z+3	; 0x03
    1b06:	e0 2d       	mov	r30, r0
    1b08:	be 01       	movw	r22, r28
    1b0a:	6f 5f       	subi	r22, 0xFF	; 255
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	09 95       	icall
}
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <_ZN14EthernetClient5flushEv>:
    return -1;
  ::peek(_sock, &b);
  return b;
}

void EthernetClient::flush() {
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	ec 01       	movw	r28, r24
  while (available())
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <_ZN14EthernetClient5flushEv+0x16>
    read();
    1b24:	e8 81       	ld	r30, Y
    1b26:	f9 81       	ldd	r31, Y+1	; 0x01
    1b28:	06 80       	ldd	r0, Z+6	; 0x06
    1b2a:	f7 81       	ldd	r31, Z+7	; 0x07
    1b2c:	e0 2d       	mov	r30, r0
    1b2e:	ce 01       	movw	r24, r28
    1b30:	09 95       	icall
  ::peek(_sock, &b);
  return b;
}

void EthernetClient::flush() {
  while (available())
    1b32:	e8 81       	ld	r30, Y
    1b34:	f9 81       	ldd	r31, Y+1	; 0x01
    1b36:	04 80       	ldd	r0, Z+4	; 0x04
    1b38:	f5 81       	ldd	r31, Z+5	; 0x05
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	09 95       	icall
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	81 f7       	brne	.-32     	; 0x1b24 <_ZN14EthernetClient5flushEv+0x8>
    read();
}
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <_ZN14EthernetClientcvbEv>:

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	84 85       	ldd	r24, Z+12	; 0x0c
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <_ZN14EthernetClientcvbEv+0xc>
    1b54:	20 e0       	ldi	r18, 0x00	; 0
}
    1b56:	82 2f       	mov	r24, r18
    1b58:	08 95       	ret

00001b5a <_ZN14EthernetClient4peekEv>:

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8c 01       	movw	r16, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	04 80       	ldd	r0, Z+4	; 0x04
    1b72:	f5 81       	ldd	r31, Z+5	; 0x05
    1b74:	e0 2d       	mov	r30, r0
    1b76:	09 95       	icall
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	51 f0       	breq	.+20     	; 0x1b90 <_ZN14EthernetClient4peekEv+0x36>
    return -1;
  ::peek(_sock, &b);
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	84 85       	ldd	r24, Z+12	; 0x0c
    1b80:	be 01       	movw	r22, r28
    1b82:	6f 5f       	subi	r22, 0xFF	; 255
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z4peekhPh>
  return b;
    1b8a:	29 81       	ldd	r18, Y+1	; 0x01
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <_ZN14EthernetClient4peekEv+0x3a>

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    1b90:	2f ef       	ldi	r18, 0xFF	; 255
    1b92:	3f ef       	ldi	r19, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    1b94:	c9 01       	movw	r24, r18
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	08 95       	ret

00001ba2 <_ZN14EthernetClient4readEPhj>:
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z4recvhPhj>
}
    1baa:	08 95       	ret

00001bac <_ZN14EthernetClient4readEv>:
  if (_sock != MAX_SOCK_NUM)
    return W5100.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	84 85       	ldd	r24, Z+12	; 0x0c
    1bba:	be 01       	movw	r22, r28
    1bbc:	6f 5f       	subi	r22, 0xFF	; 255
    1bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z4recvhPhj>
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	19 f0       	breq	.+6      	; 0x1bd2 <_ZN14EthernetClient4readEv+0x26>
  {
    // recv worked
    return b;
    1bcc:	29 81       	ldd	r18, Y+1	; 0x01
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <_ZN14EthernetClient4readEv+0x2a>
  }
  else
  {
    // No data available
    return -1;
    1bd2:	2f ef       	ldi	r18, 0xFF	; 255
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
  }
}
    1bd6:	c9 01       	movw	r24, r18
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <_ZN14EthernetClient9availableEv>:
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    1be0:	fc 01       	movw	r30, r24
    1be2:	64 85       	ldd	r22, Z+12	; 0x0c
    1be4:	64 30       	cpi	r22, 0x04	; 4
    1be6:	39 f0       	breq	.+14     	; 0x1bf6 <_ZN14EthernetClient9availableEv+0x16>
    return W5100.getRXReceivedSize(_sock);
    1be8:	8c e3       	ldi	r24, 0x3C	; 60
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN10W5100Class17getRXReceivedSizeEh>
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	39 2f       	mov	r19, r25
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <_ZN14EthernetClient9availableEv+0x1a>
  return 0;
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
}
    1bfa:	c9 01       	movw	r24, r18
    1bfc:	08 95       	ret

00001bfe <_ZN14EthernetClient5writeEPKhj>:

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    1bfe:	ef 92       	push	r14
    1c00:	ff 92       	push	r15
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	ea 01       	movw	r28, r20
  if (_sock == MAX_SOCK_NUM) {
    1c0e:	fc 01       	movw	r30, r24
    1c10:	84 85       	ldd	r24, Z+12	; 0x0c
    1c12:	84 30       	cpi	r24, 0x04	; 4
    1c14:	19 f4       	brne	.+6      	; 0x1c1c <_ZN14EthernetClient5writeEPKhj+0x1e>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	07 c0       	rjmp	.+14     	; 0x1c2a <_ZN14EthernetClient5writeEPKhj+0x2c>
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    1c1c:	0e 94 cc 01 	call	0x398	; 0x398 <_Z4sendhPKhj>
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	39 f4       	brne	.+14     	; 0x1c32 <_ZN14EthernetClient5writeEPKhj+0x34>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	f8 01       	movw	r30, r16
    1c2a:	93 83       	std	Z+3, r25	; 0x03
    1c2c:	82 83       	std	Z+2, r24	; 0x02
    setWriteError();
    return 0;
    1c2e:	c0 e0       	ldi	r28, 0x00	; 0
    1c30:	d0 e0       	ldi	r29, 0x00	; 0
  }
  return size;
}
    1c32:	ce 01       	movw	r24, r28
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	08 95       	ret

00001c42 <_ZN14EthernetClientC1Ev>:
#include "EthernetServer.h"
#include "Dns.h"

uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
    1c42:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    1c44:	13 82       	std	Z+3, r1	; 0x03
    1c46:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1c48:	28 ee       	ldi	r18, 0xE8	; 232
    1c4a:	33 e0       	ldi	r19, 0x03	; 3
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	24 83       	std	Z+4, r18	; 0x04
    1c52:	35 83       	std	Z+5, r19	; 0x05
    1c54:	46 83       	std	Z+6, r20	; 0x06
    1c56:	57 83       	std	Z+7, r21	; 0x07
    1c58:	83 eb       	ldi	r24, 0xB3	; 179
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	80 83       	st	Z, r24
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	84 87       	std	Z+12, r24	; 0x0c
}
    1c64:	08 95       	ret

00001c66 <_ZN9DNSClientC1Ev>:
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	ec 01       	movw	r28, r24
    1c6c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <_ZN9IPAddressC1Ev>
    1c70:	ce 01       	movw	r24, r28
    1c72:	08 96       	adiw	r24, 0x08	; 8
    1c74:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN11EthernetUDPC1Ev>
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <_ZN14EthernetClient7connectEPKcj>:

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    1c7e:	6f 92       	push	r6
    1c80:	7f 92       	push	r7
    1c82:	8f 92       	push	r8
    1c84:	9f 92       	push	r9
    1c86:	af 92       	push	r10
    1c88:	bf 92       	push	r11
    1c8a:	cf 92       	push	r12
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	e3 97       	sbiw	r28, 0x33	; 51
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	5c 01       	movw	r10, r24
    1cac:	4b 01       	movw	r8, r22
    1cae:	3a 01       	movw	r6, r20
  // Look up the host first
  int ret = 0;
  DNSClient dns;
    1cb0:	33 e1       	ldi	r19, 0x13	; 19
    1cb2:	e3 2e       	mov	r14, r19
    1cb4:	f1 2c       	mov	r15, r1
    1cb6:	ec 0e       	add	r14, r28
    1cb8:	fd 1e       	adc	r15, r29
    1cba:	c7 01       	movw	r24, r14
    1cbc:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <_ZN9DNSClientC1Ev>
  IPAddress remote_addr;
    1cc0:	6e 01       	movw	r12, r28
    1cc2:	08 94       	sec
    1cc4:	c1 1c       	adc	r12, r1
    1cc6:	d1 1c       	adc	r13, r1
    1cc8:	c6 01       	movw	r24, r12
    1cca:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    1cce:	8e 01       	movw	r16, r28
    1cd0:	09 5f       	subi	r16, 0xF9	; 249
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	60 e6       	ldi	r22, 0x60	; 96
    1cd8:	72 e0       	ldi	r23, 0x02	; 2
    1cda:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN13EthernetClass11dnsServerIPEv>
    1cde:	c7 01       	movw	r24, r14
    1ce0:	b8 01       	movw	r22, r16
    1ce2:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    1ce6:	c7 01       	movw	r24, r14
    1ce8:	b4 01       	movw	r22, r8
    1cea:	a6 01       	movw	r20, r12
    1cec:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    1cf0:	9c 01       	movw	r18, r24
  if (ret == 1) {
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	c9 f4       	brne	.+50     	; 0x1d2a <_ZN14EthernetClient7connectEPKcj+0xac>
    return connect(remote_addr, port);
    1cf8:	d5 01       	movw	r26, r10
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	04 84       	ldd	r0, Z+12	; 0x0c
    1d00:	f5 85       	ldd	r31, Z+13	; 0x0d
    1d02:	e0 2d       	mov	r30, r0

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    1d04:	87 e3       	ldi	r24, 0x37	; 55
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	9e 87       	std	Y+14, r25	; 0x0e
    1d0a:	8d 87       	std	Y+13, r24	; 0x0d
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d10:	ad 81       	ldd	r26, Y+5	; 0x05
    1d12:	be 81       	ldd	r27, Y+6	; 0x06
    1d14:	8f 87       	std	Y+15, r24	; 0x0f
    1d16:	98 8b       	std	Y+16, r25	; 0x10
    1d18:	a9 8b       	std	Y+17, r26	; 0x11
    1d1a:	ba 8b       	std	Y+18, r27	; 0x12
    1d1c:	c5 01       	movw	r24, r10
    1d1e:	be 01       	movw	r22, r28
    1d20:	63 5f       	subi	r22, 0xF3	; 243
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	a3 01       	movw	r20, r6
    1d26:	09 95       	icall
    1d28:	9c 01       	movw	r18, r24
  } else {
    return ret;
  }
}
    1d2a:	c9 01       	movw	r24, r18
    1d2c:	e3 96       	adiw	r28, 0x33	; 51
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	df 90       	pop	r13
    1d46:	cf 90       	pop	r12
    1d48:	bf 90       	pop	r11
    1d4a:	af 90       	pop	r10
    1d4c:	9f 90       	pop	r9
    1d4e:	8f 90       	pop	r8
    1d50:	7f 90       	pop	r7
    1d52:	6f 90       	pop	r6
    1d54:	08 95       	ret

00001d56 <_ZN14EthernetClient6statusEv>:
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    1d56:	fc 01       	movw	r30, r24
    1d58:	84 85       	ldd	r24, Z+12	; 0x0c
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	19 f0       	breq	.+6      	; 0x1d64 <_ZN14EthernetClient6statusEv+0xe>
  return W5100.readSnSR(_sock);
    1d5e:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN10W5100Class8readSnSREh>
    1d62:	08 95       	ret
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    1d64:	80 e0       	ldi	r24, 0x00	; 0
  return W5100.readSnSR(_sock);
}
    1d66:	08 95       	ret

00001d68 <_ZN14EthernetClient9connectedEv>:

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM) return 0;
    1d6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d70:	84 30       	cpi	r24, 0x04	; 4
    1d72:	d1 f0       	breq	.+52     	; 0x1da8 <_ZN14EthernetClient9connectedEv+0x40>
  
  uint8_t s = status();
    1d74:	ce 01       	movw	r24, r28
    1d76:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14EthernetClient6statusEv>
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    1d7a:	84 31       	cpi	r24, 0x14	; 20
    1d7c:	81 f0       	breq	.+32     	; 0x1d9e <_ZN14EthernetClient9connectedEv+0x36>
    1d7e:	88 23       	and	r24, r24
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <_ZN14EthernetClient9connectedEv+0x36>
    1d82:	88 31       	cpi	r24, 0x18	; 24
    1d84:	61 f0       	breq	.+24     	; 0x1d9e <_ZN14EthernetClient9connectedEv+0x36>
    1d86:	8c 31       	cpi	r24, 0x1C	; 28
    1d88:	61 f4       	brne	.+24     	; 0x1da2 <_ZN14EthernetClient9connectedEv+0x3a>
    1d8a:	e8 81       	ld	r30, Y
    1d8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d8e:	04 80       	ldd	r0, Z+4	; 0x04
    1d90:	f5 81       	ldd	r31, Z+5	; 0x05
    1d92:	e0 2d       	mov	r30, r0
    1d94:	ce 01       	movw	r24, r28
    1d96:	09 95       	icall

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    1d98:	21 e0       	ldi	r18, 0x01	; 1
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	19 f4       	brne	.+6      	; 0x1da4 <_ZN14EthernetClient9connectedEv+0x3c>
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <_ZN14EthernetClient9connectedEv+0x3c>
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	82 2f       	mov	r24, r18
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <_ZN14EthernetClient9connectedEv+0x42>
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    1da8:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret

00001db0 <_ZN14EthernetClient4stopEv>:
void EthernetClient::flush() {
  while (available())
    read();
}

void EthernetClient::stop() {
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    1dbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	a1 f1       	breq	.+104    	; 0x1e2c <_ZN14EthernetClient4stopEv+0x7c>
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
    1dc4:	0e 94 c4 01 	call	0x388	; 0x388 <_Z10disconnecth>
  unsigned long start = millis();
    1dc8:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    1dcc:	7b 01       	movw	r14, r22
    1dce:	8c 01       	movw	r16, r24

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14EthernetClient6statusEv>
    1dd6:	88 23       	and	r24, r24
    1dd8:	19 f1       	breq	.+70     	; 0x1e20 <_ZN14EthernetClient4stopEv+0x70>
    1dda:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <millis>
    1dde:	6e 19       	sub	r22, r14
    1de0:	7f 09       	sbc	r23, r15
    1de2:	80 0b       	sbc	r24, r16
    1de4:	91 0b       	sbc	r25, r17
    1de6:	68 3e       	cpi	r22, 0xE8	; 232
    1de8:	23 e0       	ldi	r18, 0x03	; 3
    1dea:	72 07       	cpc	r23, r18
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	82 07       	cpc	r24, r18
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	92 07       	cpc	r25, r18
    1df4:	a8 f4       	brcc	.+42     	; 0x1e20 <_ZN14EthernetClient4stopEv+0x70>
    delay(1);
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0e 94 08 18 	call	0x3010	; 0x3010 <delay>
    1e02:	e6 cf       	rjmp	.-52     	; 0x1dd0 <_ZN14EthernetClient4stopEv+0x20>

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    close(_sock);
    1e04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e06:	0e 94 40 01 	call	0x280	; 0x280 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    1e0a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	ee 0f       	add	r30, r30
    1e10:	ff 1f       	adc	r31, r31
    1e12:	e8 5a       	subi	r30, 0xA8	; 168
    1e14:	fd 4f       	sbci	r31, 0xFD	; 253
    1e16:	11 82       	std	Z+1, r1	; 0x01
    1e18:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    1e1a:	84 e0       	ldi	r24, 0x04	; 4
    1e1c:	8c 87       	std	Y+12, r24	; 0x0c
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <_ZN14EthernetClient4stopEv+0x7c>
  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    delay(1);

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    1e20:	ce 01       	movw	r24, r28
    1e22:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14EthernetClient6statusEv>
    1e26:	88 23       	and	r24, r24
    1e28:	81 f3       	breq	.-32     	; 0x1e0a <_ZN14EthernetClient4stopEv+0x5a>
    1e2a:	ec cf       	rjmp	.-40     	; 0x1e04 <_ZN14EthernetClient4stopEv+0x54>
    close(_sock);

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	08 95       	ret

00001e3a <_ZN14EthernetClient7connectE9IPAddressj>:
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    1e3a:	bf 92       	push	r11
    1e3c:	cf 92       	push	r12
    1e3e:	df 92       	push	r13
    1e40:	ef 92       	push	r14
    1e42:	ff 92       	push	r15
    1e44:	0f 93       	push	r16
    1e46:	1f 93       	push	r17
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	ec 01       	movw	r28, r24
    1e4e:	8b 01       	movw	r16, r22
    1e50:	6a 01       	movw	r12, r20
  if (_sock != MAX_SOCK_NUM)
    1e52:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e54:	84 30       	cpi	r24, 0x04	; 4
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <_ZN14EthernetClient7connectE9IPAddressj+0x20>
    1e58:	4f c0       	rjmp	.+158    	; 0x1ef8 <_ZN14EthernetClient7connectE9IPAddressj+0xbe>
    1e5a:	ee 24       	eor	r14, r14
    1e5c:	ff 24       	eor	r15, r15
    1e5e:	be 2c       	mov	r11, r14
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = W5100.readSnSR(i);
    1e60:	8e 2d       	mov	r24, r14
    1e62:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN10W5100Class8readSnSREh>
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    1e66:	88 23       	and	r24, r24
    1e68:	11 f0       	breq	.+4      	; 0x1e6e <_ZN14EthernetClient7connectE9IPAddressj+0x34>
    1e6a:	88 31       	cpi	r24, 0x18	; 24
    1e6c:	11 f4       	brne	.+4      	; 0x1e72 <_ZN14EthernetClient7connectE9IPAddressj+0x38>
      _sock = i;
    1e6e:	bc 86       	std	Y+12, r11	; 0x0c
      break;
    1e70:	07 c0       	rjmp	.+14     	; 0x1e80 <_ZN14EthernetClient7connectE9IPAddressj+0x46>

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    1e72:	08 94       	sec
    1e74:	e1 1c       	adc	r14, r1
    1e76:	f1 1c       	adc	r15, r1
    1e78:	84 e0       	ldi	r24, 0x04	; 4
    1e7a:	e8 16       	cp	r14, r24
    1e7c:	f1 04       	cpc	r15, r1
    1e7e:	79 f7       	brne	.-34     	; 0x1e5e <_ZN14EthernetClient7connectE9IPAddressj+0x24>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    1e80:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	c9 f1       	breq	.+114    	; 0x1ef8 <_ZN14EthernetClient7connectE9IPAddressj+0xbe>
    return 0;

  _srcport++;
    1e86:	20 91 ac 01 	lds	r18, 0x01AC
    1e8a:	30 91 ad 01 	lds	r19, 0x01AD
    1e8e:	2f 5f       	subi	r18, 0xFF	; 255
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	30 93 ad 01 	sts	0x01AD, r19
    1e96:	20 93 ac 01 	sts	0x01AC, r18
  if (_srcport == 0) _srcport = 1024;
    1e9a:	21 15       	cp	r18, r1
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	31 f4       	brne	.+12     	; 0x1eac <_ZN14EthernetClient7connectE9IPAddressj+0x72>
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	34 e0       	ldi	r19, 0x04	; 4
    1ea4:	30 93 ad 01 	sts	0x01AD, r19
    1ea8:	20 93 ac 01 	sts	0x01AC, r18
  socket(_sock, SnMR::TCP, _srcport, 0);
    1eac:	40 91 ac 01 	lds	r20, 0x01AC
    1eb0:	50 91 ad 01 	lds	r21, 0x01AD
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	0e 94 4f 01 	call	0x29e	; 0x29e <_Z6sockethhjh>

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    1ebc:	b8 01       	movw	r22, r16
    1ebe:	6e 5f       	subi	r22, 0xFE	; 254
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ec4:	a6 01       	movw	r20, r12
    1ec6:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z7connecthPhj>
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <_ZN14EthernetClient7connectE9IPAddressj+0xa4>
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    delay(1);
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 08 18 	call	0x3010	; 0x3010 <delay>
    if (status() == SnSR::CLOSED) {
    1ed8:	ce 01       	movw	r24, r28
    1eda:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14EthernetClient6statusEv>
    1ede:	88 23       	and	r24, r24
    1ee0:	19 f4       	brne	.+6      	; 0x1ee8 <_ZN14EthernetClient7connectE9IPAddressj+0xae>
      _sock = MAX_SOCK_NUM;
    1ee2:	84 e0       	ldi	r24, 0x04	; 4
    1ee4:	8c 87       	std	Y+12, r24	; 0x0c
    1ee6:	08 c0       	rjmp	.+16     	; 0x1ef8 <_ZN14EthernetClient7connectE9IPAddressj+0xbe>
  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    1ee8:	ce 01       	movw	r24, r28
    1eea:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN14EthernetClient6statusEv>
    1eee:	87 31       	cpi	r24, 0x17	; 23
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <_ZN14EthernetClient7connectE9IPAddressj+0x92>
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    1ef2:	21 e0       	ldi	r18, 0x01	; 1
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <_ZN14EthernetClient7connectE9IPAddressj+0xc2>
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    return 0;
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
      return 0;
    }
  }

  return 1;
}
    1efc:	c9 01       	movw	r24, r18
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	bf 90       	pop	r11
    1f10:	08 95       	ret

00001f12 <_GLOBAL__I__ZN14EthernetClient8_srcportE>:
// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}
    1f12:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1f14:	8c e6       	ldi	r24, 0x6C	; 108
    1f16:	92 e0       	ldi	r25, 0x02	; 2
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	00 e0       	ldi	r16, 0x00	; 0
    1f20:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <_GLOBAL__I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
    1f28:	0f 93       	push	r16
    1f2a:	82 e7       	ldi	r24, 0x72	; 114
    1f2c:	92 e0       	ldi	r25, 0x02	; 2
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	00 e0       	ldi	r16, 0x00	; 0
    1f36:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    1f3e:	dc 01       	movw	r26, r24
    1f40:	ed 91       	ld	r30, X+
    1f42:	fc 91       	ld	r31, X
    1f44:	00 8c       	ldd	r0, Z+24	; 0x18
    1f46:	f1 8d       	ldd	r31, Z+25	; 0x19
    1f48:	e0 2d       	mov	r30, r0
    1f4a:	09 95       	icall
    1f4c:	08 95       	ret

00001f4e <_ZN11EthernetUDP10remotePortEv>:
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    1f4e:	fc 01       	movw	r30, r24
    1f50:	85 89       	ldd	r24, Z+21	; 0x15
    1f52:	96 89       	ldd	r25, Z+22	; 0x16
    1f54:	08 95       	ret

00001f56 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    1f62:	dc 01       	movw	r26, r24
    1f64:	ed 91       	ld	r30, X+
    1f66:	fc 91       	ld	r31, X
    1f68:	02 80       	ldd	r0, Z+2	; 0x02
    1f6a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f6c:	e0 2d       	mov	r30, r0
    1f6e:	be 01       	movw	r22, r28
    1f70:	6f 5f       	subi	r22, 0xFF	; 255
    1f72:	7f 4f       	sbci	r23, 0xFF	; 255
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	09 95       	icall
}
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	ec 01       	movw	r28, r24
  while (available())
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <_ZN11EthernetUDP5flushEv+0x16>
  {
    read();
    1f8a:	e8 81       	ld	r30, Y
    1f8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f8e:	06 80       	ldd	r0, Z+6	; 0x06
    1f90:	f7 81       	ldd	r31, Z+7	; 0x07
    1f92:	e0 2d       	mov	r30, r0
    1f94:	ce 01       	movw	r24, r28
    1f96:	09 95       	icall
  return b;
}

void EthernetUDP::flush()
{
  while (available())
    1f98:	e8 81       	ld	r30, Y
    1f9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9c:	04 80       	ldd	r0, Z+4	; 0x04
    1f9e:	f5 81       	ldd	r31, Z+5	; 0x05
    1fa0:	e0 2d       	mov	r30, r0
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	09 95       	icall
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	81 f7       	brne	.-32     	; 0x1f8a <_ZN11EthernetUDP5flushEv+0x8>
  {
    read();
  }
}
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	08 95       	ret

00001fb0 <_ZN11EthernetUDP4peekEv>:
  */
  return recv(_sock, buffer, len);
}

int EthernetUDP::peek()
{
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	8c 01       	movw	r16, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	ed 91       	ld	r30, X+
    1fc4:	fc 91       	ld	r31, X
    1fc6:	04 80       	ldd	r0, Z+4	; 0x04
    1fc8:	f5 81       	ldd	r31, Z+5	; 0x05
    1fca:	e0 2d       	mov	r30, r0
    1fcc:	09 95       	icall
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	51 f0       	breq	.+20     	; 0x1fe6 <_ZN11EthernetUDP4peekEv+0x36>
    return -1;
  ::peek(_sock, &b);
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	84 85       	ldd	r24, Z+12	; 0x0c
    1fd6:	be 01       	movw	r22, r28
    1fd8:	6f 5f       	subi	r22, 0xFF	; 255
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z4peekhPh>
  return b;
    1fe0:	29 81       	ldd	r18, Y+1	; 0x01
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <_ZN11EthernetUDP4peekEv+0x3a>
int EthernetUDP::peek()
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    1fe6:	2f ef       	ldi	r18, 0xFF	; 255
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    1fea:	c9 01       	movw	r24, r18
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	08 95       	ret

00001ff8 <_ZN11EthernetUDP4readEPhj>:
  for(i=0;i<(int)bufLen;i++) {
    recv(_sock,tmpBuf,1);
    buf[i]=tmpBuf[0];
  }
  */
  return recv(_sock, buffer, len);
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	84 85       	ldd	r24, Z+12	; 0x0c
    1ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z4recvhPhj>
}
    2000:	08 95       	ret

00002002 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	0f 92       	push	r0
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
  uint8_t byte;
  if (recv(_sock, &byte, 1) > 0)
    200c:	fc 01       	movw	r30, r24
    200e:	84 85       	ldd	r24, Z+12	; 0x0c
    2010:	be 01       	movw	r22, r28
    2012:	6f 5f       	subi	r22, 0xFF	; 255
    2014:	7f 4f       	sbci	r23, 0xFF	; 255
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z4recvhPhj>
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	19 f0       	breq	.+6      	; 0x2028 <_ZN11EthernetUDP4readEv+0x26>
  {
    // We read things without any problems
    return byte;
    2022:	29 81       	ldd	r18, Y+1	; 0x01
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	02 c0       	rjmp	.+4      	; 0x202c <_ZN11EthernetUDP4readEv+0x2a>
  }
  // If we get here, there's no data available
  return -1;
    2028:	2f ef       	ldi	r18, 0xFF	; 255
    202a:	3f ef       	ldi	r19, 0xFF	; 255
}
    202c:	c9 01       	movw	r24, r18
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	28 97       	sbiw	r28, 0x08	; 8
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	8c 01       	movw	r16, r24
  if (available() > 0)
    2054:	dc 01       	movw	r26, r24
    2056:	ed 91       	ld	r30, X+
    2058:	fc 91       	ld	r31, X
    205a:	04 80       	ldd	r0, Z+4	; 0x04
    205c:	f5 81       	ldd	r31, Z+5	; 0x05
    205e:	e0 2d       	mov	r30, r0
    2060:	09 95       	icall
    2062:	18 16       	cp	r1, r24
    2064:	19 06       	cpc	r1, r25
    2066:	44 f5       	brge	.+80     	; 0x20b8 <_ZN11EthernetUDP11parsePacketEv+0x82>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0;	
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    2068:	f8 01       	movw	r30, r16
    206a:	84 85       	ldd	r24, Z+12	; 0x0c
    206c:	7e 01       	movw	r14, r28
    206e:	08 94       	sec
    2070:	e1 1c       	adc	r14, r1
    2072:	f1 1c       	adc	r15, r1
    2074:	b7 01       	movw	r22, r14
    2076:	48 e0       	ldi	r20, 0x08	; 8
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z4recvhPhj>
    207e:	28 2f       	mov	r18, r24
    2080:	39 2f       	mov	r19, r25
    if (ret > 0)
    2082:	12 16       	cp	r1, r18
    2084:	13 06       	cpc	r1, r19
    2086:	d4 f4       	brge	.+52     	; 0x20bc <_ZN11EthernetUDP11parsePacketEv+0x86>
    {
      _remoteIP = tmpBuf;
    2088:	c8 01       	movw	r24, r16
    208a:	0f 96       	adiw	r24, 0x0f	; 15
    208c:	b7 01       	movw	r22, r14
    208e:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	2e 81       	ldd	r18, Y+6	; 0x06
    2098:	82 0f       	add	r24, r18
    209a:	91 1d       	adc	r25, r1
    209c:	d8 01       	movw	r26, r16
    209e:	56 96       	adiw	r26, 0x16	; 22
    20a0:	9c 93       	st	X, r25
    20a2:	8e 93       	st	-X, r24
    20a4:	55 97       	sbiw	r26, 0x15	; 21
      // When we get here, any remaining bytes are the data
      ret = available();
    20a6:	ed 91       	ld	r30, X+
    20a8:	fc 91       	ld	r31, X
    20aa:	04 80       	ldd	r0, Z+4	; 0x04
    20ac:	f5 81       	ldd	r31, Z+5	; 0x05
    20ae:	e0 2d       	mov	r30, r0
    20b0:	c8 01       	movw	r24, r16
    20b2:	09 95       	icall
    20b4:	9c 01       	movw	r18, r24
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <_ZN11EthernetUDP11parsePacketEv+0x86>
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
}
    20bc:	c9 01       	movw	r24, r18
    20be:	28 96       	adiw	r28, 0x08	; 8
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	ff 90       	pop	r15
    20d4:	ef 90       	pop	r14
    20d6:	08 95       	ret

000020d8 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	ec 01       	movw	r28, r24
    20de:	fb 01       	movw	r30, r22
    20e0:	9a 01       	movw	r18, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    20e2:	6f 89       	ldd	r22, Y+23	; 0x17
    20e4:	78 8d       	ldd	r23, Y+24	; 0x18
    20e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    20e8:	af 01       	movw	r20, r30
    20ea:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_Z10bufferDatahjPKhj>
    20ee:	9c 01       	movw	r18, r24
  _offset += bytes_written;
    20f0:	8f 89       	ldd	r24, Y+23	; 0x17
    20f2:	98 8d       	ldd	r25, Y+24	; 0x18
    20f4:	82 0f       	add	r24, r18
    20f6:	93 1f       	adc	r25, r19
    20f8:	98 8f       	std	Y+24, r25	; 0x18
    20fa:	8f 8b       	std	Y+23, r24	; 0x17
  return bytes_written;
}
    20fc:	c9 01       	movw	r24, r18
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	08 95       	ret

00002104 <_ZN11EthernetUDP9endPacketEv>:
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    2104:	fc 01       	movw	r30, r24
    2106:	84 85       	ldd	r24, Z+12	; 0x0c
    2108:	0e 94 cc 02 	call	0x598	; 0x598 <_Z7sendUDPh>
}
    210c:	08 95       	ret

0000210e <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
    210e:	fc 01       	movw	r30, r24
  _offset = 0;
    2110:	10 8e       	std	Z+24, r1	; 0x18
    2112:	17 8a       	std	Z+23, r1	; 0x17
  return startUDP(_sock, rawIPAddress(ip), port);
    2114:	6e 5f       	subi	r22, 0xFE	; 254
    2116:	7f 4f       	sbci	r23, 0xFF	; 255
    2118:	84 85       	ldd	r24, Z+12	; 0x0c
    211a:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z8startUDPhPhj>
}
    211e:	08 95       	ret

00002120 <_ZN11EthernetUDP4stopEv>:
  return W5100.getRXReceivedSize(_sock);
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    2126:	8c 85       	ldd	r24, Y+12	; 0x0c
    2128:	84 30       	cpi	r24, 0x04	; 4
    212a:	61 f0       	breq	.+24     	; 0x2144 <_ZN11EthernetUDP4stopEv+0x24>
    return;

  close(_sock);
    212c:	0e 94 40 01 	call	0x280	; 0x280 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    2130:	ec 85       	ldd	r30, Y+12	; 0x0c
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	e8 5a       	subi	r30, 0xA8	; 168
    213a:	fd 4f       	sbci	r31, 0xFD	; 253
    213c:	11 82       	std	Z+1, r1	; 0x01
    213e:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	8c 87       	std	Y+12, r24	; 0x0c
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <_ZN11EthernetUDP9availableEv>:
  return 1;
}

/* Is data available in rx buffer? Returns 0 if no, number of available bytes if yes. 
 * returned value includes 8 byte UDP header!*/
int EthernetUDP::available() {
    214a:	fc 01       	movw	r30, r24
  return W5100.getRXReceivedSize(_sock);
    214c:	8c e3       	ldi	r24, 0x3C	; 60
    214e:	92 e0       	ldi	r25, 0x02	; 2
    2150:	64 85       	ldd	r22, Z+12	; 0x0c
    2152:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_ZN10W5100Class17getRXReceivedSizeEh>
}
    2156:	08 95       	ret

00002158 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	ec 01       	movw	r28, r24
    2168:	8b 01       	movw	r16, r22
  if (_sock != MAX_SOCK_NUM)
    216a:	8c 85       	ldd	r24, Y+12	; 0x0c
    216c:	84 30       	cpi	r24, 0x04	; 4
    216e:	f9 f4       	brne	.+62     	; 0x21ae <_ZN11EthernetUDP5beginEj+0x56>
    2170:	ee 24       	eor	r14, r14
    2172:	ff 24       	eor	r15, r15
    2174:	de 2c       	mov	r13, r14
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = W5100.readSnSR(i);
    2176:	8e 2d       	mov	r24, r14
    2178:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN10W5100Class8readSnSREh>
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    217c:	88 23       	and	r24, r24
    217e:	11 f0       	breq	.+4      	; 0x2184 <_ZN11EthernetUDP5beginEj+0x2c>
    2180:	88 31       	cpi	r24, 0x18	; 24
    2182:	11 f4       	brne	.+4      	; 0x2188 <_ZN11EthernetUDP5beginEj+0x30>
      _sock = i;
    2184:	dc 86       	std	Y+12, r13	; 0x0c
      break;
    2186:	07 c0       	rjmp	.+14     	; 0x2196 <_ZN11EthernetUDP5beginEj+0x3e>
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    2188:	08 94       	sec
    218a:	e1 1c       	adc	r14, r1
    218c:	f1 1c       	adc	r15, r1
    218e:	84 e0       	ldi	r24, 0x04	; 4
    2190:	e8 16       	cp	r14, r24
    2192:	f1 04       	cpc	r15, r1
    2194:	79 f7       	brne	.-34     	; 0x2174 <_ZN11EthernetUDP5beginEj+0x1c>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    2196:	8c 85       	ldd	r24, Y+12	; 0x0c
    2198:	84 30       	cpi	r24, 0x04	; 4
    219a:	49 f0       	breq	.+18     	; 0x21ae <_ZN11EthernetUDP5beginEj+0x56>
    return 0;

  _port = port;
    219c:	1e 87       	std	Y+14, r17	; 0x0e
    219e:	0d 87       	std	Y+13, r16	; 0x0d
  socket(_sock, SnMR::UDP, _port, 0);
    21a0:	62 e0       	ldi	r22, 0x02	; 2
    21a2:	a8 01       	movw	r20, r16
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	0e 94 4f 01 	call	0x29e	; 0x29e <_Z6sockethhjh>

  return 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <_ZN11EthernetUDP5beginEj+0x58>
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    return 0;
    21ae:	80 e0       	ldi	r24, 0x00	; 0

  _port = port;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	df 90       	pop	r13
    21be:	08 95       	ret

000021c0 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    21c0:	fc 01       	movw	r30, r24
    21c2:	13 82       	std	Z+3, r1	; 0x03
    21c4:	12 82       	std	Z+2, r1	; 0x02
    21c6:	28 ee       	ldi	r18, 0xE8	; 232
    21c8:	33 e0       	ldi	r19, 0x03	; 3
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	24 83       	std	Z+4, r18	; 0x04
    21d0:	35 83       	std	Z+5, r19	; 0x05
    21d2:	46 83       	std	Z+6, r20	; 0x06
    21d4:	57 83       	std	Z+7, r21	; 0x07
    21d6:	8f ec       	ldi	r24, 0xCF	; 207
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	84 e0       	ldi	r24, 0x04	; 4
    21e0:	84 87       	std	Z+12, r24	; 0x0c
    21e2:	cf 01       	movw	r24, r30
    21e4:	0f 96       	adiw	r24, 0x0f	; 15
    21e6:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <_ZN9IPAddressC1Ev>
    21ea:	08 95       	ret

000021ec <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    21ec:	6f 92       	push	r6
    21ee:	7f 92       	push	r7
    21f0:	8f 92       	push	r8
    21f2:	9f 92       	push	r9
    21f4:	af 92       	push	r10
    21f6:	bf 92       	push	r11
    21f8:	cf 92       	push	r12
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	e3 97       	sbiw	r28, 0x33	; 51
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	5c 01       	movw	r10, r24
    221a:	4b 01       	movw	r8, r22
    221c:	3a 01       	movw	r6, r20
  // Look up the host first
  int ret = 0;
  DNSClient dns;
    221e:	33 e1       	ldi	r19, 0x13	; 19
    2220:	e3 2e       	mov	r14, r19
    2222:	f1 2c       	mov	r15, r1
    2224:	ec 0e       	add	r14, r28
    2226:	fd 1e       	adc	r15, r29
    2228:	c7 01       	movw	r24, r14
    222a:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <_ZN9DNSClientC1Ev>
  IPAddress remote_addr;
    222e:	6e 01       	movw	r12, r28
    2230:	08 94       	sec
    2232:	c1 1c       	adc	r12, r1
    2234:	d1 1c       	adc	r13, r1
    2236:	c6 01       	movw	r24, r12
    2238:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    223c:	8e 01       	movw	r16, r28
    223e:	09 5f       	subi	r16, 0xF9	; 249
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	c8 01       	movw	r24, r16
    2244:	60 e6       	ldi	r22, 0x60	; 96
    2246:	72 e0       	ldi	r23, 0x02	; 2
    2248:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN13EthernetClass11dnsServerIPEv>
    224c:	c7 01       	movw	r24, r14
    224e:	b8 01       	movw	r22, r16
    2250:	0e 94 88 09 	call	0x1310	; 0x1310 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    2254:	c7 01       	movw	r24, r14
    2256:	b4 01       	movw	r22, r8
    2258:	a6 01       	movw	r20, r12
    225a:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
    225e:	9c 01       	movw	r18, r24
  if (ret == 1) {
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	c9 f4       	brne	.+50     	; 0x2298 <_ZN11EthernetUDP11beginPacketEPKcj+0xac>
    return beginPacket(remote_addr, port);
    2266:	d5 01       	movw	r26, r10
    2268:	ed 91       	ld	r30, X+
    226a:	fc 91       	ld	r31, X
    226c:	00 88       	ldd	r0, Z+16	; 0x10
    226e:	f1 89       	ldd	r31, Z+17	; 0x11
    2270:	e0 2d       	mov	r30, r0

#include <Printable.h>

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    2272:	87 e3       	ldi	r24, 0x37	; 55
    2274:	92 e0       	ldi	r25, 0x02	; 2
    2276:	9e 87       	std	Y+14, r25	; 0x0e
    2278:	8d 87       	std	Y+13, r24	; 0x0d
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	ad 81       	ldd	r26, Y+5	; 0x05
    2280:	be 81       	ldd	r27, Y+6	; 0x06
    2282:	8f 87       	std	Y+15, r24	; 0x0f
    2284:	98 8b       	std	Y+16, r25	; 0x10
    2286:	a9 8b       	std	Y+17, r26	; 0x11
    2288:	ba 8b       	std	Y+18, r27	; 0x12
    228a:	c5 01       	movw	r24, r10
    228c:	be 01       	movw	r22, r28
    228e:	63 5f       	subi	r22, 0xF3	; 243
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	a3 01       	movw	r20, r6
    2294:	09 95       	icall
    2296:	9c 01       	movw	r18, r24
  } else {
    return ret;
  }
}
    2298:	c9 01       	movw	r24, r18
    229a:	e3 96       	adiw	r28, 0x33	; 51
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	ff 90       	pop	r15
    22b0:	ef 90       	pop	r14
    22b2:	df 90       	pop	r13
    22b4:	cf 90       	pop	r12
    22b6:	bf 90       	pop	r11
    22b8:	af 90       	pop	r10
    22ba:	9f 90       	pop	r9
    22bc:	8f 90       	pop	r8
    22be:	7f 90       	pop	r7
    22c0:	6f 90       	pop	r6
    22c2:	08 95       	ret

000022c4 <_GLOBAL__I__ZN11EthernetUDPC2Ev>:
{
  while (available())
  {
    read();
  }
}
    22c4:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    22c6:	88 e7       	ldi	r24, 0x78	; 120
    22c8:	92 e0       	ldi	r25, 0x02	; 2
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	00 e0       	ldi	r16, 0x00	; 0
    22d2:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
    22d6:	0f 91       	pop	r16
    22d8:	08 95       	ret

000022da <_Z41__static_initialization_and_destruction_0ii.clone.0>:
{
	long v;
	v=random(256);
	//client.Post(v);
	delay(20*1000);
}
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	91 05       	cpc	r25, r1
    22de:	29 f4       	brne	.+10     	; 0x22ea <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
#include "ylclient.h"

extern HardwareSerial Serial;
using namespace yeelink;

ylclient client;
    22e0:	8e e7       	ldi	r24, 0x7E	; 126
    22e2:	92 e0       	ldi	r25, 0x02	; 2
    22e4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_ZN7yeelink8ylclientC1Ev>
    22e8:	08 95       	ret
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	21 f4       	brne	.+8      	; 0x22f6 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
    22ee:	8e e7       	ldi	r24, 0x7E	; 126
    22f0:	92 e0       	ldi	r25, 0x02	; 2
    22f2:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN7yeelink8ylclientD1Ev>
    22f6:	08 95       	ret

000022f8 <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
	Serial.begin(9600);
    22f8:	8d e1       	ldi	r24, 0x1D	; 29
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	55 e2       	ldi	r21, 0x25	; 37
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	0e 94 3e 14 	call	0x287c	; 0x287c <_ZN14HardwareSerial5beginEm>
	//初始化yeelink client
	//client.setAPIKey("apikey");	//设置API key，这里采用默认的key
	//client.setAPIVersion("v1.0");	//设置API版本，除非yeelink API升级，则采用默认的v1.0版本

	randomSeed(analogRead(0));
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <analogRead>
    230e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Z10randomSeedj>
}
    2312:	08 95       	ret

00002314 <loop>:

// The loop function is called in an endless loop
void loop()
{
	long v;
	v=random(256);
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	71 e0       	ldi	r23, 0x01	; 1
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_Z6randoml>
	//client.Post(v);
	delay(20*1000);
    2320:	60 e2       	ldi	r22, 0x20	; 32
    2322:	7e e4       	ldi	r23, 0x4E	; 78
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	0e 94 08 18 	call	0x3010	; 0x3010 <delay>
}
    232c:	08 95       	ret

0000232e <_GLOBAL__I_client>:
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 6d 11 	call	0x22da	; 0x22da <_Z41__static_initialization_and_destruction_0ii.clone.0>
    2336:	08 95       	ret

00002338 <_GLOBAL__D_client>:
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 6d 11 	call	0x22da	; 0x22da <_Z41__static_initialization_and_destruction_0ii.clone.0>
    2340:	08 95       	ret

00002342 <_ZN7yeelink17ylGenericEthernetD1Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
    2342:	23 ef       	ldi	r18, 0xF3	; 243
    2344:	31 e0       	ldi	r19, 0x01	; 1
    2346:	fc 01       	movw	r30, r24
    2348:	31 83       	std	Z+1, r19	; 0x01
    234a:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
    234c:	08 95       	ret

0000234e <_ZN7yeelink17ylGenericEthernet14setSerialIndexEi>:
}

void ylGenericEthernet::setSerialIndex(int index)
{
	//do nothing in base class
}
    234e:	08 95       	ret

00002350 <_ZN7yeelink17ylGenericEthernet6setMacEPh>:

void ylGenericEthernet::setMac(byte mac[])
{
	//do nothing in base class
}
    2350:	08 95       	ret

00002352 <_ZN7yeelink17ylGenericEthernet10setSubMaskEPh>:

void ylGenericEthernet::setSubMask(byte mask[])
{
	//do nothing in base class
}
    2352:	08 95       	ret

00002354 <_ZN7yeelink17ylGenericEthernet5setIPEPh>:

void ylGenericEthernet::setIP(byte ip[])
{
	//do nothing in base class
}
    2354:	08 95       	ret

00002356 <_ZN7yeelink17ylGenericEthernetD0Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
    2356:	23 ef       	ldi	r18, 0xF3	; 243
    2358:	31 e0       	ldi	r19, 0x01	; 1
    235a:	fc 01       	movw	r30, r24
    235c:	31 83       	std	Z+1, r19	; 0x01
    235e:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
    2360:	0e 94 88 17 	call	0x2f10	; 0x2f10 <_ZdlPv>
    2364:	08 95       	ret

00002366 <_ZN7yeelink17ylGenericEthernetC1Ev>:
//#include "ylconst.h"

namespace yeelink
{

ylGenericEthernet::ylGenericEthernet()
    2366:	fc 01       	movw	r30, r24
    2368:	83 ef       	ldi	r24, 0xF3	; 243
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	80 83       	st	Z, r24
{
	seconds = 30; //API规定两条记录发送的时间间隔不少于10s
    2370:	8e e1       	ldi	r24, 0x1E	; 30
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	93 83       	std	Z+3, r25	; 0x03
    2376:	82 83       	std	Z+2, r24	; 0x02
	apiHeader = 0;
    2378:	13 86       	std	Z+11, r1	; 0x0b
    237a:	12 86       	std	Z+10, r1	; 0x0a
	jsonStr = 0;
    237c:	15 86       	std	Z+13, r1	; 0x0d
    237e:	14 86       	std	Z+12, r1	; 0x0c

}
    2380:	08 95       	ret

00002382 <_ZN7yeelink17ylGenericEthernet9getAPIKeyEv>:
{
	apiKey = key;
}

char* ylGenericEthernet::getAPIKey()
{
    2382:	fc 01       	movw	r30, r24
	return apiKey;
}
    2384:	84 81       	ldd	r24, Z+4	; 0x04
    2386:	95 81       	ldd	r25, Z+5	; 0x05
    2388:	08 95       	ret

0000238a <_ZN7yeelink17ylGenericEthernet15getActiveDeviceEv>:
}

int ylGenericEthernet::getActiveDevice()
{

}
    238a:	08 95       	ret

0000238c <_ZN7yeelink17ylGenericEthernet15getActiveSensorEv>:
}

int ylGenericEthernet::getActiveSensor()
{

}
    238c:	08 95       	ret

0000238e <_ZN7yeelink15ylW5100Ethernet4PostEl>:
		r = false;
	return r;
}

bool ylW5100Ethernet::Post(long value)
{
    238e:	cf 92       	push	r12
    2390:	df 92       	push	r13
    2392:	ef 92       	push	r14
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	ec 01       	movw	r28, r24
    23a0:	7a 01       	movw	r14, r20
    23a2:	8b 01       	movw	r16, r22
	float f;
	f = value * 1.0;
	sendHEADER();
    23a4:	e8 81       	ld	r30, Y
    23a6:	f9 81       	ldd	r31, Y+1	; 0x01
    23a8:	01 90       	ld	r0, Z+
    23aa:	f0 81       	ld	r31, Z
    23ac:	e0 2d       	mov	r30, r0
    23ae:	09 95       	icall
	return Post(f);
    23b0:	c8 80       	ld	r12, Y
    23b2:	d9 80       	ldd	r13, Y+1	; 0x01
}

bool ylW5100Ethernet::Post(long value)
{
	float f;
	f = value * 1.0;
    23b4:	c8 01       	movw	r24, r16
    23b6:	b7 01       	movw	r22, r14
    23b8:	0e 94 16 19 	call	0x322c	; 0x322c <__floatsisf>
    23bc:	ab 01       	movw	r20, r22
    23be:	bc 01       	movw	r22, r24
	sendHEADER();
	return Post(f);
    23c0:	d6 01       	movw	r26, r12
    23c2:	18 96       	adiw	r26, 0x08	; 8
    23c4:	ed 91       	ld	r30, X+
    23c6:	fc 91       	ld	r31, X
    23c8:	19 97       	sbiw	r26, 0x09	; 9
    23ca:	ce 01       	movw	r24, r28
    23cc:	22 e0       	ldi	r18, 0x02	; 2
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	09 95       	icall
}
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	ff 90       	pop	r15
    23dc:	ef 90       	pop	r14
    23de:	df 90       	pop	r13
    23e0:	cf 90       	pop	r12
    23e2:	08 95       	ret

000023e4 <_ZN7yeelink15ylW5100Ethernet6setMacEPh>:
	return Ethernet.begin(MAC);
}

void ylW5100Ethernet::setMac(byte mac[])
{
	MAC = mac;
    23e4:	fc 01       	movw	r30, r24
    23e6:	77 87       	std	Z+15, r23	; 0x0f
    23e8:	66 87       	std	Z+14, r22	; 0x0e
}
    23ea:	08 95       	ret

000023ec <_ZN7yeelink15ylW5100Ethernet10setSubMaskEPh>:

void ylW5100Ethernet::setSubMask(byte mask[])
{
	subMask = mask;
    23ec:	fc 01       	movw	r30, r24
    23ee:	73 8b       	std	Z+19, r23	; 0x13
    23f0:	62 8b       	std	Z+18, r22	; 0x12
}
    23f2:	08 95       	ret

000023f4 <_ZN7yeelink15ylW5100Ethernet5setIPEPh>:

void ylW5100Ethernet::setIP(byte ip[])
{
	IP = ip;
    23f4:	fc 01       	movw	r30, r24
    23f6:	71 8b       	std	Z+17, r23	; 0x11
    23f8:	60 8b       	std	Z+16, r22	; 0x10
}
    23fa:	08 95       	ret

000023fc <_ZN7yeelink15ylW5100Ethernet10sendHEADEREv>:

void ylW5100Ethernet::sendHEADER()
{
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	27 97       	sbiw	r28, 0x07	; 7
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	7c 01       	movw	r14, r24
	net.print("POST /");
    241a:	8c 01       	movw	r16, r24
    241c:	0c 5e       	subi	r16, 0xEC	; 236
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	c8 01       	movw	r24, r16
    2422:	67 e0       	ldi	r22, 0x07	; 7
    2424:	71 e0       	ldi	r23, 0x01	; 1
    2426:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.print((char*) APIVERSION);
    242a:	c8 01       	movw	r24, r16
    242c:	6e e0       	ldi	r22, 0x0E	; 14
    242e:	71 e0       	ldi	r23, 0x01	; 1
    2430:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.print("/device/");
    2434:	c8 01       	movw	r24, r16
    2436:	63 e1       	ldi	r22, 0x13	; 19
    2438:	71 e0       	ldi	r23, 0x01	; 1
    243a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.print(getActiveDevice());
    243e:	c7 01       	movw	r24, r14
    2440:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN7yeelink17ylGenericEthernet15getActiveDeviceEv>
    2444:	bc 01       	movw	r22, r24
    2446:	c8 01       	movw	r24, r16
    2448:	4a e0       	ldi	r20, 0x0A	; 10
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <_ZN5Print5printEii>
	net.print("/sensor/");
    2450:	c8 01       	movw	r24, r16
    2452:	6c e1       	ldi	r22, 0x1C	; 28
    2454:	71 e0       	ldi	r23, 0x01	; 1
    2456:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.print(getActiveSensor());
    245a:	c7 01       	movw	r24, r14
    245c:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN7yeelink17ylGenericEthernet15getActiveSensorEv>
    2460:	bc 01       	movw	r22, r24
    2462:	c8 01       	movw	r24, r16
    2464:	4a e0       	ldi	r20, 0x0A	; 10
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <_ZN5Print5printEii>
	net.print("/datapoints");
    246c:	c8 01       	movw	r24, r16
    246e:	65 e2       	ldi	r22, 0x25	; 37
    2470:	71 e0       	ldi	r23, 0x01	; 1
    2472:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.println(" HTTP/1.1");
    2476:	c8 01       	movw	r24, r16
    2478:	61 e3       	ldi	r22, 0x31	; 49
    247a:	71 e0       	ldi	r23, 0x01	; 1
    247c:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZN5Print7printlnEPKc>
	net.print("Host: ");
    2480:	c8 01       	movw	r24, r16
    2482:	6b e3       	ldi	r22, 0x3B	; 59
    2484:	71 e0       	ldi	r23, 0x01	; 1
    2486:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.println(APISERVER);
    248a:	c8 01       	movw	r24, r16
    248c:	62 e4       	ldi	r22, 0x42	; 66
    248e:	71 e0       	ldi	r23, 0x01	; 1
    2490:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZN5Print7printlnEPKc>
	net.print("Accept: *");
    2494:	c8 01       	movw	r24, r16
    2496:	62 e5       	ldi	r22, 0x52	; 82
    2498:	71 e0       	ldi	r23, 0x01	; 1
    249a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.print("/");
    249e:	c8 01       	movw	r24, r16
    24a0:	6c e5       	ldi	r22, 0x5C	; 92
    24a2:	71 e0       	ldi	r23, 0x01	; 1
    24a4:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.println("*");
    24a8:	c8 01       	movw	r24, r16
    24aa:	6e e5       	ldi	r22, 0x5E	; 94
    24ac:	71 e0       	ldi	r23, 0x01	; 1
    24ae:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZN5Print7printlnEPKc>
	net.print("U-ApiKey: ");
    24b2:	c8 01       	movw	r24, r16
    24b4:	60 e6       	ldi	r22, 0x60	; 96
    24b6:	71 e0       	ldi	r23, 0x01	; 1
    24b8:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>
	net.println(getAPIKey());
    24bc:	c7 01       	movw	r24, r14
    24be:	0e 94 c1 11 	call	0x2382	; 0x2382 <_ZN7yeelink17ylGenericEthernet9getAPIKeyEv>
    24c2:	bc 01       	movw	r22, r24
    24c4:	c8 01       	movw	r24, r16
    24c6:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZN5Print7printlnEPKc>
	net.print("Content-Length: ");
    24ca:	c8 01       	movw	r24, r16
    24cc:	6b e6       	ldi	r22, 0x6B	; 107
    24ce:	71 e0       	ldi	r23, 0x01	; 1
    24d0:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN5Print5printEPKc>

	String str="23.5";
    24d4:	8e 01       	movw	r16, r28
    24d6:	0f 5f       	subi	r16, 0xFF	; 255
    24d8:	1f 4f       	sbci	r17, 0xFF	; 255
    24da:	c8 01       	movw	r24, r16
    24dc:	6c e7       	ldi	r22, 0x7C	; 124
    24de:	71 e0       	ldi	r23, 0x01	; 1
    24e0:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringC1EPKc>
    24e4:	c8 01       	movw	r24, r16
    24e6:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <_ZN6StringD1Ev>

}
    24ea:	27 96       	adiw	r28, 0x07	; 7
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	08 95       	ret

00002504 <_ZN7yeelink15ylW5100EthernetD1Ev>:
{
	// TODO Auto-generated constructor stub

}

ylW5100Ethernet::~ylW5100Ethernet()
    2504:	29 e0       	ldi	r18, 0x09	; 9
    2506:	32 e0       	ldi	r19, 0x02	; 2
    2508:	fc 01       	movw	r30, r24
    250a:	31 83       	std	Z+1, r19	; 0x01
    250c:	20 83       	st	Z, r18
    250e:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
    2512:	08 95       	ret

00002514 <_ZN7yeelink15ylW5100EthernetD0Ev>:
{
	// TODO Auto-generated constructor stub

}

ylW5100Ethernet::~ylW5100Ethernet()
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	ec 01       	movw	r28, r24
    251a:	89 e0       	ldi	r24, 0x09	; 9
    251c:	92 e0       	ldi	r25, 0x02	; 2
    251e:	99 83       	std	Y+1, r25	; 0x01
    2520:	88 83       	st	Y, r24
    2522:	ce 01       	movw	r24, r28
    2524:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
    2528:	ce 01       	movw	r24, r28
    252a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <_ZdlPv>
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	08 95       	ret

00002534 <_ZN7yeelink15ylW5100EthernetC1Ev>:
#include "ylW5100Ethernet.h"

namespace yeelink
{

ylW5100Ethernet::ylW5100Ethernet()
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	ec 01       	movw	r28, r24
    253a:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN7yeelink17ylGenericEthernetC1Ev>
    253e:	89 e0       	ldi	r24, 0x09	; 9
    2540:	92 e0       	ldi	r25, 0x02	; 2
    2542:	99 83       	std	Y+1, r25	; 0x01
    2544:	88 83       	st	Y, r24
    2546:	ce 01       	movw	r24, r28
    2548:	44 96       	adiw	r24, 0x14	; 20
    254a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN14EthernetClientC1Ev>
{
	// TODO Auto-generated constructor stub

}
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <_ZN7yeelink15ylW5100Ethernet7connectEv>:
	return Post(f);
}

bool ylW5100Ethernet::connect()
{
	return Ethernet.begin(MAC);
    2554:	fc 01       	movw	r30, r24
    2556:	66 85       	ldd	r22, Z+14	; 0x0e
    2558:	77 85       	ldd	r23, Z+15	; 0x0f
    255a:	80 e6       	ldi	r24, 0x60	; 96
    255c:	92 e0       	ldi	r25, 0x02	; 2
    255e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN13EthernetClass5beginEPh>
    2562:	21 e0       	ldi	r18, 0x01	; 1
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	09 f4       	brne	.+2      	; 0x256a <_ZN7yeelink15ylW5100Ethernet7connectEv+0x16>
    2568:	20 e0       	ldi	r18, 0x00	; 0
}
    256a:	82 2f       	mov	r24, r18
    256c:	08 95       	ret

0000256e <_ZN7yeelink15ylW5100Ethernet4PostEfi>:
}

bool ylW5100Ethernet::Post(float value, int decimal)
{
	bool r;
	if (connect())
    256e:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN7yeelink15ylW5100Ethernet7connectEv>
		r = true;
	}
	else
		r = false;
	return r;
}
    2572:	08 95       	ret

00002574 <_GLOBAL__I__ZN7yeelink15ylW5100EthernetC2Ev>:
int ylW5100Ethernet::getLength(long value)
{

}

} /* namespace yeelink */
    2574:	0f 93       	push	r16
    2576:	89 e8       	ldi	r24, 0x89	; 137
    2578:	92 e0       	ldi	r25, 0x02	; 2
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	00 e0       	ldi	r16, 0x00	; 0
    2582:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
    2586:	0f 91       	pop	r16
    2588:	08 95       	ret

0000258a <_ZN7yeelink8ylclientD1Ev>:
	this->_apikey = (char*) DEFAULTAPIKEY;


}

ylclient::~ylclient()
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	ec 01       	movw	r28, r24
    2590:	8f e1       	ldi	r24, 0x1F	; 31
    2592:	92 e0       	ldi	r25, 0x02	; 2
    2594:	99 83       	std	Y+1, r25	; 0x01
    2596:	88 83       	st	Y, r24
{
	delete net;
    2598:	89 85       	ldd	r24, Y+9	; 0x09
    259a:	9a 85       	ldd	r25, Y+10	; 0x0a
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	39 f0       	breq	.+14     	; 0x25ae <_ZN7yeelink8ylclientD1Ev+0x24>
    25a0:	dc 01       	movw	r26, r24
    25a2:	ed 91       	ld	r30, X+
    25a4:	fc 91       	ld	r31, X
    25a6:	04 80       	ldd	r0, Z+4	; 0x04
    25a8:	f5 81       	ldd	r31, Z+5	; 0x05
    25aa:	e0 2d       	mov	r30, r0
    25ac:	09 95       	icall
	net = NULL;
    25ae:	1a 86       	std	Y+10, r1	; 0x0a
    25b0:	19 86       	std	Y+9, r1	; 0x09
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	08 95       	ret

000025b8 <_ZN7yeelink8ylclientD0Ev>:
	this->_apikey = (char*) DEFAULTAPIKEY;


}

ylclient::~ylclient()
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	ec 01       	movw	r28, r24
{
	delete net;
	net = NULL;
}
    25be:	0e 94 c5 12 	call	0x258a	; 0x258a <_ZN7yeelink8ylclientD1Ev>
    25c2:	ce 01       	movw	r24, r28
    25c4:	0e 94 88 17 	call	0x2f10	; 0x2f10 <_ZdlPv>
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	08 95       	ret

000025ce <_ZN7yeelink8ylclientC1Ev>:
#endif

namespace yeelink
{

ylclient::ylclient()
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	ec 01       	movw	r28, r24
    25d8:	8f e1       	ldi	r24, 0x1F	; 31
    25da:	92 e0       	ldi	r25, 0x02	; 2
    25dc:	99 83       	std	Y+1, r25	; 0x01
    25de:	88 83       	st	Y, r24
{
	//决定ylGenericEthernet的子类类型
#ifdef W5100BOARD
	net = new ylW5100Ethernet();
    25e0:	81 e2       	ldi	r24, 0x21	; 33
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_Znwj>
    25e8:	8c 01       	movw	r16, r24
    25ea:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN7yeelink15ylW5100EthernetC1Ev>
    25ee:	09 87       	std	Y+9, r16	; 0x09
    25f0:	1a 87       	std	Y+10, r17	; 0x0a
#else
	net = new ylSerialHTTP();
#endif
#endif

	this->_apikey = (char*) DEFAULTAPIKEY;
    25f2:	81 e8       	ldi	r24, 0x81	; 129
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	9b 83       	std	Y+3, r25	; 0x03
    25f8:	8a 83       	std	Y+2, r24	; 0x02


}
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <_GLOBAL__I__ZN7yeelink8ylclientC2Ev>:
	if ((index < HARDSERIALCOUNTS - 1) || (index > HARDSERIALCOUNTS - 1))
		_serialIndex = 0; //Serial
	net->setSerialIndex(_serialIndex);
}

} /* namespace yeelink */
    2604:	0f 93       	push	r16
    2606:	8f e8       	ldi	r24, 0x8F	; 143
    2608:	92 e0       	ldi	r25, 0x02	; 2
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	00 e0       	ldi	r16, 0x00	; 0
    2612:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <_ZN9IPAddressC1Ehhhh>
    2616:	0f 91       	pop	r16
    2618:	08 95       	ret

0000261a <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    261a:	fc 01       	movw	r30, r24
    261c:	84 85       	ldd	r24, Z+12	; 0x0c
    261e:	95 85       	ldd	r25, Z+13	; 0x0d
    2620:	fc 01       	movw	r30, r24
    2622:	e0 5c       	subi	r30, 0xC0	; 192
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	20 81       	ld	r18, Z
    2628:	31 81       	ldd	r19, Z+1	; 0x01
    262a:	8e 5b       	subi	r24, 0xBE	; 190
    262c:	9f 4f       	sbci	r25, 0xFF	; 255
    262e:	fc 01       	movw	r30, r24
    2630:	80 81       	ld	r24, Z
    2632:	91 81       	ldd	r25, Z+1	; 0x01
    2634:	28 1b       	sub	r18, r24
    2636:	39 0b       	sbc	r19, r25
    2638:	2f 73       	andi	r18, 0x3F	; 63
    263a:	30 70       	andi	r19, 0x00	; 0
}
    263c:	c9 01       	movw	r24, r18
    263e:	08 95       	ret

00002640 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    2640:	fc 01       	movw	r30, r24
    2642:	84 85       	ldd	r24, Z+12	; 0x0c
    2644:	95 85       	ldd	r25, Z+13	; 0x0d
    2646:	fc 01       	movw	r30, r24
    2648:	e0 5c       	subi	r30, 0xC0	; 192
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	40 81       	ld	r20, Z
    264e:	51 81       	ldd	r21, Z+1	; 0x01
    2650:	fc 01       	movw	r30, r24
    2652:	ee 5b       	subi	r30, 0xBE	; 190
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	20 81       	ld	r18, Z
    2658:	31 81       	ldd	r19, Z+1	; 0x01
    265a:	42 17       	cp	r20, r18
    265c:	53 07       	cpc	r21, r19
    265e:	41 f0       	breq	.+16     	; 0x2670 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    2660:	01 90       	ld	r0, Z+
    2662:	f0 81       	ld	r31, Z
    2664:	e0 2d       	mov	r30, r0
    2666:	e8 0f       	add	r30, r24
    2668:	f9 1f       	adc	r31, r25
    266a:	20 81       	ld	r18, Z
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    2670:	2f ef       	ldi	r18, 0xFF	; 255
    2672:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    2674:	c9 01       	movw	r24, r18
    2676:	08 95       	ret

00002678 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    2678:	fc 01       	movw	r30, r24
    267a:	84 85       	ldd	r24, Z+12	; 0x0c
    267c:	95 85       	ldd	r25, Z+13	; 0x0d
    267e:	fc 01       	movw	r30, r24
    2680:	e0 5c       	subi	r30, 0xC0	; 192
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	40 81       	ld	r20, Z
    2686:	51 81       	ldd	r21, Z+1	; 0x01
    2688:	fc 01       	movw	r30, r24
    268a:	ee 5b       	subi	r30, 0xBE	; 190
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	20 81       	ld	r18, Z
    2690:	31 81       	ldd	r19, Z+1	; 0x01
    2692:	42 17       	cp	r20, r18
    2694:	53 07       	cpc	r21, r19
    2696:	71 f0       	breq	.+28     	; 0x26b4 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    2698:	a0 81       	ld	r26, Z
    269a:	b1 81       	ldd	r27, Z+1	; 0x01
    269c:	a8 0f       	add	r26, r24
    269e:	b9 1f       	adc	r27, r25
    26a0:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	01 96       	adiw	r24, 0x01	; 1
    26a8:	8f 73       	andi	r24, 0x3F	; 63
    26aa:	90 70       	andi	r25, 0x00	; 0
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    return c;
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    26b4:	2f ef       	ldi	r18, 0xFF	; 255
    26b6:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    26b8:	c9 01       	movw	r24, r18
    26ba:	08 95       	ret

000026bc <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    26bc:	dc 01       	movw	r26, r24
    26be:	1e 96       	adiw	r26, 0x0e	; 14
    26c0:	8d 91       	ld	r24, X+
    26c2:	9c 91       	ld	r25, X
    26c4:	1f 97       	sbiw	r26, 0x0f	; 15
    26c6:	fc 01       	movw	r30, r24
    26c8:	e0 5c       	subi	r30, 0xC0	; 192
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	8e 5b       	subi	r24, 0xBE	; 190
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	40 81       	ld	r20, Z
    26d2:	51 81       	ldd	r21, Z+1	; 0x01
    26d4:	dc 01       	movw	r26, r24
    26d6:	2d 91       	ld	r18, X+
    26d8:	3c 91       	ld	r19, X
    26da:	11 97       	sbiw	r26, 0x01	; 1
    26dc:	42 17       	cp	r20, r18
    26de:	53 07       	cpc	r21, r19
    26e0:	b9 f7       	brne	.-18     	; 0x26d0 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    26e2:	08 95       	ret

000026e4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    26e4:	1f 93       	push	r17
    26e6:	fc 01       	movw	r30, r24
    26e8:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    26ea:	26 85       	ldd	r18, Z+14	; 0x0e
    26ec:	37 85       	ldd	r19, Z+15	; 0x0f
    26ee:	d9 01       	movw	r26, r18
    26f0:	a0 5c       	subi	r26, 0xC0	; 192
    26f2:	bf 4f       	sbci	r27, 0xFF	; 255
    26f4:	8d 91       	ld	r24, X+
    26f6:	9c 91       	ld	r25, X
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	60 e4       	ldi	r22, 0x40	; 64
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    2702:	d9 01       	movw	r26, r18
    2704:	ae 5b       	subi	r26, 0xBE	; 190
    2706:	bf 4f       	sbci	r27, 0xFF	; 255
    2708:	4d 91       	ld	r20, X+
    270a:	5c 91       	ld	r21, X
    270c:	11 97       	sbiw	r26, 0x01	; 1
    270e:	84 17       	cp	r24, r20
    2710:	95 07       	cpc	r25, r21
    2712:	d1 f3       	breq	.-12     	; 0x2708 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    2714:	d9 01       	movw	r26, r18
    2716:	a0 5c       	subi	r26, 0xC0	; 192
    2718:	bf 4f       	sbci	r27, 0xFF	; 255
    271a:	0d 90       	ld	r0, X+
    271c:	bc 91       	ld	r27, X
    271e:	a0 2d       	mov	r26, r0
    2720:	a2 0f       	add	r26, r18
    2722:	b3 1f       	adc	r27, r19
    2724:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    2726:	a6 85       	ldd	r26, Z+14	; 0x0e
    2728:	b7 85       	ldd	r27, Z+15	; 0x0f
    272a:	a0 5c       	subi	r26, 0xC0	; 192
    272c:	bf 4f       	sbci	r27, 0xFF	; 255
    272e:	11 96       	adiw	r26, 0x01	; 1
    2730:	9c 93       	st	X, r25
    2732:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    2734:	a6 89       	ldd	r26, Z+22	; 0x16
    2736:	b7 89       	ldd	r27, Z+23	; 0x17
    2738:	2c 91       	ld	r18, X
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	05 8c       	ldd	r0, Z+29	; 0x1d
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <_ZN14HardwareSerial5writeEh+0x62>
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	0a 94       	dec	r0
    2748:	e2 f7       	brpl	.-8      	; 0x2742 <_ZN14HardwareSerial5writeEh+0x5e>
    274a:	28 2b       	or	r18, r24
    274c:	2c 93       	st	X, r18
  
  return 1;
}
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	1f 91       	pop	r17
    2754:	08 95       	ret

00002756 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2756:	fb 01       	movw	r30, r22
    2758:	e0 5c       	subi	r30, 0xC0	; 192
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	20 81       	ld	r18, Z
    275e:	31 81       	ldd	r19, Z+1	; 0x01
    2760:	2f 5f       	subi	r18, 0xFF	; 255
    2762:	3f 4f       	sbci	r19, 0xFF	; 255
    2764:	2f 73       	andi	r18, 0x3F	; 63
    2766:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    2768:	db 01       	movw	r26, r22
    276a:	ae 5b       	subi	r26, 0xBE	; 190
    276c:	bf 4f       	sbci	r27, 0xFF	; 255
    276e:	4d 91       	ld	r20, X+
    2770:	5c 91       	ld	r21, X
    2772:	11 97       	sbiw	r26, 0x01	; 1
    2774:	24 17       	cp	r18, r20
    2776:	35 07       	cpc	r19, r21
    2778:	39 f0       	breq	.+14     	; 0x2788 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    277a:	a0 81       	ld	r26, Z
    277c:	b1 81       	ldd	r27, Z+1	; 0x01
    277e:	a6 0f       	add	r26, r22
    2780:	b7 1f       	adc	r27, r23
    2782:	8c 93       	st	X, r24
    buffer->head = i;
    2784:	31 83       	std	Z+1, r19	; 0x01
    2786:	20 83       	st	Z, r18
    2788:	08 95       	ret

0000278a <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    278a:	08 95       	ret

0000278c <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    278c:	1f 92       	push	r1
    278e:	0f 92       	push	r0
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	0f 92       	push	r0
    2794:	11 24       	eor	r1, r1
    2796:	2f 93       	push	r18
    2798:	3f 93       	push	r19
    279a:	4f 93       	push	r20
    279c:	5f 93       	push	r21
    279e:	6f 93       	push	r22
    27a0:	7f 93       	push	r23
    27a2:	8f 93       	push	r24
    27a4:	9f 93       	push	r25
    27a6:	af 93       	push	r26
    27a8:	bf 93       	push	r27
    27aa:	ef 93       	push	r30
    27ac:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    27ae:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    27b2:	65 e9       	ldi	r22, 0x95	; 149
    27b4:	72 e0       	ldi	r23, 0x02	; 2
    27b6:	0e 94 ab 13 	call	0x2756	; 0x2756 <_Z10store_charhP11ring_buffer>
  }
    27ba:	ff 91       	pop	r31
    27bc:	ef 91       	pop	r30
    27be:	bf 91       	pop	r27
    27c0:	af 91       	pop	r26
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	7f 91       	pop	r23
    27c8:	6f 91       	pop	r22
    27ca:	5f 91       	pop	r21
    27cc:	4f 91       	pop	r20
    27ce:	3f 91       	pop	r19
    27d0:	2f 91       	pop	r18
    27d2:	0f 90       	pop	r0
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	0f 90       	pop	r0
    27d8:	1f 90       	pop	r1
    27da:	18 95       	reti

000027dc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    27dc:	8d e1       	ldi	r24, 0x1D	; 29
    27de:	93 e0       	ldi	r25, 0x03	; 3
    27e0:	0e 94 0d 13 	call	0x261a	; 0x261a <_ZN14HardwareSerial9availableEv>
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	11 f0       	breq	.+4      	; 0x27ec <_Z14serialEventRunv+0x10>
    27e8:	0e 94 c5 13 	call	0x278a	; 0x278a <_Z11serialEventv>
    27ec:	08 95       	ret

000027ee <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    27ee:	1f 92       	push	r1
    27f0:	0f 92       	push	r0
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	0f 92       	push	r0
    27f6:	11 24       	eor	r1, r1
    27f8:	2f 93       	push	r18
    27fa:	3f 93       	push	r19
    27fc:	5f 93       	push	r21
    27fe:	6f 93       	push	r22
    2800:	7f 93       	push	r23
    2802:	8f 93       	push	r24
    2804:	9f 93       	push	r25
    2806:	af 93       	push	r26
    2808:	bf 93       	push	r27
    280a:	ef 93       	push	r30
    280c:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    280e:	20 91 19 03 	lds	r18, 0x0319
    2812:	30 91 1a 03 	lds	r19, 0x031A
    2816:	80 91 1b 03 	lds	r24, 0x031B
    281a:	90 91 1c 03 	lds	r25, 0x031C
    281e:	28 17       	cp	r18, r24
    2820:	39 07       	cpc	r19, r25
    2822:	31 f4       	brne	.+12     	; 0x2830 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    2824:	80 91 c1 00 	lds	r24, 0x00C1
    2828:	8f 7d       	andi	r24, 0xDF	; 223
    282a:	80 93 c1 00 	sts	0x00C1, r24
    282e:	16 c0       	rjmp	.+44     	; 0x285c <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    2830:	e0 91 1b 03 	lds	r30, 0x031B
    2834:	f0 91 1c 03 	lds	r31, 0x031C
    2838:	e7 52       	subi	r30, 0x27	; 39
    283a:	fd 4f       	sbci	r31, 0xFD	; 253
    283c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    283e:	80 91 1b 03 	lds	r24, 0x031B
    2842:	90 91 1c 03 	lds	r25, 0x031C
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	60 e4       	ldi	r22, 0x40	; 64
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__divmodhi4>
    2850:	90 93 1c 03 	sts	0x031C, r25
    2854:	80 93 1b 03 	sts	0x031B, r24
	
  #if defined(UDR0)
    UDR0 = c;
    2858:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    285c:	ff 91       	pop	r31
    285e:	ef 91       	pop	r30
    2860:	bf 91       	pop	r27
    2862:	af 91       	pop	r26
    2864:	9f 91       	pop	r25
    2866:	8f 91       	pop	r24
    2868:	7f 91       	pop	r23
    286a:	6f 91       	pop	r22
    286c:	5f 91       	pop	r21
    286e:	3f 91       	pop	r19
    2870:	2f 91       	pop	r18
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    287c:	df 92       	push	r13
    287e:	ef 92       	push	r14
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	ec 01       	movw	r28, r24
    288c:	7a 01       	movw	r14, r20
    288e:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    2890:	dd 24       	eor	r13, r13
    2892:	d3 94       	inc	r13
    2894:	40 30       	cpi	r20, 0x00	; 0
    2896:	81 ee       	ldi	r24, 0xE1	; 225
    2898:	58 07       	cpc	r21, r24
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	68 07       	cpc	r22, r24
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	78 07       	cpc	r23, r24
    28a2:	49 f4       	brne	.+18     	; 0x28b6 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    28a4:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    28a6:	ec 89       	ldd	r30, Y+20	; 0x14
    28a8:	fd 89       	ldd	r31, Y+21	; 0x15
    28aa:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    28ac:	60 e8       	ldi	r22, 0x80	; 128
    28ae:	74 e8       	ldi	r23, 0x84	; 132
    28b0:	8e e1       	ldi	r24, 0x1E	; 30
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    28b6:	ec 89       	ldd	r30, Y+20	; 0x14
    28b8:	fd 89       	ldd	r31, Y+21	; 0x15
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 8c       	ldd	r0, Y+30	; 0x1e
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <_ZN14HardwareSerial5beginEm+0x4a>
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	0a 94       	dec	r0
    28c8:	e2 f7       	brpl	.-8      	; 0x28c2 <_ZN14HardwareSerial5beginEm+0x46>
    28ca:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	79 e0       	ldi	r23, 0x09	; 9
    28d0:	8d e3       	ldi	r24, 0x3D	; 61
    28d2:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    28d4:	a8 01       	movw	r20, r16
    28d6:	97 01       	movw	r18, r14
    28d8:	0e 94 83 19 	call	0x3306	; 0x3306 <__udivmodsi4>
    28dc:	21 50       	subi	r18, 0x01	; 1
    28de:	30 40       	sbci	r19, 0x00	; 0
    28e0:	40 40       	sbci	r20, 0x00	; 0
    28e2:	50 40       	sbci	r21, 0x00	; 0
    28e4:	56 95       	lsr	r21
    28e6:	47 95       	ror	r20
    28e8:	37 95       	ror	r19
    28ea:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    28ec:	80 e1       	ldi	r24, 0x10	; 16
    28ee:	20 30       	cpi	r18, 0x00	; 0
    28f0:	38 07       	cpc	r19, r24
    28f2:	10 f0       	brcs	.+4      	; 0x28f8 <_ZN14HardwareSerial5beginEm+0x7c>
    28f4:	dd 20       	and	r13, r13
    28f6:	b1 f6       	brne	.-84     	; 0x28a4 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    28f8:	e8 89       	ldd	r30, Y+16	; 0x10
    28fa:	f9 89       	ldd	r31, Y+17	; 0x11
    28fc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    28fe:	ea 89       	ldd	r30, Y+18	; 0x12
    2900:	fb 89       	ldd	r31, Y+19	; 0x13
    2902:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    2904:	ee 89       	ldd	r30, Y+22	; 0x16
    2906:	ff 89       	ldd	r31, Y+23	; 0x17
    2908:	40 81       	ld	r20, Z
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 01       	movw	r18, r24
    2910:	0a 8c       	ldd	r0, Y+26	; 0x1a
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <_ZN14HardwareSerial5beginEm+0x9c>
    2914:	22 0f       	add	r18, r18
    2916:	33 1f       	adc	r19, r19
    2918:	0a 94       	dec	r0
    291a:	e2 f7       	brpl	.-8      	; 0x2914 <_ZN14HardwareSerial5beginEm+0x98>
    291c:	42 2b       	or	r20, r18
    291e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    2920:	ee 89       	ldd	r30, Y+22	; 0x16
    2922:	ff 89       	ldd	r31, Y+23	; 0x17
    2924:	40 81       	ld	r20, Z
    2926:	9c 01       	movw	r18, r24
    2928:	0b 8c       	ldd	r0, Y+27	; 0x1b
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <_ZN14HardwareSerial5beginEm+0xb4>
    292c:	22 0f       	add	r18, r18
    292e:	33 1f       	adc	r19, r19
    2930:	0a 94       	dec	r0
    2932:	e2 f7       	brpl	.-8      	; 0x292c <_ZN14HardwareSerial5beginEm+0xb0>
    2934:	42 2b       	or	r20, r18
    2936:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    2938:	ee 89       	ldd	r30, Y+22	; 0x16
    293a:	ff 89       	ldd	r31, Y+23	; 0x17
    293c:	40 81       	ld	r20, Z
    293e:	9c 01       	movw	r18, r24
    2940:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <_ZN14HardwareSerial5beginEm+0xcc>
    2944:	22 0f       	add	r18, r18
    2946:	33 1f       	adc	r19, r19
    2948:	0a 94       	dec	r0
    294a:	e2 f7       	brpl	.-8      	; 0x2944 <_ZN14HardwareSerial5beginEm+0xc8>
    294c:	42 2b       	or	r20, r18
    294e:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    2950:	ee 89       	ldd	r30, Y+22	; 0x16
    2952:	ff 89       	ldd	r31, Y+23	; 0x17
    2954:	20 81       	ld	r18, Z
    2956:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2958:	02 c0       	rjmp	.+4      	; 0x295e <_ZN14HardwareSerial5beginEm+0xe2>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	0a 94       	dec	r0
    2960:	e2 f7       	brpl	.-8      	; 0x295a <_ZN14HardwareSerial5beginEm+0xde>
    2962:	80 95       	com	r24
    2964:	82 23       	and	r24, r18
    2966:	80 83       	st	Z, r24
}
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	08 95       	ret

00002978 <_GLOBAL__I_rx_buffer>:
    2978:	10 92 20 03 	sts	0x0320, r1
    297c:	10 92 1f 03 	sts	0x031F, r1
    2980:	88 ee       	ldi	r24, 0xE8	; 232
    2982:	93 e0       	ldi	r25, 0x03	; 3
    2984:	a0 e0       	ldi	r26, 0x00	; 0
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	80 93 21 03 	sts	0x0321, r24
    298c:	90 93 22 03 	sts	0x0322, r25
    2990:	a0 93 23 03 	sts	0x0323, r26
    2994:	b0 93 24 03 	sts	0x0324, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2998:	ef e1       	ldi	r30, 0x1F	; 31
    299a:	f3 e0       	ldi	r31, 0x03	; 3
    299c:	87 e2       	ldi	r24, 0x27	; 39
    299e:	92 e0       	ldi	r25, 0x02	; 2
    29a0:	92 93       	st	-Z, r25
    29a2:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    29a4:	85 e9       	ldi	r24, 0x95	; 149
    29a6:	92 e0       	ldi	r25, 0x02	; 2
    29a8:	95 87       	std	Z+13, r25	; 0x0d
    29aa:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    29ac:	89 ed       	ldi	r24, 0xD9	; 217
    29ae:	92 e0       	ldi	r25, 0x02	; 2
    29b0:	97 87       	std	Z+15, r25	; 0x0f
    29b2:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    29b4:	85 ec       	ldi	r24, 0xC5	; 197
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	91 8b       	std	Z+17, r25	; 0x11
    29ba:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    29bc:	84 ec       	ldi	r24, 0xC4	; 196
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	93 8b       	std	Z+19, r25	; 0x13
    29c2:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    29c4:	80 ec       	ldi	r24, 0xC0	; 192
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	95 8b       	std	Z+21, r25	; 0x15
    29ca:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    29cc:	81 ec       	ldi	r24, 0xC1	; 193
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	97 8b       	std	Z+23, r25	; 0x17
    29d2:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    29d4:	86 ec       	ldi	r24, 0xC6	; 198
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	91 8f       	std	Z+25, r25	; 0x19
    29da:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    29dc:	84 e0       	ldi	r24, 0x04	; 4
    29de:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    29e0:	83 e0       	ldi	r24, 0x03	; 3
    29e2:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    29e4:	87 e0       	ldi	r24, 0x07	; 7
    29e6:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    29e8:	85 e0       	ldi	r24, 0x05	; 5
    29ea:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    29f0:	08 95       	ret

000029f2 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    29f2:	8f 92       	push	r8
    29f4:	9f 92       	push	r9
    29f6:	af 92       	push	r10
    29f8:	bf 92       	push	r11
    29fa:	cf 92       	push	r12
    29fc:	df 92       	push	r13
    29fe:	ef 92       	push	r14
    2a00:	ff 92       	push	r15
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	4c 01       	movw	r8, r24
    2a0c:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	a8 2e       	mov	r10, r24
    2a12:	b1 2c       	mov	r11, r1
    2a14:	a8 0c       	add	r10, r8
    2a16:	b9 1c       	adc	r11, r9
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    2a18:	c0 e0       	ldi	r28, 0x00	; 0
    2a1a:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    2a1c:	cc 24       	eor	r12, r12
    2a1e:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    2a20:	f5 01       	movw	r30, r10
    2a22:	61 91       	ld	r22, Z+
    2a24:	5f 01       	movw	r10, r30
    2a26:	c7 01       	movw	r24, r14
    2a28:	4a e0       	ldi	r20, 0x0A	; 10
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN5Print5printEhi>
    2a30:	8c 01       	movw	r16, r24
        n += p.print('.');
    2a32:	c7 01       	movw	r24, r14
    2a34:	6e e2       	ldi	r22, 0x2E	; 46
    2a36:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    2a3a:	08 0f       	add	r16, r24
    2a3c:	19 1f       	adc	r17, r25
        n += p.print('.');
    2a3e:	c0 0e       	add	r12, r16
    2a40:	d1 1e       	adc	r13, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    2a42:	21 96       	adiw	r28, 0x01	; 1
    2a44:	c3 30       	cpi	r28, 0x03	; 3
    2a46:	d1 05       	cpc	r29, r1
    2a48:	59 f7       	brne	.-42     	; 0x2a20 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    2a4a:	c7 01       	movw	r24, r14
    2a4c:	f4 01       	movw	r30, r8
    2a4e:	65 81       	ldd	r22, Z+5	; 0x05
    2a50:	4a e0       	ldi	r20, 0x0A	; 10
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN5Print5printEhi>
    2a58:	c8 0e       	add	r12, r24
    2a5a:	d9 1e       	adc	r13, r25
    return n;
}
    2a5c:	c6 01       	movw	r24, r12
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	cf 90       	pop	r12
    2a6e:	bf 90       	pop	r11
    2a70:	af 90       	pop	r10
    2a72:	9f 90       	pop	r9
    2a74:	8f 90       	pop	r8
    2a76:	08 95       	ret

00002a78 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    2a78:	fc 01       	movw	r30, r24
    2a7a:	87 e3       	ldi	r24, 0x37	; 55
    2a7c:	92 e0       	ldi	r25, 0x02	; 2
    2a7e:	91 83       	std	Z+1, r25	; 0x01
    2a80:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    2a82:	12 82       	std	Z+2, r1	; 0x02
    2a84:	13 82       	std	Z+3, r1	; 0x03
    2a86:	14 82       	std	Z+4, r1	; 0x04
    2a88:	15 82       	std	Z+5, r1	; 0x05
}
    2a8a:	08 95       	ret

00002a8c <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    2a8c:	0f 93       	push	r16
    2a8e:	fc 01       	movw	r30, r24
    2a90:	87 e3       	ldi	r24, 0x37	; 55
    2a92:	92 e0       	ldi	r25, 0x02	; 2
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    2a98:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    2a9a:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    2a9c:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    2a9e:	05 83       	std	Z+5, r16	; 0x05
}
    2aa0:	0f 91       	pop	r16
    2aa2:	08 95       	ret

00002aa4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	87 e3       	ldi	r24, 0x37	; 55
    2aa8:	92 e0       	ldi	r25, 0x02	; 2
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
    2aae:	db 01       	movw	r26, r22
    2ab0:	2d 91       	ld	r18, X+
    2ab2:	3d 91       	ld	r19, X+
    2ab4:	4d 91       	ld	r20, X+
    2ab6:	5c 91       	ld	r21, X
    2ab8:	13 97       	sbiw	r26, 0x03	; 3
    2aba:	22 83       	std	Z+2, r18	; 0x02
    2abc:	33 83       	std	Z+3, r19	; 0x03
    2abe:	44 83       	std	Z+4, r20	; 0x04
    2ac0:	55 83       	std	Z+5, r21	; 0x05
}
    2ac2:	08 95       	ret

00002ac4 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	fc 01       	movw	r30, r24
    memcpy(_address, address, sizeof(_address));
    2aca:	eb 01       	movw	r28, r22
    2acc:	88 81       	ld	r24, Y
    2ace:	99 81       	ldd	r25, Y+1	; 0x01
    2ad0:	aa 81       	ldd	r26, Y+2	; 0x02
    2ad2:	bb 81       	ldd	r27, Y+3	; 0x03
    2ad4:	82 83       	std	Z+2, r24	; 0x02
    2ad6:	93 83       	std	Z+3, r25	; 0x03
    2ad8:	a4 83       	std	Z+4, r26	; 0x04
    2ada:	b5 83       	std	Z+5, r27	; 0x05
    return *this;
}
    2adc:	cf 01       	movw	r24, r30
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	08 95       	ret

00002ae4 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    2ae4:	87 e3       	ldi	r24, 0x37	; 55
    2ae6:	92 e0       	ldi	r25, 0x02	; 2
    2ae8:	90 93 3d 03 	sts	0x033D, r25
    2aec:	80 93 3c 03 	sts	0x033C, r24
{
    _address[0] = first_octet;
    2af0:	10 92 3e 03 	sts	0x033E, r1
    _address[1] = second_octet;
    2af4:	10 92 3f 03 	sts	0x033F, r1
    _address[2] = third_octet;
    2af8:	10 92 40 03 	sts	0x0340, r1
    _address[3] = fourth_octet;
    2afc:	10 92 41 03 	sts	0x0341, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    2b00:	08 95       	ret

00002b02 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	6c 01       	movw	r12, r24
    2b14:	7b 01       	movw	r14, r22
    2b16:	8a 01       	movw	r16, r20
  size_t n = 0;
    2b18:	c0 e0       	ldi	r28, 0x00	; 0
    2b1a:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    2b1c:	0f c0       	rjmp	.+30     	; 0x2b3c <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    2b1e:	d7 01       	movw	r26, r14
    2b20:	6d 91       	ld	r22, X+
    2b22:	7d 01       	movw	r14, r26
    2b24:	d6 01       	movw	r26, r12
    2b26:	ed 91       	ld	r30, X+
    2b28:	fc 91       	ld	r31, X
    2b2a:	01 90       	ld	r0, Z+
    2b2c:	f0 81       	ld	r31, Z
    2b2e:	e0 2d       	mov	r30, r0
    2b30:	c6 01       	movw	r24, r12
    2b32:	09 95       	icall
    2b34:	c8 0f       	add	r28, r24
    2b36:	d9 1f       	adc	r29, r25
    2b38:	01 50       	subi	r16, 0x01	; 1
    2b3a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2b3c:	01 15       	cp	r16, r1
    2b3e:	11 05       	cpc	r17, r1
    2b40:	71 f7       	brne	.-36     	; 0x2b1e <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    2b42:	ce 01       	movw	r24, r28
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	08 95       	ret

00002b56 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    2b56:	db 01       	movw	r26, r22
    2b58:	0d 90       	ld	r0, X+
    2b5a:	00 20       	and	r0, r0
    2b5c:	e9 f7       	brne	.-6      	; 0x2b58 <_ZN5Print5writeEPKc+0x2>
    2b5e:	ad 01       	movw	r20, r26
    2b60:	41 50       	subi	r20, 0x01	; 1
    2b62:	50 40       	sbci	r21, 0x00	; 0
    2b64:	46 1b       	sub	r20, r22
    2b66:	57 0b       	sbc	r21, r23
    2b68:	dc 01       	movw	r26, r24
    2b6a:	ed 91       	ld	r30, X+
    2b6c:	fc 91       	ld	r31, X
    2b6e:	02 80       	ldd	r0, Z+2	; 0x02
    2b70:	f3 81       	ldd	r31, Z+3	; 0x03
    2b72:	e0 2d       	mov	r30, r0
    2b74:	09 95       	icall
    2b76:	08 95       	ret

00002b78 <_ZN5Print5printEPKc>:
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    2b78:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN5Print5writeEPKc>
    size_t println(const char[]);
    2b7c:	08 95       	ret

00002b7e <_ZN5Print5printEc>:
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    2b7e:	dc 01       	movw	r26, r24
    2b80:	ed 91       	ld	r30, X+
    2b82:	fc 91       	ld	r31, X
    2b84:	01 90       	ld	r0, Z+
    2b86:	f0 81       	ld	r31, Z
    2b88:	e0 2d       	mov	r30, r0
    2b8a:	09 95       	icall
    size_t println(long, int = DEC);
    2b8c:	08 95       	ret

00002b8e <_ZN5Print7printlnEv>:
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	ec 01       	movw	r28, r24
    2b98:	6d e0       	ldi	r22, 0x0D	; 13
    2b9a:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN5Print5printEc>
    2b9e:	8c 01       	movw	r16, r24
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	6a e0       	ldi	r22, 0x0A	; 10
    2ba4:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN5Print5printEc>
    2ba8:	08 0f       	add	r16, r24
    2baa:	19 1f       	adc	r17, r25
    2bac:	c8 01       	movw	r24, r16
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	08 95       	ret

00002bb8 <_ZN5Print7printlnEPKc>:
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	ec 01       	movw	r28, r24
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    2bc2:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN5Print5writeEPKc>
    2bc6:	8c 01       	movw	r16, r24
    2bc8:	ce 01       	movw	r24, r28
    2bca:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZN5Print7printlnEv>
    2bce:	08 0f       	add	r16, r24
    2bd0:	19 1f       	adc	r17, r25
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	08 95       	ret

00002bde <_ZN5Print11printNumberEmh>:
    2bde:	8f 92       	push	r8
    2be0:	9f 92       	push	r9
    2be2:	af 92       	push	r10
    2be4:	bf 92       	push	r11
    2be6:	cf 92       	push	r12
    2be8:	df 92       	push	r13
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	a1 97       	sbiw	r28, 0x21	; 33
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	6c 01       	movw	r12, r24
    2c08:	04 2f       	mov	r16, r20
    2c0a:	e5 2f       	mov	r30, r21
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	12 2f       	mov	r17, r18
    2c10:	19 a2       	std	Y+33, r1	; 0x21
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	08 f4       	brcc	.+2      	; 0x2c18 <_ZN5Print11printNumberEmh+0x3a>
    2c16:	1a e0       	ldi	r17, 0x0A	; 10
    2c18:	21 e2       	ldi	r18, 0x21	; 33
    2c1a:	e2 2e       	mov	r14, r18
    2c1c:	f1 2c       	mov	r15, r1
    2c1e:	ec 0e       	add	r14, r28
    2c20:	fd 1e       	adc	r15, r29
    2c22:	81 2e       	mov	r8, r17
    2c24:	99 24       	eor	r9, r9
    2c26:	aa 24       	eor	r10, r10
    2c28:	bb 24       	eor	r11, r11
    2c2a:	03 c0       	rjmp	.+6      	; 0x2c32 <_ZN5Print11printNumberEmh+0x54>
    2c2c:	02 2f       	mov	r16, r18
    2c2e:	e3 2f       	mov	r30, r19
    2c30:	ca 01       	movw	r24, r20
    2c32:	60 2f       	mov	r22, r16
    2c34:	7e 2f       	mov	r23, r30
    2c36:	a5 01       	movw	r20, r10
    2c38:	94 01       	movw	r18, r8
    2c3a:	0e 94 83 19 	call	0x3306	; 0x3306 <__udivmodsi4>
    2c3e:	12 9f       	mul	r17, r18
    2c40:	80 2d       	mov	r24, r0
    2c42:	11 24       	eor	r1, r1
    2c44:	08 1b       	sub	r16, r24
    2c46:	08 94       	sec
    2c48:	e1 08       	sbc	r14, r1
    2c4a:	f1 08       	sbc	r15, r1
    2c4c:	0a 30       	cpi	r16, 0x0A	; 10
    2c4e:	14 f4       	brge	.+4      	; 0x2c54 <_ZN5Print11printNumberEmh+0x76>
    2c50:	00 5d       	subi	r16, 0xD0	; 208
    2c52:	01 c0       	rjmp	.+2      	; 0x2c56 <_ZN5Print11printNumberEmh+0x78>
    2c54:	09 5c       	subi	r16, 0xC9	; 201
    2c56:	f7 01       	movw	r30, r14
    2c58:	00 83       	st	Z, r16
    2c5a:	21 15       	cp	r18, r1
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	41 05       	cpc	r20, r1
    2c60:	51 05       	cpc	r21, r1
    2c62:	21 f7       	brne	.-56     	; 0x2c2c <_ZN5Print11printNumberEmh+0x4e>
    2c64:	c6 01       	movw	r24, r12
    2c66:	b7 01       	movw	r22, r14
    2c68:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <_ZN5Print5writeEPKc>
    2c6c:	a1 96       	adiw	r28, 0x21	; 33
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	1f 91       	pop	r17
    2c7e:	0f 91       	pop	r16
    2c80:	ff 90       	pop	r15
    2c82:	ef 90       	pop	r14
    2c84:	df 90       	pop	r13
    2c86:	cf 90       	pop	r12
    2c88:	bf 90       	pop	r11
    2c8a:	af 90       	pop	r10
    2c8c:	9f 90       	pop	r9
    2c8e:	8f 90       	pop	r8
    2c90:	08 95       	ret

00002c92 <_ZN5Print5printEmi>:
    2c92:	21 15       	cp	r18, r1
    2c94:	31 05       	cpc	r19, r1
    2c96:	49 f4       	brne	.+18     	; 0x2caa <_ZN5Print5printEmi+0x18>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	ed 91       	ld	r30, X+
    2c9c:	fc 91       	ld	r31, X
    2c9e:	01 90       	ld	r0, Z+
    2ca0:	f0 81       	ld	r31, Z
    2ca2:	e0 2d       	mov	r30, r0
    2ca4:	64 2f       	mov	r22, r20
    2ca6:	09 95       	icall
    2ca8:	08 95       	ret
    2caa:	0e 94 ef 15 	call	0x2bde	; 0x2bde <_ZN5Print11printNumberEmh>
    2cae:	08 95       	ret

00002cb0 <_ZN5Print5printEhi>:
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    2cb0:	9a 01       	movw	r18, r20
    size_t println(void);
    2cb2:	46 2f       	mov	r20, r22
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	0e 94 49 16 	call	0x2c92	; 0x2c92 <_ZN5Print5printEmi>
};
    2cbe:	08 95       	ret

00002cc0 <_ZN5Print5printEli>:
    2cc0:	cf 92       	push	r12
    2cc2:	df 92       	push	r13
    2cc4:	ef 92       	push	r14
    2cc6:	ff 92       	push	r15
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	ec 01       	movw	r28, r24
    2cd2:	7a 01       	movw	r14, r20
    2cd4:	8b 01       	movw	r16, r22
    2cd6:	21 15       	cp	r18, r1
    2cd8:	31 05       	cpc	r19, r1
    2cda:	41 f4       	brne	.+16     	; 0x2cec <_ZN5Print5printEli+0x2c>
    2cdc:	e8 81       	ld	r30, Y
    2cde:	f9 81       	ldd	r31, Y+1	; 0x01
    2ce0:	01 90       	ld	r0, Z+
    2ce2:	f0 81       	ld	r31, Z
    2ce4:	e0 2d       	mov	r30, r0
    2ce6:	64 2f       	mov	r22, r20
    2ce8:	09 95       	icall
    2cea:	1a c0       	rjmp	.+52     	; 0x2d20 <_ZN5Print5printEli+0x60>
    2cec:	2a 30       	cpi	r18, 0x0A	; 10
    2cee:	31 05       	cpc	r19, r1
    2cf0:	a9 f4       	brne	.+42     	; 0x2d1c <_ZN5Print5printEli+0x5c>
    2cf2:	77 ff       	sbrs	r23, 7
    2cf4:	12 c0       	rjmp	.+36     	; 0x2d1a <_ZN5Print5printEli+0x5a>
    2cf6:	6d e2       	ldi	r22, 0x2D	; 45
    2cf8:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN5Print5printEc>
    2cfc:	6c 01       	movw	r12, r24
    2cfe:	44 27       	eor	r20, r20
    2d00:	55 27       	eor	r21, r21
    2d02:	ba 01       	movw	r22, r20
    2d04:	4e 19       	sub	r20, r14
    2d06:	5f 09       	sbc	r21, r15
    2d08:	60 0b       	sbc	r22, r16
    2d0a:	71 0b       	sbc	r23, r17
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	2a e0       	ldi	r18, 0x0A	; 10
    2d10:	0e 94 ef 15 	call	0x2bde	; 0x2bde <_ZN5Print11printNumberEmh>
    2d14:	c8 0e       	add	r12, r24
    2d16:	d9 1e       	adc	r13, r25
    2d18:	04 c0       	rjmp	.+8      	; 0x2d22 <_ZN5Print5printEli+0x62>
    2d1a:	2a e0       	ldi	r18, 0x0A	; 10
    2d1c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <_ZN5Print11printNumberEmh>
    2d20:	6c 01       	movw	r12, r24
    2d22:	c6 01       	movw	r24, r12
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	df 90       	pop	r13
    2d32:	cf 90       	pop	r12
    2d34:	08 95       	ret

00002d36 <_ZN5Print5printEii>:
    size_t println(const Printable&);
    size_t println(void);
};

#endif
    2d36:	9a 01       	movw	r18, r20
    2d38:	fb 01       	movw	r30, r22
    2d3a:	af 01       	movw	r20, r30
    2d3c:	66 27       	eor	r22, r22
    2d3e:	57 fd       	sbrc	r21, 7
    2d40:	60 95       	com	r22
    2d42:	76 2f       	mov	r23, r22
    2d44:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <_ZN5Print5printEli>
    2d48:	08 95       	ret

00002d4a <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	29 f0       	breq	.+10     	; 0x2d58 <_Z10randomSeedj+0xe>
    srandom(seed);
    2d4e:	bc 01       	movw	r22, r24
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <srandom>
    2d58:	08 95       	ret

00002d5a <_Z6randoml>:
  }
}

long random(long howbig)
{
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	7b 01       	movw	r14, r22
    2d64:	8c 01       	movw	r16, r24
  if (howbig == 0) {
    2d66:	61 15       	cp	r22, r1
    2d68:	71 05       	cpc	r23, r1
    2d6a:	81 05       	cpc	r24, r1
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	49 f0       	breq	.+18     	; 0x2d82 <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
    2d70:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <random>
    2d74:	a8 01       	movw	r20, r16
    2d76:	97 01       	movw	r18, r14
    2d78:	0e 94 a5 19 	call	0x334a	; 0x334a <__divmodsi4>
    2d7c:	9b 01       	movw	r18, r22
    2d7e:	ac 01       	movw	r20, r24
    2d80:	03 c0       	rjmp	.+6      	; 0x2d88 <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
    2d88:	b9 01       	movw	r22, r18
    2d8a:	ca 01       	movw	r24, r20
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	08 95       	ret

00002d96 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    2d96:	ef 92       	push	r14
    2d98:	ff 92       	push	r15
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
    2d9e:	7b 01       	movw	r14, r22
    2da0:	8c 01       	movw	r16, r24
  if (howsmall >= howbig) {
    2da2:	62 17       	cp	r22, r18
    2da4:	73 07       	cpc	r23, r19
    2da6:	84 07       	cpc	r24, r20
    2da8:	95 07       	cpc	r25, r21
    2daa:	64 f4       	brge	.+24     	; 0x2dc4 <_Z6randomll+0x2e>
    return howsmall;
  }
  long diff = howbig - howsmall;
    2dac:	ca 01       	movw	r24, r20
    2dae:	b9 01       	movw	r22, r18
    2db0:	6e 19       	sub	r22, r14
    2db2:	7f 09       	sbc	r23, r15
    2db4:	80 0b       	sbc	r24, r16
    2db6:	91 0b       	sbc	r25, r17
  return random(diff) + howsmall;
    2db8:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_Z6randoml>
    2dbc:	e6 0e       	add	r14, r22
    2dbe:	f7 1e       	adc	r15, r23
    2dc0:	08 1f       	adc	r16, r24
    2dc2:	19 1f       	adc	r17, r25
}
    2dc4:	b7 01       	movw	r22, r14
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	08 95       	ret

00002dd2 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <free>
}
    2ddc:	08 95       	ret

00002dde <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2de4:	88 81       	ld	r24, Y
    2de6:	99 81       	ldd	r25, Y+1	; 0x01
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	11 f0       	breq	.+4      	; 0x2df0 <_ZN6String10invalidateEv+0x12>
    2dec:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <free>
	buffer = NULL;
    2df0:	19 82       	std	Y+1, r1	; 0x01
    2df2:	18 82       	st	Y, r1
	capacity = len = 0;
    2df4:	1d 82       	std	Y+5, r1	; 0x05
    2df6:	1c 82       	std	Y+4, r1	; 0x04
    2df8:	1b 82       	std	Y+3, r1	; 0x03
    2dfa:	1a 82       	std	Y+2, r1	; 0x02
}
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	08 95       	ret

00002e02 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	ec 01       	movw	r28, r24
    2e0c:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2e0e:	6f 5f       	subi	r22, 0xFF	; 255
    2e10:	7f 4f       	sbci	r23, 0xFF	; 255
    2e12:	88 81       	ld	r24, Y
    2e14:	99 81       	ldd	r25, Y+1	; 0x01
    2e16:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <realloc>
	if (newbuffer) {
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	31 f0       	breq	.+12     	; 0x2e2a <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2e1e:	99 83       	std	Y+1, r25	; 0x01
    2e20:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2e22:	1b 83       	std	Y+3, r17	; 0x03
    2e24:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	01 c0       	rjmp	.+2      	; 0x2e2c <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
}
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	1f 91       	pop	r17
    2e32:	0f 91       	pop	r16
    2e34:	08 95       	ret

00002e36 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2e3c:	88 81       	ld	r24, Y
    2e3e:	99 81       	ldd	r25, Y+1	; 0x01
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	29 f0       	breq	.+10     	; 0x2e4e <_ZN6String7reserveEj+0x18>
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	9b 81       	ldd	r25, Y+3	; 0x03
    2e48:	86 17       	cp	r24, r22
    2e4a:	97 07       	cpc	r25, r23
    2e4c:	78 f4       	brcc	.+30     	; 0x2e6c <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    2e4e:	ce 01       	movw	r24, r28
    2e50:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN6String12changeBufferEj>
    2e54:	88 23       	and	r24, r24
    2e56:	41 f0       	breq	.+16     	; 0x2e68 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    2e58:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	31 f4       	brne	.+12     	; 0x2e6c <_ZN6String7reserveEj+0x36>
    2e60:	e8 81       	ld	r30, Y
    2e62:	f9 81       	ldd	r31, Y+1	; 0x01
    2e64:	10 82       	st	Z, r1
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	01 c0       	rjmp	.+2      	; 0x2e6e <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	08 95       	ret

00002e74 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2e74:	ef 92       	push	r14
    2e76:	ff 92       	push	r15
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	ec 01       	movw	r28, r24
    2e82:	7b 01       	movw	r14, r22
    2e84:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2e86:	ba 01       	movw	r22, r20
    2e88:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_ZN6String7reserveEj>
    2e8c:	88 23       	and	r24, r24
    2e8e:	21 f4       	brne	.+8      	; 0x2e98 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2e90:	ce 01       	movw	r24, r28
    2e92:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN6String10invalidateEv>
		return *this;
    2e96:	07 c0       	rjmp	.+14     	; 0x2ea6 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    2e98:	1d 83       	std	Y+5, r17	; 0x05
    2e9a:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2e9c:	88 81       	ld	r24, Y
    2e9e:	99 81       	ldd	r25, Y+1	; 0x01
    2ea0:	b7 01       	movw	r22, r14
    2ea2:	0e 94 43 1c 	call	0x3886	; 0x3886 <strcpy>
	return *this;
}
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	ff 90       	pop	r15
    2eb2:	ef 90       	pop	r14
    2eb4:	08 95       	ret

00002eb6 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2ebc:	11 82       	std	Z+1, r1	; 0x01
    2ebe:	10 82       	st	Z, r1
	capacity = 0;
    2ec0:	13 82       	std	Z+3, r1	; 0x03
    2ec2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2ec4:	15 82       	std	Z+5, r1	; 0x05
    2ec6:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2ec8:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2eca:	61 15       	cp	r22, r1
    2ecc:	71 05       	cpc	r23, r1
    2ece:	59 f0       	breq	.+22     	; 0x2ee6 <_ZN6StringC1EPKc+0x30>
    2ed0:	eb 01       	movw	r28, r22
    2ed2:	09 90       	ld	r0, Y+
    2ed4:	00 20       	and	r0, r0
    2ed6:	e9 f7       	brne	.-6      	; 0x2ed2 <_ZN6StringC1EPKc+0x1c>
    2ed8:	ae 01       	movw	r20, r28
    2eda:	41 50       	subi	r20, 0x01	; 1
    2edc:	50 40       	sbci	r21, 0x00	; 0
    2ede:	46 1b       	sub	r20, r22
    2ee0:	57 0b       	sbc	r21, r23
    2ee2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String4copyEPKcj>
}
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	08 95       	ret

00002eec <main>:
#include <Arduino.h>

int main(void)
{
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
	init();
    2ef0:	0e 94 2f 18 	call	0x305e	; 0x305e <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    2ef4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2ef8:	ce ee       	ldi	r28, 0xEE	; 238
    2efa:	d3 e1       	ldi	r29, 0x13	; 19
#endif
	
	setup();
    
	for (;;) {
		loop();
    2efc:	0e 94 8a 11 	call	0x2314	; 0x2314 <loop>
		if (serialEventRun) serialEventRun();
    2f00:	20 97       	sbiw	r28, 0x00	; 0
    2f02:	e1 f3       	breq	.-8      	; 0x2efc <main+0x10>
    2f04:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_Z14serialEventRunv>
    2f08:	f9 cf       	rjmp	.-14     	; 0x2efc <main+0x10>

00002f0a <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    2f0a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <malloc>
}
    2f0e:	08 95       	ret

00002f10 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    2f10:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <free>
} 
    2f14:	08 95       	ret

00002f16 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
    2f16:	08 95       	ret

00002f18 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2f18:	1f 92       	push	r1
    2f1a:	0f 92       	push	r0
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	0f 92       	push	r0
    2f20:	11 24       	eor	r1, r1
    2f22:	2f 93       	push	r18
    2f24:	3f 93       	push	r19
    2f26:	8f 93       	push	r24
    2f28:	9f 93       	push	r25
    2f2a:	af 93       	push	r26
    2f2c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2f2e:	80 91 46 03 	lds	r24, 0x0346
    2f32:	90 91 47 03 	lds	r25, 0x0347
    2f36:	a0 91 48 03 	lds	r26, 0x0348
    2f3a:	b0 91 49 03 	lds	r27, 0x0349
	unsigned char f = timer0_fract;
    2f3e:	30 91 4a 03 	lds	r19, 0x034A

	m += MILLIS_INC;
    2f42:	01 96       	adiw	r24, 0x01	; 1
    2f44:	a1 1d       	adc	r26, r1
    2f46:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2f48:	23 2f       	mov	r18, r19
    2f4a:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2f4c:	2d 37       	cpi	r18, 0x7D	; 125
    2f4e:	20 f0       	brcs	.+8      	; 0x2f58 <__vector_16+0x40>
		f -= FRACT_MAX;
    2f50:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2f52:	01 96       	adiw	r24, 0x01	; 1
    2f54:	a1 1d       	adc	r26, r1
    2f56:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2f58:	20 93 4a 03 	sts	0x034A, r18
	timer0_millis = m;
    2f5c:	80 93 46 03 	sts	0x0346, r24
    2f60:	90 93 47 03 	sts	0x0347, r25
    2f64:	a0 93 48 03 	sts	0x0348, r26
    2f68:	b0 93 49 03 	sts	0x0349, r27
	timer0_overflow_count++;
    2f6c:	80 91 42 03 	lds	r24, 0x0342
    2f70:	90 91 43 03 	lds	r25, 0x0343
    2f74:	a0 91 44 03 	lds	r26, 0x0344
    2f78:	b0 91 45 03 	lds	r27, 0x0345
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	a1 1d       	adc	r26, r1
    2f80:	b1 1d       	adc	r27, r1
    2f82:	80 93 42 03 	sts	0x0342, r24
    2f86:	90 93 43 03 	sts	0x0343, r25
    2f8a:	a0 93 44 03 	sts	0x0344, r26
    2f8e:	b0 93 45 03 	sts	0x0345, r27
}
    2f92:	bf 91       	pop	r27
    2f94:	af 91       	pop	r26
    2f96:	9f 91       	pop	r25
    2f98:	8f 91       	pop	r24
    2f9a:	3f 91       	pop	r19
    2f9c:	2f 91       	pop	r18
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f 90       	pop	r0
    2fa4:	1f 90       	pop	r1
    2fa6:	18 95       	reti

00002fa8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2fa8:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2faa:	f8 94       	cli
	m = timer0_millis;
    2fac:	20 91 46 03 	lds	r18, 0x0346
    2fb0:	30 91 47 03 	lds	r19, 0x0347
    2fb4:	40 91 48 03 	lds	r20, 0x0348
    2fb8:	50 91 49 03 	lds	r21, 0x0349
	SREG = oldSREG;
    2fbc:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2fbe:	b9 01       	movw	r22, r18
    2fc0:	ca 01       	movw	r24, r20
    2fc2:	08 95       	ret

00002fc4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2fc4:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2fc6:	f8 94       	cli
	m = timer0_overflow_count;
    2fc8:	20 91 42 03 	lds	r18, 0x0342
    2fcc:	30 91 43 03 	lds	r19, 0x0343
    2fd0:	40 91 44 03 	lds	r20, 0x0344
    2fd4:	50 91 45 03 	lds	r21, 0x0345
#if defined(TCNT0)
	t = TCNT0;
    2fd8:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2fda:	a8 9b       	sbis	0x15, 0	; 21
    2fdc:	06 c0       	rjmp	.+12     	; 0x2fea <micros+0x26>
    2fde:	8f 3f       	cpi	r24, 0xFF	; 255
    2fe0:	21 f0       	breq	.+8      	; 0x2fea <micros+0x26>
		m++;
    2fe2:	2f 5f       	subi	r18, 0xFF	; 255
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fe8:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2fea:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2fec:	54 2f       	mov	r21, r20
    2fee:	43 2f       	mov	r20, r19
    2ff0:	32 2f       	mov	r19, r18
    2ff2:	22 27       	eor	r18, r18
    2ff4:	28 0f       	add	r18, r24
    2ff6:	31 1d       	adc	r19, r1
    2ff8:	41 1d       	adc	r20, r1
    2ffa:	51 1d       	adc	r21, r1
    2ffc:	82 e0       	ldi	r24, 0x02	; 2
    2ffe:	22 0f       	add	r18, r18
    3000:	33 1f       	adc	r19, r19
    3002:	44 1f       	adc	r20, r20
    3004:	55 1f       	adc	r21, r21
    3006:	8a 95       	dec	r24
    3008:	d1 f7       	brne	.-12     	; 0x2ffe <micros+0x3a>
}
    300a:	b9 01       	movw	r22, r18
    300c:	ca 01       	movw	r24, r20
    300e:	08 95       	ret

00003010 <delay>:

void delay(unsigned long ms)
{
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	7b 01       	movw	r14, r22
    301e:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    3020:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <micros>
    3024:	eb 01       	movw	r28, r22

	while (ms > 0) {
    3026:	0f c0       	rjmp	.+30     	; 0x3046 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    3028:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <micros>
    302c:	6c 1b       	sub	r22, r28
    302e:	7d 0b       	sbc	r23, r29
    3030:	83 e0       	ldi	r24, 0x03	; 3
    3032:	68 3e       	cpi	r22, 0xE8	; 232
    3034:	78 07       	cpc	r23, r24
    3036:	38 f0       	brcs	.+14     	; 0x3046 <delay+0x36>
			ms--;
    3038:	08 94       	sec
    303a:	e1 08       	sbc	r14, r1
    303c:	f1 08       	sbc	r15, r1
    303e:	01 09       	sbc	r16, r1
    3040:	11 09       	sbc	r17, r1
			start += 1000;
    3042:	c8 51       	subi	r28, 0x18	; 24
    3044:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    3046:	e1 14       	cp	r14, r1
    3048:	f1 04       	cpc	r15, r1
    304a:	01 05       	cpc	r16, r1
    304c:	11 05       	cpc	r17, r1
    304e:	61 f7       	brne	.-40     	; 0x3028 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	ff 90       	pop	r15
    305a:	ef 90       	pop	r14
    305c:	08 95       	ret

0000305e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    305e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3060:	84 b5       	in	r24, 0x24	; 36
    3062:	82 60       	ori	r24, 0x02	; 2
    3064:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3066:	84 b5       	in	r24, 0x24	; 36
    3068:	81 60       	ori	r24, 0x01	; 1
    306a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    306c:	85 b5       	in	r24, 0x25	; 37
    306e:	82 60       	ori	r24, 0x02	; 2
    3070:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3072:	85 b5       	in	r24, 0x25	; 37
    3074:	81 60       	ori	r24, 0x01	; 1
    3076:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3078:	ee e6       	ldi	r30, 0x6E	; 110
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	81 60       	ori	r24, 0x01	; 1
    3080:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3082:	e1 e8       	ldi	r30, 0x81	; 129
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3088:	80 81       	ld	r24, Z
    308a:	82 60       	ori	r24, 0x02	; 2
    308c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    308e:	80 81       	ld	r24, Z
    3090:	81 60       	ori	r24, 0x01	; 1
    3092:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3094:	e0 e8       	ldi	r30, 0x80	; 128
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	81 60       	ori	r24, 0x01	; 1
    309c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    309e:	e1 eb       	ldi	r30, 0xB1	; 177
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	84 60       	ori	r24, 0x04	; 4
    30a6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    30a8:	e0 eb       	ldi	r30, 0xB0	; 176
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	81 60       	ori	r24, 0x01	; 1
    30b0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    30b2:	ea e7       	ldi	r30, 0x7A	; 122
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	84 60       	ori	r24, 0x04	; 4
    30ba:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    30bc:	80 81       	ld	r24, Z
    30be:	82 60       	ori	r24, 0x02	; 2
    30c0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    30c2:	80 81       	ld	r24, Z
    30c4:	81 60       	ori	r24, 0x01	; 1
    30c6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    30c8:	80 81       	ld	r24, Z
    30ca:	80 68       	ori	r24, 0x80	; 128
    30cc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    30ce:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    30d2:	08 95       	ret

000030d4 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    30d4:	8e 30       	cpi	r24, 0x0E	; 14
    30d6:	08 f0       	brcs	.+2      	; 0x30da <analogRead+0x6>
    30d8:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    30da:	87 70       	andi	r24, 0x07	; 7
    30dc:	90 91 ae 01 	lds	r25, 0x01AE
    30e0:	92 95       	swap	r25
    30e2:	99 0f       	add	r25, r25
    30e4:	99 0f       	add	r25, r25
    30e6:	90 7c       	andi	r25, 0xC0	; 192
    30e8:	98 2b       	or	r25, r24
    30ea:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    30ee:	80 91 7a 00 	lds	r24, 0x007A
    30f2:	80 64       	ori	r24, 0x40	; 64
    30f4:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    30f8:	80 91 7a 00 	lds	r24, 0x007A
    30fc:	86 fd       	sbrc	r24, 6
    30fe:	fc cf       	rjmp	.-8      	; 0x30f8 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3100:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    3104:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3108:	93 2f       	mov	r25, r19
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	28 2b       	or	r18, r24
    3110:	39 2b       	or	r19, r25
}
    3112:	c9 01       	movw	r24, r18
    3114:	08 95       	ret

00003116 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3116:	83 30       	cpi	r24, 0x03	; 3
    3118:	71 f0       	breq	.+28     	; 0x3136 <turnOffPWM+0x20>
    311a:	84 30       	cpi	r24, 0x04	; 4
    311c:	28 f4       	brcc	.+10     	; 0x3128 <turnOffPWM+0x12>
    311e:	81 30       	cpi	r24, 0x01	; 1
    3120:	a1 f0       	breq	.+40     	; 0x314a <turnOffPWM+0x34>
    3122:	82 30       	cpi	r24, 0x02	; 2
    3124:	21 f5       	brne	.+72     	; 0x316e <turnOffPWM+0x58>
    3126:	14 c0       	rjmp	.+40     	; 0x3150 <turnOffPWM+0x3a>
    3128:	86 30       	cpi	r24, 0x06	; 6
    312a:	b1 f0       	breq	.+44     	; 0x3158 <turnOffPWM+0x42>
    312c:	87 30       	cpi	r24, 0x07	; 7
    312e:	d1 f0       	breq	.+52     	; 0x3164 <turnOffPWM+0x4e>
    3130:	84 30       	cpi	r24, 0x04	; 4
    3132:	e9 f4       	brne	.+58     	; 0x316e <turnOffPWM+0x58>
    3134:	04 c0       	rjmp	.+8      	; 0x313e <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3136:	80 91 80 00 	lds	r24, 0x0080
    313a:	8f 77       	andi	r24, 0x7F	; 127
    313c:	03 c0       	rjmp	.+6      	; 0x3144 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    313e:	80 91 80 00 	lds	r24, 0x0080
    3142:	8f 7d       	andi	r24, 0xDF	; 223
    3144:	80 93 80 00 	sts	0x0080, r24
    3148:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    314a:	84 b5       	in	r24, 0x24	; 36
    314c:	8f 77       	andi	r24, 0x7F	; 127
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3150:	84 b5       	in	r24, 0x24	; 36
    3152:	8f 7d       	andi	r24, 0xDF	; 223
    3154:	84 bd       	out	0x24, r24	; 36
    3156:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3158:	80 91 b0 00 	lds	r24, 0x00B0
    315c:	8f 77       	andi	r24, 0x7F	; 127
    315e:	80 93 b0 00 	sts	0x00B0, r24
    3162:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3164:	80 91 b0 00 	lds	r24, 0x00B0
    3168:	8f 7d       	andi	r24, 0xDF	; 223
    316a:	80 93 b0 00 	sts	0x00B0, r24
    316e:	08 95       	ret

00003170 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	fc 01       	movw	r30, r24
    3174:	e6 56       	subi	r30, 0x66	; 102
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    317a:	fc 01       	movw	r30, r24
    317c:	ea 57       	subi	r30, 0x7A	; 122
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    3182:	ee 23       	and	r30, r30
    3184:	c1 f0       	breq	.+48     	; 0x31b6 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	ee 0f       	add	r30, r30
    318a:	ff 1f       	adc	r31, r31
    318c:	e8 59       	subi	r30, 0x98	; 152
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	85 91       	lpm	r24, Z+
    3192:	94 91       	lpm	r25, Z+
    3194:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    3196:	66 23       	and	r22, r22
    3198:	41 f4       	brne	.+16     	; 0x31aa <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    319a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    319c:	f8 94       	cli
		*reg &= ~bit;
    319e:	8c 91       	ld	r24, X
    31a0:	20 95       	com	r18
    31a2:	82 23       	and	r24, r18
    31a4:	8c 93       	st	X, r24
		SREG = oldSREG;
    31a6:	9f bf       	out	0x3f, r25	; 63
    31a8:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    31aa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    31ac:	f8 94       	cli
		*reg |= bit;
    31ae:	8c 91       	ld	r24, X
    31b0:	82 2b       	or	r24, r18
    31b2:	8c 93       	st	X, r24
		SREG = oldSREG;
    31b4:	9f bf       	out	0x3f, r25	; 63
    31b6:	08 95       	ret

000031b8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	0f 92       	push	r0
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	f9 01       	movw	r30, r18
    31cc:	e2 55       	subi	r30, 0x52	; 82
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    31d2:	f9 01       	movw	r30, r18
    31d4:	e6 56       	subi	r30, 0x66	; 102
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    31da:	2a 57       	subi	r18, 0x7A	; 122
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	f9 01       	movw	r30, r18
    31e0:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    31e2:	00 23       	and	r16, r16
    31e4:	d9 f0       	breq	.+54     	; 0x321c <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    31e6:	88 23       	and	r24, r24
    31e8:	21 f0       	breq	.+8      	; 0x31f2 <digitalWrite+0x3a>
    31ea:	69 83       	std	Y+1, r22	; 0x01
    31ec:	0e 94 8b 18 	call	0x3116	; 0x3116 <turnOffPWM>
    31f0:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    31f2:	e0 2f       	mov	r30, r16
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	ee 0f       	add	r30, r30
    31f8:	ff 1f       	adc	r31, r31
    31fa:	ee 58       	subi	r30, 0x8E	; 142
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	85 91       	lpm	r24, Z+
    3200:	94 91       	lpm	r25, Z+
    3202:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    3204:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3206:	f8 94       	cli

	if (val == LOW) {
    3208:	66 23       	and	r22, r22
    320a:	21 f4       	brne	.+8      	; 0x3214 <digitalWrite+0x5c>
		*out &= ~bit;
    320c:	8c 91       	ld	r24, X
    320e:	10 95       	com	r17
    3210:	81 23       	and	r24, r17
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <digitalWrite+0x60>
	} else {
		*out |= bit;
    3214:	8c 91       	ld	r24, X
    3216:	81 2b       	or	r24, r17
    3218:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    321a:	9f bf       	out	0x3f, r25	; 63
}
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	08 95       	ret

00003228 <__floatunsisf>:
    3228:	e8 94       	clt
    322a:	09 c0       	rjmp	.+18     	; 0x323e <__floatsisf+0x12>

0000322c <__floatsisf>:
    322c:	97 fb       	bst	r25, 7
    322e:	3e f4       	brtc	.+14     	; 0x323e <__floatsisf+0x12>
    3230:	90 95       	com	r25
    3232:	80 95       	com	r24
    3234:	70 95       	com	r23
    3236:	61 95       	neg	r22
    3238:	7f 4f       	sbci	r23, 0xFF	; 255
    323a:	8f 4f       	sbci	r24, 0xFF	; 255
    323c:	9f 4f       	sbci	r25, 0xFF	; 255
    323e:	99 23       	and	r25, r25
    3240:	a9 f0       	breq	.+42     	; 0x326c <__floatsisf+0x40>
    3242:	f9 2f       	mov	r31, r25
    3244:	96 e9       	ldi	r25, 0x96	; 150
    3246:	bb 27       	eor	r27, r27
    3248:	93 95       	inc	r25
    324a:	f6 95       	lsr	r31
    324c:	87 95       	ror	r24
    324e:	77 95       	ror	r23
    3250:	67 95       	ror	r22
    3252:	b7 95       	ror	r27
    3254:	f1 11       	cpse	r31, r1
    3256:	f8 cf       	rjmp	.-16     	; 0x3248 <__floatsisf+0x1c>
    3258:	fa f4       	brpl	.+62     	; 0x3298 <__floatsisf+0x6c>
    325a:	bb 0f       	add	r27, r27
    325c:	11 f4       	brne	.+4      	; 0x3262 <__floatsisf+0x36>
    325e:	60 ff       	sbrs	r22, 0
    3260:	1b c0       	rjmp	.+54     	; 0x3298 <__floatsisf+0x6c>
    3262:	6f 5f       	subi	r22, 0xFF	; 255
    3264:	7f 4f       	sbci	r23, 0xFF	; 255
    3266:	8f 4f       	sbci	r24, 0xFF	; 255
    3268:	9f 4f       	sbci	r25, 0xFF	; 255
    326a:	16 c0       	rjmp	.+44     	; 0x3298 <__floatsisf+0x6c>
    326c:	88 23       	and	r24, r24
    326e:	11 f0       	breq	.+4      	; 0x3274 <__floatsisf+0x48>
    3270:	96 e9       	ldi	r25, 0x96	; 150
    3272:	11 c0       	rjmp	.+34     	; 0x3296 <__floatsisf+0x6a>
    3274:	77 23       	and	r23, r23
    3276:	21 f0       	breq	.+8      	; 0x3280 <__floatsisf+0x54>
    3278:	9e e8       	ldi	r25, 0x8E	; 142
    327a:	87 2f       	mov	r24, r23
    327c:	76 2f       	mov	r23, r22
    327e:	05 c0       	rjmp	.+10     	; 0x328a <__floatsisf+0x5e>
    3280:	66 23       	and	r22, r22
    3282:	71 f0       	breq	.+28     	; 0x32a0 <__floatsisf+0x74>
    3284:	96 e8       	ldi	r25, 0x86	; 134
    3286:	86 2f       	mov	r24, r22
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	2a f0       	brmi	.+10     	; 0x3298 <__floatsisf+0x6c>
    328e:	9a 95       	dec	r25
    3290:	66 0f       	add	r22, r22
    3292:	77 1f       	adc	r23, r23
    3294:	88 1f       	adc	r24, r24
    3296:	da f7       	brpl	.-10     	; 0x328e <__floatsisf+0x62>
    3298:	88 0f       	add	r24, r24
    329a:	96 95       	lsr	r25
    329c:	87 95       	ror	r24
    329e:	97 f9       	bld	r25, 7
    32a0:	08 95       	ret

000032a2 <__mulsi3>:
    32a2:	62 9f       	mul	r22, r18
    32a4:	d0 01       	movw	r26, r0
    32a6:	73 9f       	mul	r23, r19
    32a8:	f0 01       	movw	r30, r0
    32aa:	82 9f       	mul	r24, r18
    32ac:	e0 0d       	add	r30, r0
    32ae:	f1 1d       	adc	r31, r1
    32b0:	64 9f       	mul	r22, r20
    32b2:	e0 0d       	add	r30, r0
    32b4:	f1 1d       	adc	r31, r1
    32b6:	92 9f       	mul	r25, r18
    32b8:	f0 0d       	add	r31, r0
    32ba:	83 9f       	mul	r24, r19
    32bc:	f0 0d       	add	r31, r0
    32be:	74 9f       	mul	r23, r20
    32c0:	f0 0d       	add	r31, r0
    32c2:	65 9f       	mul	r22, r21
    32c4:	f0 0d       	add	r31, r0
    32c6:	99 27       	eor	r25, r25
    32c8:	72 9f       	mul	r23, r18
    32ca:	b0 0d       	add	r27, r0
    32cc:	e1 1d       	adc	r30, r1
    32ce:	f9 1f       	adc	r31, r25
    32d0:	63 9f       	mul	r22, r19
    32d2:	b0 0d       	add	r27, r0
    32d4:	e1 1d       	adc	r30, r1
    32d6:	f9 1f       	adc	r31, r25
    32d8:	bd 01       	movw	r22, r26
    32da:	cf 01       	movw	r24, r30
    32dc:	11 24       	eor	r1, r1
    32de:	08 95       	ret

000032e0 <__divmodhi4>:
    32e0:	97 fb       	bst	r25, 7
    32e2:	09 2e       	mov	r0, r25
    32e4:	07 26       	eor	r0, r23
    32e6:	0a d0       	rcall	.+20     	; 0x32fc <__divmodhi4_neg1>
    32e8:	77 fd       	sbrc	r23, 7
    32ea:	04 d0       	rcall	.+8      	; 0x32f4 <__divmodhi4_neg2>
    32ec:	49 d0       	rcall	.+146    	; 0x3380 <__udivmodhi4>
    32ee:	06 d0       	rcall	.+12     	; 0x32fc <__divmodhi4_neg1>
    32f0:	00 20       	and	r0, r0
    32f2:	1a f4       	brpl	.+6      	; 0x32fa <__divmodhi4_exit>

000032f4 <__divmodhi4_neg2>:
    32f4:	70 95       	com	r23
    32f6:	61 95       	neg	r22
    32f8:	7f 4f       	sbci	r23, 0xFF	; 255

000032fa <__divmodhi4_exit>:
    32fa:	08 95       	ret

000032fc <__divmodhi4_neg1>:
    32fc:	f6 f7       	brtc	.-4      	; 0x32fa <__divmodhi4_exit>
    32fe:	90 95       	com	r25
    3300:	81 95       	neg	r24
    3302:	9f 4f       	sbci	r25, 0xFF	; 255
    3304:	08 95       	ret

00003306 <__udivmodsi4>:
    3306:	a1 e2       	ldi	r26, 0x21	; 33
    3308:	1a 2e       	mov	r1, r26
    330a:	aa 1b       	sub	r26, r26
    330c:	bb 1b       	sub	r27, r27
    330e:	fd 01       	movw	r30, r26
    3310:	0d c0       	rjmp	.+26     	; 0x332c <__udivmodsi4_ep>

00003312 <__udivmodsi4_loop>:
    3312:	aa 1f       	adc	r26, r26
    3314:	bb 1f       	adc	r27, r27
    3316:	ee 1f       	adc	r30, r30
    3318:	ff 1f       	adc	r31, r31
    331a:	a2 17       	cp	r26, r18
    331c:	b3 07       	cpc	r27, r19
    331e:	e4 07       	cpc	r30, r20
    3320:	f5 07       	cpc	r31, r21
    3322:	20 f0       	brcs	.+8      	; 0x332c <__udivmodsi4_ep>
    3324:	a2 1b       	sub	r26, r18
    3326:	b3 0b       	sbc	r27, r19
    3328:	e4 0b       	sbc	r30, r20
    332a:	f5 0b       	sbc	r31, r21

0000332c <__udivmodsi4_ep>:
    332c:	66 1f       	adc	r22, r22
    332e:	77 1f       	adc	r23, r23
    3330:	88 1f       	adc	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	1a 94       	dec	r1
    3336:	69 f7       	brne	.-38     	; 0x3312 <__udivmodsi4_loop>
    3338:	60 95       	com	r22
    333a:	70 95       	com	r23
    333c:	80 95       	com	r24
    333e:	90 95       	com	r25
    3340:	9b 01       	movw	r18, r22
    3342:	ac 01       	movw	r20, r24
    3344:	bd 01       	movw	r22, r26
    3346:	cf 01       	movw	r24, r30
    3348:	08 95       	ret

0000334a <__divmodsi4>:
    334a:	97 fb       	bst	r25, 7
    334c:	09 2e       	mov	r0, r25
    334e:	05 26       	eor	r0, r21
    3350:	0e d0       	rcall	.+28     	; 0x336e <__divmodsi4_neg1>
    3352:	57 fd       	sbrc	r21, 7
    3354:	04 d0       	rcall	.+8      	; 0x335e <__divmodsi4_neg2>
    3356:	d7 df       	rcall	.-82     	; 0x3306 <__udivmodsi4>
    3358:	0a d0       	rcall	.+20     	; 0x336e <__divmodsi4_neg1>
    335a:	00 1c       	adc	r0, r0
    335c:	38 f4       	brcc	.+14     	; 0x336c <__divmodsi4_exit>

0000335e <__divmodsi4_neg2>:
    335e:	50 95       	com	r21
    3360:	40 95       	com	r20
    3362:	30 95       	com	r19
    3364:	21 95       	neg	r18
    3366:	3f 4f       	sbci	r19, 0xFF	; 255
    3368:	4f 4f       	sbci	r20, 0xFF	; 255
    336a:	5f 4f       	sbci	r21, 0xFF	; 255

0000336c <__divmodsi4_exit>:
    336c:	08 95       	ret

0000336e <__divmodsi4_neg1>:
    336e:	f6 f7       	brtc	.-4      	; 0x336c <__divmodsi4_exit>
    3370:	90 95       	com	r25
    3372:	80 95       	com	r24
    3374:	70 95       	com	r23
    3376:	61 95       	neg	r22
    3378:	7f 4f       	sbci	r23, 0xFF	; 255
    337a:	8f 4f       	sbci	r24, 0xFF	; 255
    337c:	9f 4f       	sbci	r25, 0xFF	; 255
    337e:	08 95       	ret

00003380 <__udivmodhi4>:
    3380:	aa 1b       	sub	r26, r26
    3382:	bb 1b       	sub	r27, r27
    3384:	51 e1       	ldi	r21, 0x11	; 17
    3386:	07 c0       	rjmp	.+14     	; 0x3396 <__udivmodhi4_ep>

00003388 <__udivmodhi4_loop>:
    3388:	aa 1f       	adc	r26, r26
    338a:	bb 1f       	adc	r27, r27
    338c:	a6 17       	cp	r26, r22
    338e:	b7 07       	cpc	r27, r23
    3390:	10 f0       	brcs	.+4      	; 0x3396 <__udivmodhi4_ep>
    3392:	a6 1b       	sub	r26, r22
    3394:	b7 0b       	sbc	r27, r23

00003396 <__udivmodhi4_ep>:
    3396:	88 1f       	adc	r24, r24
    3398:	99 1f       	adc	r25, r25
    339a:	5a 95       	dec	r21
    339c:	a9 f7       	brne	.-22     	; 0x3388 <__udivmodhi4_loop>
    339e:	80 95       	com	r24
    33a0:	90 95       	com	r25
    33a2:	bc 01       	movw	r22, r24
    33a4:	cd 01       	movw	r24, r26
    33a6:	08 95       	ret

000033a8 <__tablejump2__>:
    33a8:	ee 0f       	add	r30, r30
    33aa:	ff 1f       	adc	r31, r31

000033ac <__tablejump__>:
    33ac:	05 90       	lpm	r0, Z+
    33ae:	f4 91       	lpm	r31, Z+
    33b0:	e0 2d       	mov	r30, r0
    33b2:	09 94       	ijmp

000033b4 <malloc>:
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	82 30       	cpi	r24, 0x02	; 2
    33ba:	91 05       	cpc	r25, r1
    33bc:	10 f4       	brcc	.+4      	; 0x33c2 <malloc+0xe>
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	e0 91 4d 03 	lds	r30, 0x034D
    33c6:	f0 91 4e 03 	lds	r31, 0x034E
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	50 e0       	ldi	r21, 0x00	; 0
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	26 c0       	rjmp	.+76     	; 0x3420 <malloc+0x6c>
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	68 17       	cp	r22, r24
    33da:	79 07       	cpc	r23, r25
    33dc:	e0 f0       	brcs	.+56     	; 0x3416 <malloc+0x62>
    33de:	68 17       	cp	r22, r24
    33e0:	79 07       	cpc	r23, r25
    33e2:	81 f4       	brne	.+32     	; 0x3404 <malloc+0x50>
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	21 15       	cp	r18, r1
    33ea:	31 05       	cpc	r19, r1
    33ec:	31 f0       	breq	.+12     	; 0x33fa <malloc+0x46>
    33ee:	d9 01       	movw	r26, r18
    33f0:	13 96       	adiw	r26, 0x03	; 3
    33f2:	9c 93       	st	X, r25
    33f4:	8e 93       	st	-X, r24
    33f6:	12 97       	sbiw	r26, 0x02	; 2
    33f8:	2b c0       	rjmp	.+86     	; 0x3450 <malloc+0x9c>
    33fa:	90 93 4e 03 	sts	0x034E, r25
    33fe:	80 93 4d 03 	sts	0x034D, r24
    3402:	26 c0       	rjmp	.+76     	; 0x3450 <malloc+0x9c>
    3404:	41 15       	cp	r20, r1
    3406:	51 05       	cpc	r21, r1
    3408:	19 f0       	breq	.+6      	; 0x3410 <malloc+0x5c>
    340a:	64 17       	cp	r22, r20
    340c:	75 07       	cpc	r23, r21
    340e:	18 f4       	brcc	.+6      	; 0x3416 <malloc+0x62>
    3410:	ab 01       	movw	r20, r22
    3412:	e9 01       	movw	r28, r18
    3414:	df 01       	movw	r26, r30
    3416:	9f 01       	movw	r18, r30
    3418:	72 81       	ldd	r23, Z+2	; 0x02
    341a:	63 81       	ldd	r22, Z+3	; 0x03
    341c:	e7 2f       	mov	r30, r23
    341e:	f6 2f       	mov	r31, r22
    3420:	30 97       	sbiw	r30, 0x00	; 0
    3422:	c1 f6       	brne	.-80     	; 0x33d4 <malloc+0x20>
    3424:	41 15       	cp	r20, r1
    3426:	51 05       	cpc	r21, r1
    3428:	01 f1       	breq	.+64     	; 0x346a <malloc+0xb6>
    342a:	48 1b       	sub	r20, r24
    342c:	59 0b       	sbc	r21, r25
    342e:	44 30       	cpi	r20, 0x04	; 4
    3430:	51 05       	cpc	r21, r1
    3432:	80 f4       	brcc	.+32     	; 0x3454 <malloc+0xa0>
    3434:	12 96       	adiw	r26, 0x02	; 2
    3436:	8d 91       	ld	r24, X+
    3438:	9c 91       	ld	r25, X
    343a:	13 97       	sbiw	r26, 0x03	; 3
    343c:	20 97       	sbiw	r28, 0x00	; 0
    343e:	19 f0       	breq	.+6      	; 0x3446 <malloc+0x92>
    3440:	9b 83       	std	Y+3, r25	; 0x03
    3442:	8a 83       	std	Y+2, r24	; 0x02
    3444:	04 c0       	rjmp	.+8      	; 0x344e <malloc+0x9a>
    3446:	90 93 4e 03 	sts	0x034E, r25
    344a:	80 93 4d 03 	sts	0x034D, r24
    344e:	fd 01       	movw	r30, r26
    3450:	32 96       	adiw	r30, 0x02	; 2
    3452:	46 c0       	rjmp	.+140    	; 0x34e0 <malloc+0x12c>
    3454:	fd 01       	movw	r30, r26
    3456:	e4 0f       	add	r30, r20
    3458:	f5 1f       	adc	r31, r21
    345a:	81 93       	st	Z+, r24
    345c:	91 93       	st	Z+, r25
    345e:	42 50       	subi	r20, 0x02	; 2
    3460:	50 40       	sbci	r21, 0x00	; 0
    3462:	11 96       	adiw	r26, 0x01	; 1
    3464:	5c 93       	st	X, r21
    3466:	4e 93       	st	-X, r20
    3468:	3b c0       	rjmp	.+118    	; 0x34e0 <malloc+0x12c>
    346a:	20 91 4b 03 	lds	r18, 0x034B
    346e:	30 91 4c 03 	lds	r19, 0x034C
    3472:	21 15       	cp	r18, r1
    3474:	31 05       	cpc	r19, r1
    3476:	41 f4       	brne	.+16     	; 0x3488 <malloc+0xd4>
    3478:	20 91 a4 01 	lds	r18, 0x01A4
    347c:	30 91 a5 01 	lds	r19, 0x01A5
    3480:	30 93 4c 03 	sts	0x034C, r19
    3484:	20 93 4b 03 	sts	0x034B, r18
    3488:	20 91 a6 01 	lds	r18, 0x01A6
    348c:	30 91 a7 01 	lds	r19, 0x01A7
    3490:	21 15       	cp	r18, r1
    3492:	31 05       	cpc	r19, r1
    3494:	41 f4       	brne	.+16     	; 0x34a6 <malloc+0xf2>
    3496:	2d b7       	in	r18, 0x3d	; 61
    3498:	3e b7       	in	r19, 0x3e	; 62
    349a:	40 91 a2 01 	lds	r20, 0x01A2
    349e:	50 91 a3 01 	lds	r21, 0x01A3
    34a2:	24 1b       	sub	r18, r20
    34a4:	35 0b       	sbc	r19, r21
    34a6:	e0 91 4b 03 	lds	r30, 0x034B
    34aa:	f0 91 4c 03 	lds	r31, 0x034C
    34ae:	e2 17       	cp	r30, r18
    34b0:	f3 07       	cpc	r31, r19
    34b2:	a0 f4       	brcc	.+40     	; 0x34dc <malloc+0x128>
    34b4:	2e 1b       	sub	r18, r30
    34b6:	3f 0b       	sbc	r19, r31
    34b8:	28 17       	cp	r18, r24
    34ba:	39 07       	cpc	r19, r25
    34bc:	78 f0       	brcs	.+30     	; 0x34dc <malloc+0x128>
    34be:	ac 01       	movw	r20, r24
    34c0:	4e 5f       	subi	r20, 0xFE	; 254
    34c2:	5f 4f       	sbci	r21, 0xFF	; 255
    34c4:	24 17       	cp	r18, r20
    34c6:	35 07       	cpc	r19, r21
    34c8:	48 f0       	brcs	.+18     	; 0x34dc <malloc+0x128>
    34ca:	4e 0f       	add	r20, r30
    34cc:	5f 1f       	adc	r21, r31
    34ce:	50 93 4c 03 	sts	0x034C, r21
    34d2:	40 93 4b 03 	sts	0x034B, r20
    34d6:	81 93       	st	Z+, r24
    34d8:	91 93       	st	Z+, r25
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <malloc+0x12c>
    34dc:	e0 e0       	ldi	r30, 0x00	; 0
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	cf 01       	movw	r24, r30
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	08 95       	ret

000034e8 <free>:
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29
    34ec:	00 97       	sbiw	r24, 0x00	; 0
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <free+0xa>
    34f0:	91 c0       	rjmp	.+290    	; 0x3614 <free+0x12c>
    34f2:	fc 01       	movw	r30, r24
    34f4:	32 97       	sbiw	r30, 0x02	; 2
    34f6:	13 82       	std	Z+3, r1	; 0x03
    34f8:	12 82       	std	Z+2, r1	; 0x02
    34fa:	60 91 4d 03 	lds	r22, 0x034D
    34fe:	70 91 4e 03 	lds	r23, 0x034E
    3502:	61 15       	cp	r22, r1
    3504:	71 05       	cpc	r23, r1
    3506:	81 f4       	brne	.+32     	; 0x3528 <free+0x40>
    3508:	20 81       	ld	r18, Z
    350a:	31 81       	ldd	r19, Z+1	; 0x01
    350c:	28 0f       	add	r18, r24
    350e:	39 1f       	adc	r19, r25
    3510:	80 91 4b 03 	lds	r24, 0x034B
    3514:	90 91 4c 03 	lds	r25, 0x034C
    3518:	82 17       	cp	r24, r18
    351a:	93 07       	cpc	r25, r19
    351c:	99 f5       	brne	.+102    	; 0x3584 <free+0x9c>
    351e:	f0 93 4c 03 	sts	0x034C, r31
    3522:	e0 93 4b 03 	sts	0x034B, r30
    3526:	76 c0       	rjmp	.+236    	; 0x3614 <free+0x12c>
    3528:	db 01       	movw	r26, r22
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <free+0x4c>
    3530:	cd 01       	movw	r24, r26
    3532:	d9 01       	movw	r26, r18
    3534:	ae 17       	cp	r26, r30
    3536:	bf 07       	cpc	r27, r31
    3538:	48 f4       	brcc	.+18     	; 0x354c <free+0x64>
    353a:	12 96       	adiw	r26, 0x02	; 2
    353c:	2d 91       	ld	r18, X+
    353e:	3c 91       	ld	r19, X
    3540:	13 97       	sbiw	r26, 0x03	; 3
    3542:	21 15       	cp	r18, r1
    3544:	31 05       	cpc	r19, r1
    3546:	a1 f7       	brne	.-24     	; 0x3530 <free+0x48>
    3548:	cd 01       	movw	r24, r26
    354a:	21 c0       	rjmp	.+66     	; 0x358e <free+0xa6>
    354c:	b3 83       	std	Z+3, r27	; 0x03
    354e:	a2 83       	std	Z+2, r26	; 0x02
    3550:	ef 01       	movw	r28, r30
    3552:	49 91       	ld	r20, Y+
    3554:	59 91       	ld	r21, Y+
    3556:	9e 01       	movw	r18, r28
    3558:	24 0f       	add	r18, r20
    355a:	35 1f       	adc	r19, r21
    355c:	a2 17       	cp	r26, r18
    355e:	b3 07       	cpc	r27, r19
    3560:	79 f4       	brne	.+30     	; 0x3580 <free+0x98>
    3562:	2d 91       	ld	r18, X+
    3564:	3c 91       	ld	r19, X
    3566:	11 97       	sbiw	r26, 0x01	; 1
    3568:	24 0f       	add	r18, r20
    356a:	35 1f       	adc	r19, r21
    356c:	2e 5f       	subi	r18, 0xFE	; 254
    356e:	3f 4f       	sbci	r19, 0xFF	; 255
    3570:	31 83       	std	Z+1, r19	; 0x01
    3572:	20 83       	st	Z, r18
    3574:	12 96       	adiw	r26, 0x02	; 2
    3576:	2d 91       	ld	r18, X+
    3578:	3c 91       	ld	r19, X
    357a:	13 97       	sbiw	r26, 0x03	; 3
    357c:	33 83       	std	Z+3, r19	; 0x03
    357e:	22 83       	std	Z+2, r18	; 0x02
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	29 f4       	brne	.+10     	; 0x358e <free+0xa6>
    3584:	f0 93 4e 03 	sts	0x034E, r31
    3588:	e0 93 4d 03 	sts	0x034D, r30
    358c:	43 c0       	rjmp	.+134    	; 0x3614 <free+0x12c>
    358e:	dc 01       	movw	r26, r24
    3590:	13 96       	adiw	r26, 0x03	; 3
    3592:	fc 93       	st	X, r31
    3594:	ee 93       	st	-X, r30
    3596:	12 97       	sbiw	r26, 0x02	; 2
    3598:	4d 91       	ld	r20, X+
    359a:	5d 91       	ld	r21, X+
    359c:	a4 0f       	add	r26, r20
    359e:	b5 1f       	adc	r27, r21
    35a0:	ea 17       	cp	r30, r26
    35a2:	fb 07       	cpc	r31, r27
    35a4:	69 f4       	brne	.+26     	; 0x35c0 <free+0xd8>
    35a6:	20 81       	ld	r18, Z
    35a8:	31 81       	ldd	r19, Z+1	; 0x01
    35aa:	24 0f       	add	r18, r20
    35ac:	35 1f       	adc	r19, r21
    35ae:	2e 5f       	subi	r18, 0xFE	; 254
    35b0:	3f 4f       	sbci	r19, 0xFF	; 255
    35b2:	ec 01       	movw	r28, r24
    35b4:	39 83       	std	Y+1, r19	; 0x01
    35b6:	28 83       	st	Y, r18
    35b8:	22 81       	ldd	r18, Z+2	; 0x02
    35ba:	33 81       	ldd	r19, Z+3	; 0x03
    35bc:	3b 83       	std	Y+3, r19	; 0x03
    35be:	2a 83       	std	Y+2, r18	; 0x02
    35c0:	e0 e0       	ldi	r30, 0x00	; 0
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <free+0xe2>
    35c6:	fb 01       	movw	r30, r22
    35c8:	bc 01       	movw	r22, r24
    35ca:	db 01       	movw	r26, r22
    35cc:	12 96       	adiw	r26, 0x02	; 2
    35ce:	8d 91       	ld	r24, X+
    35d0:	9c 91       	ld	r25, X
    35d2:	13 97       	sbiw	r26, 0x03	; 3
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	b9 f7       	brne	.-18     	; 0x35c6 <free+0xde>
    35d8:	9b 01       	movw	r18, r22
    35da:	2e 5f       	subi	r18, 0xFE	; 254
    35dc:	3f 4f       	sbci	r19, 0xFF	; 255
    35de:	8d 91       	ld	r24, X+
    35e0:	9c 91       	ld	r25, X
    35e2:	11 97       	sbiw	r26, 0x01	; 1
    35e4:	82 0f       	add	r24, r18
    35e6:	93 1f       	adc	r25, r19
    35e8:	40 91 4b 03 	lds	r20, 0x034B
    35ec:	50 91 4c 03 	lds	r21, 0x034C
    35f0:	48 17       	cp	r20, r24
    35f2:	59 07       	cpc	r21, r25
    35f4:	79 f4       	brne	.+30     	; 0x3614 <free+0x12c>
    35f6:	30 97       	sbiw	r30, 0x00	; 0
    35f8:	29 f4       	brne	.+10     	; 0x3604 <free+0x11c>
    35fa:	10 92 4e 03 	sts	0x034E, r1
    35fe:	10 92 4d 03 	sts	0x034D, r1
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <free+0x120>
    3604:	13 82       	std	Z+3, r1	; 0x03
    3606:	12 82       	std	Z+2, r1	; 0x02
    3608:	22 50       	subi	r18, 0x02	; 2
    360a:	30 40       	sbci	r19, 0x00	; 0
    360c:	30 93 4c 03 	sts	0x034C, r19
    3610:	20 93 4b 03 	sts	0x034B, r18
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	08 95       	ret

0000361a <do_random>:
    361a:	a0 e0       	ldi	r26, 0x00	; 0
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	e3 e1       	ldi	r30, 0x13	; 19
    3620:	fb e1       	ldi	r31, 0x1B	; 27
    3622:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x10>
    3626:	ec 01       	movw	r28, r24
    3628:	68 81       	ld	r22, Y
    362a:	79 81       	ldd	r23, Y+1	; 0x01
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	9b 81       	ldd	r25, Y+3	; 0x03
    3630:	61 15       	cp	r22, r1
    3632:	71 05       	cpc	r23, r1
    3634:	81 05       	cpc	r24, r1
    3636:	91 05       	cpc	r25, r1
    3638:	21 f4       	brne	.+8      	; 0x3642 <do_random+0x28>
    363a:	64 e2       	ldi	r22, 0x24	; 36
    363c:	79 ed       	ldi	r23, 0xD9	; 217
    363e:	8b e5       	ldi	r24, 0x5B	; 91
    3640:	97 e0       	ldi	r25, 0x07	; 7
    3642:	2d e1       	ldi	r18, 0x1D	; 29
    3644:	33 ef       	ldi	r19, 0xF3	; 243
    3646:	41 e0       	ldi	r20, 0x01	; 1
    3648:	50 e0       	ldi	r21, 0x00	; 0
    364a:	0e 94 a5 19 	call	0x334a	; 0x334a <__divmodsi4>
    364e:	79 01       	movw	r14, r18
    3650:	8a 01       	movw	r16, r20
    3652:	27 ea       	ldi	r18, 0xA7	; 167
    3654:	31 e4       	ldi	r19, 0x41	; 65
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__mulsi3>
    365e:	5b 01       	movw	r10, r22
    3660:	6c 01       	movw	r12, r24
    3662:	c8 01       	movw	r24, r16
    3664:	b7 01       	movw	r22, r14
    3666:	2c ee       	ldi	r18, 0xEC	; 236
    3668:	34 ef       	ldi	r19, 0xF4	; 244
    366a:	4f ef       	ldi	r20, 0xFF	; 255
    366c:	5f ef       	ldi	r21, 0xFF	; 255
    366e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__mulsi3>
    3672:	9b 01       	movw	r18, r22
    3674:	ac 01       	movw	r20, r24
    3676:	2a 0d       	add	r18, r10
    3678:	3b 1d       	adc	r19, r11
    367a:	4c 1d       	adc	r20, r12
    367c:	5d 1d       	adc	r21, r13
    367e:	57 ff       	sbrs	r21, 7
    3680:	04 c0       	rjmp	.+8      	; 0x368a <do_random+0x70>
    3682:	21 50       	subi	r18, 0x01	; 1
    3684:	30 40       	sbci	r19, 0x00	; 0
    3686:	40 40       	sbci	r20, 0x00	; 0
    3688:	50 48       	sbci	r21, 0x80	; 128
    368a:	28 83       	st	Y, r18
    368c:	39 83       	std	Y+1, r19	; 0x01
    368e:	4a 83       	std	Y+2, r20	; 0x02
    3690:	5b 83       	std	Y+3, r21	; 0x03
    3692:	5f 77       	andi	r21, 0x7F	; 127
    3694:	b9 01       	movw	r22, r18
    3696:	ca 01       	movw	r24, r20
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	ea e0       	ldi	r30, 0x0A	; 10
    369e:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x10>

000036a2 <random_r>:
    36a2:	0e 94 0d 1b 	call	0x361a	; 0x361a <do_random>
    36a6:	08 95       	ret

000036a8 <random>:
    36a8:	88 ea       	ldi	r24, 0xA8	; 168
    36aa:	91 e0       	ldi	r25, 0x01	; 1
    36ac:	0e 94 0d 1b 	call	0x361a	; 0x361a <do_random>
    36b0:	08 95       	ret

000036b2 <srandom>:
    36b2:	60 93 a8 01 	sts	0x01A8, r22
    36b6:	70 93 a9 01 	sts	0x01A9, r23
    36ba:	80 93 aa 01 	sts	0x01AA, r24
    36be:	90 93 ab 01 	sts	0x01AB, r25
    36c2:	08 95       	ret

000036c4 <realloc>:
    36c4:	a0 e0       	ldi	r26, 0x00	; 0
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	e8 e6       	ldi	r30, 0x68	; 104
    36ca:	fb e1       	ldi	r31, 0x1B	; 27
    36cc:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__prologue_saves__+0xc>
    36d0:	8c 01       	movw	r16, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	01 15       	cp	r16, r1
    36d6:	11 05       	cpc	r17, r1
    36d8:	29 f4       	brne	.+10     	; 0x36e4 <realloc+0x20>
    36da:	0e 94 da 19 	call	0x33b4	; 0x33b4 <malloc>
    36de:	08 2f       	mov	r16, r24
    36e0:	19 2f       	mov	r17, r25
    36e2:	b5 c0       	rjmp	.+362    	; 0x384e <realloc+0x18a>
    36e4:	d8 01       	movw	r26, r16
    36e6:	12 97       	sbiw	r26, 0x02	; 2
    36e8:	98 01       	movw	r18, r16
    36ea:	26 0f       	add	r18, r22
    36ec:	37 1f       	adc	r19, r23
    36ee:	2a 17       	cp	r18, r26
    36f0:	3b 07       	cpc	r19, r27
    36f2:	08 f4       	brcc	.+2      	; 0x36f6 <realloc+0x32>
    36f4:	aa c0       	rjmp	.+340    	; 0x384a <realloc+0x186>
    36f6:	ed 90       	ld	r14, X+
    36f8:	fc 90       	ld	r15, X
    36fa:	11 97       	sbiw	r26, 0x01	; 1
    36fc:	e6 16       	cp	r14, r22
    36fe:	f7 06       	cpc	r15, r23
    3700:	d0 f0       	brcs	.+52     	; 0x3736 <realloc+0x72>
    3702:	45 e0       	ldi	r20, 0x05	; 5
    3704:	e4 16       	cp	r14, r20
    3706:	f1 04       	cpc	r15, r1
    3708:	08 f4       	brcc	.+2      	; 0x370c <realloc+0x48>
    370a:	a1 c0       	rjmp	.+322    	; 0x384e <realloc+0x18a>
    370c:	a7 01       	movw	r20, r14
    370e:	44 50       	subi	r20, 0x04	; 4
    3710:	50 40       	sbci	r21, 0x00	; 0
    3712:	46 17       	cp	r20, r22
    3714:	57 07       	cpc	r21, r23
    3716:	08 f4       	brcc	.+2      	; 0x371a <realloc+0x56>
    3718:	9a c0       	rjmp	.+308    	; 0x384e <realloc+0x18a>
    371a:	a7 01       	movw	r20, r14
    371c:	42 50       	subi	r20, 0x02	; 2
    371e:	50 40       	sbci	r21, 0x00	; 0
    3720:	46 1b       	sub	r20, r22
    3722:	57 0b       	sbc	r21, r23
    3724:	f9 01       	movw	r30, r18
    3726:	41 93       	st	Z+, r20
    3728:	51 93       	st	Z+, r21
    372a:	6d 93       	st	X+, r22
    372c:	7c 93       	st	X, r23
    372e:	cf 01       	movw	r24, r30
    3730:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <free>
    3734:	8c c0       	rjmp	.+280    	; 0x384e <realloc+0x18a>
    3736:	5b 01       	movw	r10, r22
    3738:	ae 18       	sub	r10, r14
    373a:	bf 08       	sbc	r11, r15
    373c:	48 01       	movw	r8, r16
    373e:	8e 0c       	add	r8, r14
    3740:	9f 1c       	adc	r9, r15
    3742:	e0 91 4d 03 	lds	r30, 0x034D
    3746:	f0 91 4e 03 	lds	r31, 0x034E
    374a:	cc 24       	eor	r12, r12
    374c:	dd 24       	eor	r13, r13
    374e:	c0 e0       	ldi	r28, 0x00	; 0
    3750:	d0 e0       	ldi	r29, 0x00	; 0
    3752:	41 c0       	rjmp	.+130    	; 0x37d6 <realloc+0x112>
    3754:	e8 15       	cp	r30, r8
    3756:	f9 05       	cpc	r31, r9
    3758:	99 f5       	brne	.+102    	; 0x37c0 <realloc+0xfc>
    375a:	60 81       	ld	r22, Z
    375c:	71 81       	ldd	r23, Z+1	; 0x01
    375e:	ab 01       	movw	r20, r22
    3760:	4e 5f       	subi	r20, 0xFE	; 254
    3762:	5f 4f       	sbci	r21, 0xFF	; 255
    3764:	4a 15       	cp	r20, r10
    3766:	5b 05       	cpc	r21, r11
    3768:	58 f1       	brcs	.+86     	; 0x37c0 <realloc+0xfc>
    376a:	ab 01       	movw	r20, r22
    376c:	4a 19       	sub	r20, r10
    376e:	5b 09       	sbc	r21, r11
    3770:	cc 24       	eor	r12, r12
    3772:	dd 24       	eor	r13, r13
    3774:	68 94       	set
    3776:	c1 f8       	bld	r12, 1
    3778:	c4 0e       	add	r12, r20
    377a:	d5 1e       	adc	r13, r21
    377c:	82 80       	ldd	r8, Z+2	; 0x02
    377e:	a3 80       	ldd	r10, Z+3	; 0x03
    3780:	e5 e0       	ldi	r30, 0x05	; 5
    3782:	ce 16       	cp	r12, r30
    3784:	d1 04       	cpc	r13, r1
    3786:	48 f0       	brcs	.+18     	; 0x379a <realloc+0xd6>
    3788:	f9 01       	movw	r30, r18
    378a:	82 82       	std	Z+2, r8	; 0x02
    378c:	a3 82       	std	Z+3, r10	; 0x03
    378e:	51 83       	std	Z+1, r21	; 0x01
    3790:	40 83       	st	Z, r20
    3792:	11 96       	adiw	r26, 0x01	; 1
    3794:	9c 93       	st	X, r25
    3796:	8e 93       	st	-X, r24
    3798:	09 c0       	rjmp	.+18     	; 0x37ac <realloc+0xe8>
    379a:	c7 01       	movw	r24, r14
    379c:	02 96       	adiw	r24, 0x02	; 2
    379e:	86 0f       	add	r24, r22
    37a0:	97 1f       	adc	r25, r23
    37a2:	11 96       	adiw	r26, 0x01	; 1
    37a4:	9c 93       	st	X, r25
    37a6:	8e 93       	st	-X, r24
    37a8:	e8 2d       	mov	r30, r8
    37aa:	fa 2d       	mov	r31, r10
    37ac:	20 97       	sbiw	r28, 0x00	; 0
    37ae:	19 f0       	breq	.+6      	; 0x37b6 <realloc+0xf2>
    37b0:	fb 83       	std	Y+3, r31	; 0x03
    37b2:	ea 83       	std	Y+2, r30	; 0x02
    37b4:	4c c0       	rjmp	.+152    	; 0x384e <realloc+0x18a>
    37b6:	f0 93 4e 03 	sts	0x034E, r31
    37ba:	e0 93 4d 03 	sts	0x034D, r30
    37be:	47 c0       	rjmp	.+142    	; 0x384e <realloc+0x18a>
    37c0:	40 81       	ld	r20, Z
    37c2:	51 81       	ldd	r21, Z+1	; 0x01
    37c4:	c4 16       	cp	r12, r20
    37c6:	d5 06       	cpc	r13, r21
    37c8:	08 f4       	brcc	.+2      	; 0x37cc <realloc+0x108>
    37ca:	6a 01       	movw	r12, r20
    37cc:	ef 01       	movw	r28, r30
    37ce:	52 81       	ldd	r21, Z+2	; 0x02
    37d0:	43 81       	ldd	r20, Z+3	; 0x03
    37d2:	e5 2f       	mov	r30, r21
    37d4:	f4 2f       	mov	r31, r20
    37d6:	30 97       	sbiw	r30, 0x00	; 0
    37d8:	09 f0       	breq	.+2      	; 0x37dc <realloc+0x118>
    37da:	bc cf       	rjmp	.-136    	; 0x3754 <realloc+0x90>
    37dc:	40 91 4b 03 	lds	r20, 0x034B
    37e0:	50 91 4c 03 	lds	r21, 0x034C
    37e4:	48 15       	cp	r20, r8
    37e6:	59 05       	cpc	r21, r9
    37e8:	e9 f4       	brne	.+58     	; 0x3824 <realloc+0x160>
    37ea:	c8 16       	cp	r12, r24
    37ec:	d9 06       	cpc	r13, r25
    37ee:	d0 f4       	brcc	.+52     	; 0x3824 <realloc+0x160>
    37f0:	40 91 a6 01 	lds	r20, 0x01A6
    37f4:	50 91 a7 01 	lds	r21, 0x01A7
    37f8:	41 15       	cp	r20, r1
    37fa:	51 05       	cpc	r21, r1
    37fc:	41 f4       	brne	.+16     	; 0x380e <realloc+0x14a>
    37fe:	4d b7       	in	r20, 0x3d	; 61
    3800:	5e b7       	in	r21, 0x3e	; 62
    3802:	60 91 a2 01 	lds	r22, 0x01A2
    3806:	70 91 a3 01 	lds	r23, 0x01A3
    380a:	46 1b       	sub	r20, r22
    380c:	57 0b       	sbc	r21, r23
    380e:	24 17       	cp	r18, r20
    3810:	35 07       	cpc	r19, r21
    3812:	d8 f4       	brcc	.+54     	; 0x384a <realloc+0x186>
    3814:	30 93 4c 03 	sts	0x034C, r19
    3818:	20 93 4b 03 	sts	0x034B, r18
    381c:	11 96       	adiw	r26, 0x01	; 1
    381e:	9c 93       	st	X, r25
    3820:	8e 93       	st	-X, r24
    3822:	15 c0       	rjmp	.+42     	; 0x384e <realloc+0x18a>
    3824:	0e 94 da 19 	call	0x33b4	; 0x33b4 <malloc>
    3828:	c8 2e       	mov	r12, r24
    382a:	e6 01       	movw	r28, r12
    382c:	6e 01       	movw	r12, r28
    382e:	d9 2e       	mov	r13, r25
    3830:	e6 01       	movw	r28, r12
    3832:	20 97       	sbiw	r28, 0x00	; 0
    3834:	51 f0       	breq	.+20     	; 0x384a <realloc+0x186>
    3836:	8c 2d       	mov	r24, r12
    3838:	b8 01       	movw	r22, r16
    383a:	a7 01       	movw	r20, r14
    383c:	0e 94 3a 1c 	call	0x3874	; 0x3874 <memcpy>
    3840:	c8 01       	movw	r24, r16
    3842:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <free>
    3846:	86 01       	movw	r16, r12
    3848:	02 c0       	rjmp	.+4      	; 0x384e <realloc+0x18a>
    384a:	00 e0       	ldi	r16, 0x00	; 0
    384c:	10 e0       	ldi	r17, 0x00	; 0
    384e:	c8 01       	movw	r24, r16
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	ec e0       	ldi	r30, 0x0C	; 12
    3856:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <__epilogue_restores__+0xc>

0000385a <memcmp>:
    385a:	fb 01       	movw	r30, r22
    385c:	dc 01       	movw	r26, r24
    385e:	04 c0       	rjmp	.+8      	; 0x3868 <memcmp+0xe>
    3860:	8d 91       	ld	r24, X+
    3862:	01 90       	ld	r0, Z+
    3864:	80 19       	sub	r24, r0
    3866:	21 f4       	brne	.+8      	; 0x3870 <memcmp+0x16>
    3868:	41 50       	subi	r20, 0x01	; 1
    386a:	50 40       	sbci	r21, 0x00	; 0
    386c:	c8 f7       	brcc	.-14     	; 0x3860 <memcmp+0x6>
    386e:	88 1b       	sub	r24, r24
    3870:	99 0b       	sbc	r25, r25
    3872:	08 95       	ret

00003874 <memcpy>:
    3874:	fb 01       	movw	r30, r22
    3876:	dc 01       	movw	r26, r24
    3878:	02 c0       	rjmp	.+4      	; 0x387e <memcpy+0xa>
    387a:	01 90       	ld	r0, Z+
    387c:	0d 92       	st	X+, r0
    387e:	41 50       	subi	r20, 0x01	; 1
    3880:	50 40       	sbci	r21, 0x00	; 0
    3882:	d8 f7       	brcc	.-10     	; 0x387a <memcpy+0x6>
    3884:	08 95       	ret

00003886 <strcpy>:
    3886:	fb 01       	movw	r30, r22
    3888:	dc 01       	movw	r26, r24
    388a:	01 90       	ld	r0, Z+
    388c:	0d 92       	st	X+, r0
    388e:	00 20       	and	r0, r0
    3890:	e1 f7       	brne	.-8      	; 0x388a <strcpy+0x4>
    3892:	08 95       	ret

00003894 <__prologue_saves__>:
    3894:	2f 92       	push	r2
    3896:	3f 92       	push	r3
    3898:	4f 92       	push	r4
    389a:	5f 92       	push	r5
    389c:	6f 92       	push	r6
    389e:	7f 92       	push	r7
    38a0:	8f 92       	push	r8
    38a2:	9f 92       	push	r9
    38a4:	af 92       	push	r10
    38a6:	bf 92       	push	r11
    38a8:	cf 92       	push	r12
    38aa:	df 92       	push	r13
    38ac:	ef 92       	push	r14
    38ae:	ff 92       	push	r15
    38b0:	0f 93       	push	r16
    38b2:	1f 93       	push	r17
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	ca 1b       	sub	r28, r26
    38be:	db 0b       	sbc	r29, r27
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	09 94       	ijmp

000038cc <__epilogue_restores__>:
    38cc:	2a 88       	ldd	r2, Y+18	; 0x12
    38ce:	39 88       	ldd	r3, Y+17	; 0x11
    38d0:	48 88       	ldd	r4, Y+16	; 0x10
    38d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    38d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    38d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    38d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    38da:	9b 84       	ldd	r9, Y+11	; 0x0b
    38dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    38de:	b9 84       	ldd	r11, Y+9	; 0x09
    38e0:	c8 84       	ldd	r12, Y+8	; 0x08
    38e2:	df 80       	ldd	r13, Y+7	; 0x07
    38e4:	ee 80       	ldd	r14, Y+6	; 0x06
    38e6:	fd 80       	ldd	r15, Y+5	; 0x05
    38e8:	0c 81       	ldd	r16, Y+4	; 0x04
    38ea:	1b 81       	ldd	r17, Y+3	; 0x03
    38ec:	aa 81       	ldd	r26, Y+2	; 0x02
    38ee:	b9 81       	ldd	r27, Y+1	; 0x01
    38f0:	ce 0f       	add	r28, r30
    38f2:	d1 1d       	adc	r29, r1
    38f4:	0f b6       	in	r0, 0x3f	; 63
    38f6:	f8 94       	cli
    38f8:	de bf       	out	0x3e, r29	; 62
    38fa:	0f be       	out	0x3f, r0	; 63
    38fc:	cd bf       	out	0x3d, r28	; 61
    38fe:	ed 01       	movw	r28, r26
    3900:	08 95       	ret

00003902 <__do_global_dtors>:
    3902:	10 e0       	ldi	r17, 0x00	; 0
    3904:	c8 ed       	ldi	r28, 0xD8	; 216
    3906:	d0 e0       	ldi	r29, 0x00	; 0
    3908:	04 c0       	rjmp	.+8      	; 0x3912 <__do_global_dtors+0x10>
    390a:	fe 01       	movw	r30, r28
    390c:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__tablejump__>
    3910:	22 96       	adiw	r28, 0x02	; 2
    3912:	ca 3d       	cpi	r28, 0xDA	; 218
    3914:	d1 07       	cpc	r29, r17
    3916:	c9 f7       	brne	.-14     	; 0x390a <__do_global_dtors+0x8>
    3918:	f8 94       	cli

0000391a <__stop_program>:
    391a:	ff cf       	rjmp	.-2      	; 0x391a <__stop_program>
