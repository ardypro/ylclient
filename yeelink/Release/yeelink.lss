
yeelink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  0000158e  00001622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000158e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  00800186  00800186  000016a8  2**0
                  ALLOC
  3 .stab         0000942c  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000e231  00000000  00000000  0000aad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__dtors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_16>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_18>
      4c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_19>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
      68:	98 00       	.word	0x0098	; ????
      6a:	1f 03       	fmul	r17, r23

0000006c <__ctors_end>:
      6c:	9d 00       	.word	0x009d	; ????

0000006e <__dtors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf ef       	ldi	r28, 0xFF	; 255
      74:	d8 e0       	ldi	r29, 0x08	; 8
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	a0 e0       	ldi	r26, 0x00	; 0
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	ee e8       	ldi	r30, 0x8E	; 142
      82:	f5 e1       	ldi	r31, 0x15	; 21
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	a6 38       	cpi	r26, 0x86	; 134
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	12 e0       	ldi	r17, 0x02	; 2
      92:	a6 e8       	ldi	r26, 0x86	; 134
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	ab 34       	cpi	r26, 0x4B	; 75
      9c:	b1 07       	cpc	r27, r17
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	cc e6       	ldi	r28, 0x6C	; 108
      a4:	d0 e0       	ldi	r29, 0x00	; 0
      a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
      a8:	22 97       	sbiw	r28, 0x02	; 2
      aa:	fe 01       	movw	r30, r28
      ac:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__tablejump__>
      b0:	c8 36       	cpi	r28, 0x68	; 104
      b2:	d1 07       	cpc	r29, r17
      b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
      b6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <main>
      ba:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__do_global_dtors>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <_Z41__static_initialization_and_destruction_0ii.clone.0>:
{
	int v;
	v=random(256);
	client.Post(v);
	delay(20*1000);
}
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	91 05       	cpc	r25, r1
      c6:	29 f4       	brne	.+10     	; 0xd2 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
#include "ylclient.h"

extern HardwareSerial Serial;
using namespace yeelink;

ylclient client;
      c8:	86 e8       	ldi	r24, 0x86	; 134
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN7yeelink8ylclientC1Ev>
      d0:	08 95       	ret
      d2:	00 97       	sbiw	r24, 0x00	; 0
      d4:	21 f4       	brne	.+8      	; 0xde <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
      d6:	86 e8       	ldi	r24, 0x86	; 134
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN7yeelink8ylclientD1Ev>
      de:	08 95       	ret

000000e0 <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
	Serial.begin(9600);
      e0:	8f e1       	ldi	r24, 0x1F	; 31
      e2:	92 e0       	ldi	r25, 0x02	; 2
      e4:	40 e8       	ldi	r20, 0x80	; 128
      e6:	55 e2       	ldi	r21, 0x25	; 37
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN14HardwareSerial5beginEm>
	//初始化yeelink client
	//client.setAPIKey("apikey");	//设置API key，这里采用默认的key
	//client.setAPIVersion("v1.0");	//设置API版本，除非yeelink API升级，则采用默认的v1.0版本
	client.setEthernetCardType(SERIALOVERHTTP );
      f0:	86 e8       	ldi	r24, 0x86	; 134
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	62 e0       	ldi	r22, 0x02	; 2
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>
	randomSeed(analogRead(0));
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	0e 94 3a 06 	call	0xc74	; 0xc74 <analogRead>
     102:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z10randomSeedj>
}
     106:	08 95       	ret

00000108 <loop>:

// The loop function is called in an endless loop
void loop()
{
	int v;
	v=random(256);
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	71 e0       	ldi	r23, 0x01	; 1
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 36 05 	call	0xa6c	; 0xa6c <_Z6randoml>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
	client.Post(v);
     118:	86 e8       	ldi	r24, 0x86	; 134
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	b9 01       	movw	r22, r18
     11e:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN7yeelink8ylclient4PostEi>
	delay(20*1000);
     122:	60 e2       	ldi	r22, 0x20	; 32
     124:	7e e4       	ldi	r23, 0x4E	; 78
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <delay>
}
     12e:	08 95       	ret

00000130 <_GLOBAL__I_client>:
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     138:	08 95       	ret

0000013a <_GLOBAL__D_client>:
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     142:	08 95       	ret

00000144 <_ZN7yeelink17ylGenericEthernetD1Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     144:	21 e5       	ldi	r18, 0x51	; 81
     146:	31 e0       	ldi	r19, 0x01	; 1
     148:	fc 01       	movw	r30, r24
     14a:	31 83       	std	Z+1, r19	; 0x01
     14c:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     14e:	08 95       	ret

00000150 <_ZN7yeelink17ylGenericEthernetD0Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     150:	21 e5       	ldi	r18, 0x51	; 81
     152:	31 e0       	ldi	r19, 0x01	; 1
     154:	fc 01       	movw	r30, r24
     156:	31 83       	std	Z+1, r19	; 0x01
     158:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     15a:	0e 94 66 05 	call	0xacc	; 0xacc <_ZdlPv>
     15e:	08 95       	ret

00000160 <_ZN7yeelink17ylGenericEthernetC1Ev>:
//#include "ylconst.h"

namespace yeelink
{

ylGenericEthernet::ylGenericEthernet()
     160:	fc 01       	movw	r30, r24
     162:	81 e5       	ldi	r24, 0x51	; 81
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
     168:	80 83       	st	Z, r24
{
	seconds = 10; //API规定两条记录发送的时间间隔不少于10s
     16a:	8a e0       	ldi	r24, 0x0A	; 10
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	93 83       	std	Z+3, r25	; 0x03
     170:	82 83       	std	Z+2, r24	; 0x02
	apiHeader = 0;
     172:	15 82       	std	Z+5, r1	; 0x05
     174:	14 82       	std	Z+4, r1	; 0x04
	jsonStr = 0;
     176:	17 82       	std	Z+7, r1	; 0x07
     178:	16 82       	std	Z+6, r1	; 0x06

}
     17a:	08 95       	ret

0000017c <_ZN7yeelink12ylSerialHTTP12postKeyValueEPcS1_>:

bool ylSerialHTTP::postKeyValue(char* key, char* value)
{

	return 0;
}
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	08 95       	ret

00000180 <_ZN7yeelink12ylSerialHTTP4PostEf>:
}

bool ylSerialHTTP::Post(float value)
{
	//sendValueflag();
	return serial->print(value);
     180:	fc 01       	movw	r30, r24
     182:	82 85       	ldd	r24, Z+10	; 0x0a
     184:	93 85       	ldd	r25, Z+11	; 0x0b
     186:	22 e0       	ldi	r18, 0x02	; 2
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN5Print5printEdi>
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	09 f4       	brne	.+2      	; 0x196 <_ZN7yeelink12ylSerialHTTP4PostEf+0x16>
     194:	20 e0       	ldi	r18, 0x00	; 0
}
     196:	82 2f       	mov	r24, r18
     198:	08 95       	ret

0000019a <_ZN7yeelink12ylSerialHTTP4PostEi>:
}

bool ylSerialHTTP::Post(int value)
{
	//sendValueflag();
	return serial->print(value);
     19a:	fc 01       	movw	r30, r24
     19c:	82 85       	ldd	r24, Z+10	; 0x0a
     19e:	93 85       	ldd	r25, Z+11	; 0x0b
     1a0:	4a e0       	ldi	r20, 0x0A	; 10
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_ZN5Print5printEii>
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <_ZN7yeelink12ylSerialHTTP4PostEi+0x16>
     1ae:	20 e0       	ldi	r18, 0x00	; 0
}
     1b0:	82 2f       	mov	r24, r18
     1b2:	08 95       	ret

000001b4 <_ZN7yeelink12ylSerialHTTP7connectEv>:
	// TODO Auto-generated destructor stub
}

bool ylSerialHTTP::connect()
{
	serial->println("serial port is connecting");
     1b4:	fc 01       	movw	r30, r24
     1b6:	82 85       	ldd	r24, Z+10	; 0x0a
     1b8:	93 85       	ldd	r25, Z+11	; 0x0b
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	71 e0       	ldi	r23, 0x01	; 1
     1be:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN5Print7printlnEPKc>
	return true;
}
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	08 95       	ret

000001c6 <_ZN7yeelink12ylSerialHTTPD1Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     1c6:	21 e6       	ldi	r18, 0x61	; 97
     1c8:	31 e0       	ldi	r19, 0x01	; 1
     1ca:	fc 01       	movw	r30, r24
     1cc:	31 83       	std	Z+1, r19	; 0x01
     1ce:	20 83       	st	Z, r18
     1d0:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     1d4:	08 95       	ret

000001d6 <_ZN7yeelink12ylSerialHTTPD0Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ec 01       	movw	r28, r24
     1dc:	81 e6       	ldi	r24, 0x61	; 97
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	99 83       	std	Y+1, r25	; 0x01
     1e2:	88 83       	st	Y, r24
     1e4:	ce 01       	movw	r24, r28
     1e6:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     1ea:	ce 01       	movw	r24, r28
     1ec:	0e 94 66 05 	call	0xacc	; 0xacc <_ZdlPv>
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <_ZN7yeelink12ylSerialHTTPC1Ei>:
#endif

namespace yeelink
{

ylSerialHTTP::ylSerialHTTP(int serialIndex)
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	ec 01       	movw	r28, r24
     200:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7yeelink17ylGenericEthernetC1Ev>
     204:	81 e6       	ldi	r24, 0x61	; 97
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	99 83       	std	Y+1, r25	; 0x01
     20a:	88 83       	st	Y, r24
#else
		serial = &Serial;
#endif
		break;
	default:
		serial = &Serial;
     20c:	8f e1       	ldi	r24, 0x1F	; 31
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	9b 87       	std	Y+11, r25	; 0x0b
     212:	8a 87       	std	Y+10, r24	; 0x0a
	}

}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	08 95       	ret

0000021e <_ZN7yeelink8ylclientD1Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     21e:	21 e7       	ldi	r18, 0x71	; 113
     220:	31 e0       	ldi	r19, 0x01	; 1
     222:	fc 01       	movw	r30, r24
     224:	31 83       	std	Z+1, r19	; 0x01
     226:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     228:	08 95       	ret

0000022a <_ZN7yeelink8ylclientD0Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     22a:	21 e7       	ldi	r18, 0x71	; 113
     22c:	31 e0       	ldi	r19, 0x01	; 1
     22e:	fc 01       	movw	r30, r24
     230:	31 83       	std	Z+1, r19	; 0x01
     232:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     234:	0e 94 66 05 	call	0xacc	; 0xacc <_ZdlPv>
     238:	08 95       	ret

0000023a <_ZN7yeelink8ylclientC1Ev>:
//#endif

namespace yeelink
{

ylclient::ylclient()
     23a:	fc 01       	movw	r30, r24
     23c:	81 e7       	ldi	r24, 0x71	; 113
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	91 83       	std	Z+1, r25	; 0x01
     242:	80 83       	st	Z, r24
{
	// TODO Auto-generated constructor stub
	this->_connected = false;
     244:	16 82       	std	Z+6, r1	; 0x06
	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消
     246:	8a e1       	ldi	r24, 0x1A	; 26
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	93 83       	std	Z+3, r25	; 0x03
     24c:	82 83       	std	Z+2, r24	; 0x02
	this->_cardtype = SERIALOVERHTTP;
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	95 83       	std	Z+5, r25	; 0x05
     254:	84 83       	std	Z+4, r24	; 0x04
	this->_apiver = (char*) "v1.0";
     256:	8b e3       	ldi	r24, 0x3B	; 59
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	90 87       	std	Z+8, r25	; 0x08
     25c:	87 83       	std	Z+7, r24	; 0x07
	this->_activedeviceid = 0;
     25e:	12 86       	std	Z+10, r1	; 0x0a
     260:	11 86       	std	Z+9, r1	; 0x09
	this->_activesensorid = 0;
     262:	14 86       	std	Z+12, r1	; 0x0c
     264:	13 86       	std	Z+11, r1	; 0x0b
	this->_serialIndex = 1;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	96 87       	std	Z+14, r25	; 0x0e
     26c:	85 87       	std	Z+13, r24	; 0x0d

}
     26e:	08 95       	ret

00000270 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>:
//此处应该能够判断板子类型，然后决定串口数量

}

void ylclient::setEthernetCardType(ETHERNETCARD cardType)
{
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	ec 01       	movw	r28, r24
	this->_cardtype = cardType;
     27a:	7d 83       	std	Y+5, r23	; 0x05
     27c:	6c 83       	std	Y+4, r22	; 0x04
	switch (cardType)
     27e:	62 30       	cpi	r22, 0x02	; 2
     280:	71 05       	cpc	r23, r1
     282:	59 f4       	brne	.+22     	; 0x29a <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x2a>
	case ENC28J60:

		break;

	case SERIALOVERHTTP:
		net = new ylSerialHTTP();
     284:	8c e0       	ldi	r24, 0x0C	; 12
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 63 05 	call	0xac6	; 0xac6 <_Znwj>
     28c:	8c 01       	movw	r16, r24
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN7yeelink12ylSerialHTTPC1Ei>
     296:	0f 87       	std	Y+15, r16	; 0x0f
     298:	18 8b       	std	Y+16, r17	; 0x10

		break;
	}
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	08 95       	ret

000002a4 <_ZN7yeelink8ylclient4PostEf>:
	return 0;
}

bool ylclient::Post(float value)
{
	return net->Post(value);
     2a4:	dc 01       	movw	r26, r24
     2a6:	1f 96       	adiw	r26, 0x0f	; 15
     2a8:	8d 91       	ld	r24, X+
     2aa:	9c 91       	ld	r25, X
     2ac:	50 97       	sbiw	r26, 0x10	; 16
     2ae:	dc 01       	movw	r26, r24
     2b0:	ed 91       	ld	r30, X+
     2b2:	fc 91       	ld	r31, X
     2b4:	00 84       	ldd	r0, Z+8	; 0x08
     2b6:	f1 85       	ldd	r31, Z+9	; 0x09
     2b8:	e0 2d       	mov	r30, r0
     2ba:	09 95       	icall
}
     2bc:	08 95       	ret

000002be <_ZN7yeelink8ylclient4PostEi>:
		break;
	}
}

bool ylclient::Post(int value)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	ec 01       	movw	r28, r24
	float v;
	v = (double) value;
     2c4:	88 27       	eor	r24, r24
     2c6:	77 fd       	sbrc	r23, 7
     2c8:	80 95       	com	r24
     2ca:	98 2f       	mov	r25, r24
     2cc:	0e 94 5f 07 	call	0xebe	; 0xebe <__floatsisf>
     2d0:	ab 01       	movw	r20, r22
     2d2:	bc 01       	movw	r22, r24
	return this->Post(v);
     2d4:	ce 01       	movw	r24, r28
     2d6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7yeelink8ylclient4PostEf>
}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     2e0:	fc 01       	movw	r30, r24
     2e2:	84 85       	ldd	r24, Z+12	; 0x0c
     2e4:	95 85       	ldd	r25, Z+13	; 0x0d
     2e6:	fc 01       	movw	r30, r24
     2e8:	e0 5c       	subi	r30, 0xC0	; 192
     2ea:	ff 4f       	sbci	r31, 0xFF	; 255
     2ec:	20 81       	ld	r18, Z
     2ee:	31 81       	ldd	r19, Z+1	; 0x01
     2f0:	8e 5b       	subi	r24, 0xBE	; 190
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	fc 01       	movw	r30, r24
     2f6:	80 81       	ld	r24, Z
     2f8:	91 81       	ldd	r25, Z+1	; 0x01
     2fa:	28 1b       	sub	r18, r24
     2fc:	39 0b       	sbc	r19, r25
     2fe:	2f 73       	andi	r18, 0x3F	; 63
     300:	30 70       	andi	r19, 0x00	; 0
}
     302:	c9 01       	movw	r24, r18
     304:	08 95       	ret

00000306 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     306:	fc 01       	movw	r30, r24
     308:	84 85       	ldd	r24, Z+12	; 0x0c
     30a:	95 85       	ldd	r25, Z+13	; 0x0d
     30c:	fc 01       	movw	r30, r24
     30e:	e0 5c       	subi	r30, 0xC0	; 192
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	40 81       	ld	r20, Z
     314:	51 81       	ldd	r21, Z+1	; 0x01
     316:	fc 01       	movw	r30, r24
     318:	ee 5b       	subi	r30, 0xBE	; 190
     31a:	ff 4f       	sbci	r31, 0xFF	; 255
     31c:	20 81       	ld	r18, Z
     31e:	31 81       	ldd	r19, Z+1	; 0x01
     320:	42 17       	cp	r20, r18
     322:	53 07       	cpc	r21, r19
     324:	41 f0       	breq	.+16     	; 0x336 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     326:	01 90       	ld	r0, Z+
     328:	f0 81       	ld	r31, Z
     32a:	e0 2d       	mov	r30, r0
     32c:	e8 0f       	add	r30, r24
     32e:	f9 1f       	adc	r31, r25
     330:	20 81       	ld	r18, Z
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	02 c0       	rjmp	.+4      	; 0x33a <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     336:	2f ef       	ldi	r18, 0xFF	; 255
     338:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     33a:	c9 01       	movw	r24, r18
     33c:	08 95       	ret

0000033e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     33e:	fc 01       	movw	r30, r24
     340:	84 85       	ldd	r24, Z+12	; 0x0c
     342:	95 85       	ldd	r25, Z+13	; 0x0d
     344:	fc 01       	movw	r30, r24
     346:	e0 5c       	subi	r30, 0xC0	; 192
     348:	ff 4f       	sbci	r31, 0xFF	; 255
     34a:	40 81       	ld	r20, Z
     34c:	51 81       	ldd	r21, Z+1	; 0x01
     34e:	fc 01       	movw	r30, r24
     350:	ee 5b       	subi	r30, 0xBE	; 190
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	20 81       	ld	r18, Z
     356:	31 81       	ldd	r19, Z+1	; 0x01
     358:	42 17       	cp	r20, r18
     35a:	53 07       	cpc	r21, r19
     35c:	71 f0       	breq	.+28     	; 0x37a <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     35e:	a0 81       	ld	r26, Z
     360:	b1 81       	ldd	r27, Z+1	; 0x01
     362:	a8 0f       	add	r26, r24
     364:	b9 1f       	adc	r27, r25
     366:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     368:	80 81       	ld	r24, Z
     36a:	91 81       	ldd	r25, Z+1	; 0x01
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	8f 73       	andi	r24, 0x3F	; 63
     370:	90 70       	andi	r25, 0x00	; 0
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	80 83       	st	Z, r24
    return c;
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	02 c0       	rjmp	.+4      	; 0x37e <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     37a:	2f ef       	ldi	r18, 0xFF	; 255
     37c:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     37e:	c9 01       	movw	r24, r18
     380:	08 95       	ret

00000382 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     382:	dc 01       	movw	r26, r24
     384:	1e 96       	adiw	r26, 0x0e	; 14
     386:	8d 91       	ld	r24, X+
     388:	9c 91       	ld	r25, X
     38a:	1f 97       	sbiw	r26, 0x0f	; 15
     38c:	fc 01       	movw	r30, r24
     38e:	e0 5c       	subi	r30, 0xC0	; 192
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	8e 5b       	subi	r24, 0xBE	; 190
     394:	9f 4f       	sbci	r25, 0xFF	; 255
     396:	40 81       	ld	r20, Z
     398:	51 81       	ldd	r21, Z+1	; 0x01
     39a:	dc 01       	movw	r26, r24
     39c:	2d 91       	ld	r18, X+
     39e:	3c 91       	ld	r19, X
     3a0:	11 97       	sbiw	r26, 0x01	; 1
     3a2:	42 17       	cp	r20, r18
     3a4:	53 07       	cpc	r21, r19
     3a6:	b9 f7       	brne	.-18     	; 0x396 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     3a8:	08 95       	ret

000003aa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     3aa:	1f 93       	push	r17
     3ac:	fc 01       	movw	r30, r24
     3ae:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     3b0:	26 85       	ldd	r18, Z+14	; 0x0e
     3b2:	37 85       	ldd	r19, Z+15	; 0x0f
     3b4:	d9 01       	movw	r26, r18
     3b6:	a0 5c       	subi	r26, 0xC0	; 192
     3b8:	bf 4f       	sbci	r27, 0xFF	; 255
     3ba:	8d 91       	ld	r24, X+
     3bc:	9c 91       	ld	r25, X
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	60 e4       	ldi	r22, 0x40	; 64
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	0e 94 91 08 	call	0x1122	; 0x1122 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     3c8:	d9 01       	movw	r26, r18
     3ca:	ae 5b       	subi	r26, 0xBE	; 190
     3cc:	bf 4f       	sbci	r27, 0xFF	; 255
     3ce:	4d 91       	ld	r20, X+
     3d0:	5c 91       	ld	r21, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	84 17       	cp	r24, r20
     3d6:	95 07       	cpc	r25, r21
     3d8:	d1 f3       	breq	.-12     	; 0x3ce <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     3da:	d9 01       	movw	r26, r18
     3dc:	a0 5c       	subi	r26, 0xC0	; 192
     3de:	bf 4f       	sbci	r27, 0xFF	; 255
     3e0:	0d 90       	ld	r0, X+
     3e2:	bc 91       	ld	r27, X
     3e4:	a0 2d       	mov	r26, r0
     3e6:	a2 0f       	add	r26, r18
     3e8:	b3 1f       	adc	r27, r19
     3ea:	1c 93       	st	X, r17
  _tx_buffer->head = i;
     3ec:	a6 85       	ldd	r26, Z+14	; 0x0e
     3ee:	b7 85       	ldd	r27, Z+15	; 0x0f
     3f0:	a0 5c       	subi	r26, 0xC0	; 192
     3f2:	bf 4f       	sbci	r27, 0xFF	; 255
     3f4:	11 96       	adiw	r26, 0x01	; 1
     3f6:	9c 93       	st	X, r25
     3f8:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     3fa:	a6 89       	ldd	r26, Z+22	; 0x16
     3fc:	b7 89       	ldd	r27, Z+23	; 0x17
     3fe:	2c 91       	ld	r18, X
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	05 8c       	ldd	r0, Z+29	; 0x1d
     406:	02 c0       	rjmp	.+4      	; 0x40c <_ZN14HardwareSerial5writeEh+0x62>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <_ZN14HardwareSerial5writeEh+0x5e>
     410:	28 2b       	or	r18, r24
     412:	2c 93       	st	X, r18
  
  return 1;
}
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	1f 91       	pop	r17
     41a:	08 95       	ret

0000041c <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     41c:	fb 01       	movw	r30, r22
     41e:	e0 5c       	subi	r30, 0xC0	; 192
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	20 81       	ld	r18, Z
     424:	31 81       	ldd	r19, Z+1	; 0x01
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
     42a:	2f 73       	andi	r18, 0x3F	; 63
     42c:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     42e:	db 01       	movw	r26, r22
     430:	ae 5b       	subi	r26, 0xBE	; 190
     432:	bf 4f       	sbci	r27, 0xFF	; 255
     434:	4d 91       	ld	r20, X+
     436:	5c 91       	ld	r21, X
     438:	11 97       	sbiw	r26, 0x01	; 1
     43a:	24 17       	cp	r18, r20
     43c:	35 07       	cpc	r19, r21
     43e:	39 f0       	breq	.+14     	; 0x44e <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
     440:	a0 81       	ld	r26, Z
     442:	b1 81       	ldd	r27, Z+1	; 0x01
     444:	a6 0f       	add	r26, r22
     446:	b7 1f       	adc	r27, r23
     448:	8c 93       	st	X, r24
    buffer->head = i;
     44a:	31 83       	std	Z+1, r19	; 0x01
     44c:	20 83       	st	Z, r18
     44e:	08 95       	ret

00000450 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     450:	08 95       	ret

00000452 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     452:	1f 92       	push	r1
     454:	0f 92       	push	r0
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	0f 92       	push	r0
     45a:	11 24       	eor	r1, r1
     45c:	2f 93       	push	r18
     45e:	3f 93       	push	r19
     460:	4f 93       	push	r20
     462:	5f 93       	push	r21
     464:	6f 93       	push	r22
     466:	7f 93       	push	r23
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	af 93       	push	r26
     46e:	bf 93       	push	r27
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     474:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
     478:	67 e9       	ldi	r22, 0x97	; 151
     47a:	71 e0       	ldi	r23, 0x01	; 1
     47c:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z10store_charhP11ring_buffer>
  }
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	7f 91       	pop	r23
     48e:	6f 91       	pop	r22
     490:	5f 91       	pop	r21
     492:	4f 91       	pop	r20
     494:	3f 91       	pop	r19
     496:	2f 91       	pop	r18
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     4a2:	8f e1       	ldi	r24, 0x1F	; 31
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN14HardwareSerial9availableEv>
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <_Z14serialEventRunv+0x10>
     4ae:	0e 94 28 02 	call	0x450	; 0x450 <_Z11serialEventv>
     4b2:	08 95       	ret

000004b4 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	2f 93       	push	r18
     4c0:	3f 93       	push	r19
     4c2:	5f 93       	push	r21
     4c4:	6f 93       	push	r22
     4c6:	7f 93       	push	r23
     4c8:	8f 93       	push	r24
     4ca:	9f 93       	push	r25
     4cc:	af 93       	push	r26
     4ce:	bf 93       	push	r27
     4d0:	ef 93       	push	r30
     4d2:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     4d4:	20 91 1b 02 	lds	r18, 0x021B
     4d8:	30 91 1c 02 	lds	r19, 0x021C
     4dc:	80 91 1d 02 	lds	r24, 0x021D
     4e0:	90 91 1e 02 	lds	r25, 0x021E
     4e4:	28 17       	cp	r18, r24
     4e6:	39 07       	cpc	r19, r25
     4e8:	31 f4       	brne	.+12     	; 0x4f6 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     4ea:	80 91 c1 00 	lds	r24, 0x00C1
     4ee:	8f 7d       	andi	r24, 0xDF	; 223
     4f0:	80 93 c1 00 	sts	0x00C1, r24
     4f4:	16 c0       	rjmp	.+44     	; 0x522 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     4f6:	e0 91 1d 02 	lds	r30, 0x021D
     4fa:	f0 91 1e 02 	lds	r31, 0x021E
     4fe:	e5 52       	subi	r30, 0x25	; 37
     500:	fe 4f       	sbci	r31, 0xFE	; 254
     502:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     504:	80 91 1d 02 	lds	r24, 0x021D
     508:	90 91 1e 02 	lds	r25, 0x021E
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	60 e4       	ldi	r22, 0x40	; 64
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	0e 94 91 08 	call	0x1122	; 0x1122 <__divmodhi4>
     516:	90 93 1e 02 	sts	0x021E, r25
     51a:	80 93 1d 02 	sts	0x021D, r24
	
  #if defined(UDR0)
    UDR0 = c;
     51e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	bf 91       	pop	r27
     528:	af 91       	pop	r26
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	7f 91       	pop	r23
     530:	6f 91       	pop	r22
     532:	5f 91       	pop	r21
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
     552:	7a 01       	movw	r14, r20
     554:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     556:	dd 24       	eor	r13, r13
     558:	d3 94       	inc	r13
     55a:	40 30       	cpi	r20, 0x00	; 0
     55c:	81 ee       	ldi	r24, 0xE1	; 225
     55e:	58 07       	cpc	r21, r24
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	68 07       	cpc	r22, r24
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	78 07       	cpc	r23, r24
     568:	49 f4       	brne	.+18     	; 0x57c <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     56a:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     56c:	ec 89       	ldd	r30, Y+20	; 0x14
     56e:	fd 89       	ldd	r31, Y+21	; 0x15
     570:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     572:	60 e8       	ldi	r22, 0x80	; 128
     574:	74 e8       	ldi	r23, 0x84	; 132
     576:	8e e1       	ldi	r24, 0x1E	; 30
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0f c0       	rjmp	.+30     	; 0x59a <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     57c:	ec 89       	ldd	r30, Y+20	; 0x14
     57e:	fd 89       	ldd	r31, Y+21	; 0x15
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 8c       	ldd	r0, Y+30	; 0x1e
     586:	02 c0       	rjmp	.+4      	; 0x58c <_ZN14HardwareSerial5beginEm+0x4a>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <_ZN14HardwareSerial5beginEm+0x46>
     590:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	79 e0       	ldi	r23, 0x09	; 9
     596:	8d e3       	ldi	r24, 0x3D	; 61
     598:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     59a:	a8 01       	movw	r20, r16
     59c:	97 01       	movw	r18, r14
     59e:	0e 94 a4 08 	call	0x1148	; 0x1148 <__udivmodsi4>
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	30 40       	sbci	r19, 0x00	; 0
     5a6:	40 40       	sbci	r20, 0x00	; 0
     5a8:	50 40       	sbci	r21, 0x00	; 0
     5aa:	56 95       	lsr	r21
     5ac:	47 95       	ror	r20
     5ae:	37 95       	ror	r19
     5b0:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     5b2:	80 e1       	ldi	r24, 0x10	; 16
     5b4:	20 30       	cpi	r18, 0x00	; 0
     5b6:	38 07       	cpc	r19, r24
     5b8:	10 f0       	brcs	.+4      	; 0x5be <_ZN14HardwareSerial5beginEm+0x7c>
     5ba:	dd 20       	and	r13, r13
     5bc:	b1 f6       	brne	.-84     	; 0x56a <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     5be:	e8 89       	ldd	r30, Y+16	; 0x10
     5c0:	f9 89       	ldd	r31, Y+17	; 0x11
     5c2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     5c4:	ea 89       	ldd	r30, Y+18	; 0x12
     5c6:	fb 89       	ldd	r31, Y+19	; 0x13
     5c8:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     5ca:	ee 89       	ldd	r30, Y+22	; 0x16
     5cc:	ff 89       	ldd	r31, Y+23	; 0x17
     5ce:	40 81       	ld	r20, Z
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9c 01       	movw	r18, r24
     5d6:	0a 8c       	ldd	r0, Y+26	; 0x1a
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <_ZN14HardwareSerial5beginEm+0x9c>
     5da:	22 0f       	add	r18, r18
     5dc:	33 1f       	adc	r19, r19
     5de:	0a 94       	dec	r0
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <_ZN14HardwareSerial5beginEm+0x98>
     5e2:	42 2b       	or	r20, r18
     5e4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     5e6:	ee 89       	ldd	r30, Y+22	; 0x16
     5e8:	ff 89       	ldd	r31, Y+23	; 0x17
     5ea:	40 81       	ld	r20, Z
     5ec:	9c 01       	movw	r18, r24
     5ee:	0b 8c       	ldd	r0, Y+27	; 0x1b
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <_ZN14HardwareSerial5beginEm+0xb4>
     5f2:	22 0f       	add	r18, r18
     5f4:	33 1f       	adc	r19, r19
     5f6:	0a 94       	dec	r0
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <_ZN14HardwareSerial5beginEm+0xb0>
     5fa:	42 2b       	or	r20, r18
     5fc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     5fe:	ee 89       	ldd	r30, Y+22	; 0x16
     600:	ff 89       	ldd	r31, Y+23	; 0x17
     602:	40 81       	ld	r20, Z
     604:	9c 01       	movw	r18, r24
     606:	0c 8c       	ldd	r0, Y+28	; 0x1c
     608:	02 c0       	rjmp	.+4      	; 0x60e <_ZN14HardwareSerial5beginEm+0xcc>
     60a:	22 0f       	add	r18, r18
     60c:	33 1f       	adc	r19, r19
     60e:	0a 94       	dec	r0
     610:	e2 f7       	brpl	.-8      	; 0x60a <_ZN14HardwareSerial5beginEm+0xc8>
     612:	42 2b       	or	r20, r18
     614:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     616:	ee 89       	ldd	r30, Y+22	; 0x16
     618:	ff 89       	ldd	r31, Y+23	; 0x17
     61a:	20 81       	ld	r18, Z
     61c:	0d 8c       	ldd	r0, Y+29	; 0x1d
     61e:	02 c0       	rjmp	.+4      	; 0x624 <_ZN14HardwareSerial5beginEm+0xe2>
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	0a 94       	dec	r0
     626:	e2 f7       	brpl	.-8      	; 0x620 <_ZN14HardwareSerial5beginEm+0xde>
     628:	80 95       	com	r24
     62a:	82 23       	and	r24, r18
     62c:	80 83       	st	Z, r24
}
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
     63a:	df 90       	pop	r13
     63c:	08 95       	ret

0000063e <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     63e:	10 92 22 02 	sts	0x0222, r1
     642:	10 92 21 02 	sts	0x0221, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     646:	88 ee       	ldi	r24, 0xE8	; 232
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	a0 e0       	ldi	r26, 0x00	; 0
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	80 93 23 02 	sts	0x0223, r24
     652:	90 93 24 02 	sts	0x0224, r25
     656:	a0 93 25 02 	sts	0x0225, r26
     65a:	b0 93 26 02 	sts	0x0226, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     65e:	e1 e2       	ldi	r30, 0x21	; 33
     660:	f2 e0       	ldi	r31, 0x02	; 2
     662:	89 e7       	ldi	r24, 0x79	; 121
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	92 93       	st	-Z, r25
     668:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     66a:	87 e9       	ldi	r24, 0x97	; 151
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	95 87       	std	Z+13, r25	; 0x0d
     670:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     672:	8b ed       	ldi	r24, 0xDB	; 219
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	97 87       	std	Z+15, r25	; 0x0f
     678:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     67a:	85 ec       	ldi	r24, 0xC5	; 197
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	91 8b       	std	Z+17, r25	; 0x11
     680:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     682:	84 ec       	ldi	r24, 0xC4	; 196
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	93 8b       	std	Z+19, r25	; 0x13
     688:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     68a:	80 ec       	ldi	r24, 0xC0	; 192
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	95 8b       	std	Z+21, r25	; 0x15
     690:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     692:	81 ec       	ldi	r24, 0xC1	; 193
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	97 8b       	std	Z+23, r25	; 0x17
     698:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     69a:	86 ec       	ldi	r24, 0xC6	; 198
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	91 8f       	std	Z+25, r25	; 0x19
     6a0:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     6aa:	87 e0       	ldi	r24, 0x07	; 7
     6ac:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     6ae:	85 e0       	ldi	r24, 0x05	; 5
     6b0:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     6b6:	08 95       	ret

000006b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	6c 01       	movw	r12, r24
     6ca:	7b 01       	movw	r14, r22
     6cc:	8a 01       	movw	r16, r20
  size_t n = 0;
     6ce:	c0 e0       	ldi	r28, 0x00	; 0
     6d0:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
     6d4:	d7 01       	movw	r26, r14
     6d6:	6d 91       	ld	r22, X+
     6d8:	7d 01       	movw	r14, r26
     6da:	d6 01       	movw	r26, r12
     6dc:	ed 91       	ld	r30, X+
     6de:	fc 91       	ld	r31, X
     6e0:	01 90       	ld	r0, Z+
     6e2:	f0 81       	ld	r31, Z
     6e4:	e0 2d       	mov	r30, r0
     6e6:	c6 01       	movw	r24, r12
     6e8:	09 95       	icall
     6ea:	c8 0f       	add	r28, r24
     6ec:	d9 1f       	adc	r29, r25
     6ee:	01 50       	subi	r16, 0x01	; 1
     6f0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     6f2:	01 15       	cp	r16, r1
     6f4:	11 05       	cpc	r17, r1
     6f6:	71 f7       	brne	.-36     	; 0x6d4 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     6f8:	ce 01       	movw	r24, r28
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	08 95       	ret

0000070c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     70c:	db 01       	movw	r26, r22
     70e:	0d 90       	ld	r0, X+
     710:	00 20       	and	r0, r0
     712:	e9 f7       	brne	.-6      	; 0x70e <_ZN5Print5writeEPKc+0x2>
     714:	ad 01       	movw	r20, r26
     716:	41 50       	subi	r20, 0x01	; 1
     718:	50 40       	sbci	r21, 0x00	; 0
     71a:	46 1b       	sub	r20, r22
     71c:	57 0b       	sbc	r21, r23
     71e:	dc 01       	movw	r26, r24
     720:	ed 91       	ld	r30, X+
     722:	fc 91       	ld	r31, X
     724:	02 80       	ldd	r0, Z+2	; 0x02
     726:	f3 81       	ldd	r31, Z+3	; 0x03
     728:	e0 2d       	mov	r30, r0
     72a:	09 95       	icall
     72c:	08 95       	ret

0000072e <_ZN5Print5printEc>:
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
     72e:	dc 01       	movw	r26, r24
     730:	ed 91       	ld	r30, X+
     732:	fc 91       	ld	r31, X
     734:	01 90       	ld	r0, Z+
     736:	f0 81       	ld	r31, Z
     738:	e0 2d       	mov	r30, r0
     73a:	09 95       	icall
    size_t println(long, int = DEC);
     73c:	08 95       	ret

0000073e <_ZN5Print7printlnEv>:
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	ec 01       	movw	r28, r24
     748:	6d e0       	ldi	r22, 0x0D	; 13
     74a:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN5Print5printEc>
     74e:	8c 01       	movw	r16, r24
     750:	ce 01       	movw	r24, r28
     752:	6a e0       	ldi	r22, 0x0A	; 10
     754:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN5Print5printEc>
     758:	08 0f       	add	r16, r24
     75a:	19 1f       	adc	r17, r25
     75c:	c8 01       	movw	r24, r16
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <_ZN5Print7printlnEPKc>:
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	ec 01       	movw	r28, r24
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     772:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN5Print5writeEPKc>
     776:	8c 01       	movw	r16, r24
     778:	ce 01       	movw	r24, r28
     77a:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN5Print7printlnEv>
     77e:	08 0f       	add	r16, r24
     780:	19 1f       	adc	r17, r25
     782:	c8 01       	movw	r24, r16
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	08 95       	ret

0000078e <_ZN5Print11printNumberEmh>:
     78e:	8f 92       	push	r8
     790:	9f 92       	push	r9
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	a1 97       	sbiw	r28, 0x21	; 33
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	6c 01       	movw	r12, r24
     7b8:	04 2f       	mov	r16, r20
     7ba:	e5 2f       	mov	r30, r21
     7bc:	cb 01       	movw	r24, r22
     7be:	12 2f       	mov	r17, r18
     7c0:	19 a2       	std	Y+33, r1	; 0x21
     7c2:	22 30       	cpi	r18, 0x02	; 2
     7c4:	08 f4       	brcc	.+2      	; 0x7c8 <_ZN5Print11printNumberEmh+0x3a>
     7c6:	1a e0       	ldi	r17, 0x0A	; 10
     7c8:	21 e2       	ldi	r18, 0x21	; 33
     7ca:	e2 2e       	mov	r14, r18
     7cc:	f1 2c       	mov	r15, r1
     7ce:	ec 0e       	add	r14, r28
     7d0:	fd 1e       	adc	r15, r29
     7d2:	81 2e       	mov	r8, r17
     7d4:	99 24       	eor	r9, r9
     7d6:	aa 24       	eor	r10, r10
     7d8:	bb 24       	eor	r11, r11
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <_ZN5Print11printNumberEmh+0x54>
     7dc:	02 2f       	mov	r16, r18
     7de:	e3 2f       	mov	r30, r19
     7e0:	ca 01       	movw	r24, r20
     7e2:	60 2f       	mov	r22, r16
     7e4:	7e 2f       	mov	r23, r30
     7e6:	a5 01       	movw	r20, r10
     7e8:	94 01       	movw	r18, r8
     7ea:	0e 94 a4 08 	call	0x1148	; 0x1148 <__udivmodsi4>
     7ee:	12 9f       	mul	r17, r18
     7f0:	80 2d       	mov	r24, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	08 1b       	sub	r16, r24
     7f6:	08 94       	sec
     7f8:	e1 08       	sbc	r14, r1
     7fa:	f1 08       	sbc	r15, r1
     7fc:	0a 30       	cpi	r16, 0x0A	; 10
     7fe:	14 f4       	brge	.+4      	; 0x804 <_ZN5Print11printNumberEmh+0x76>
     800:	00 5d       	subi	r16, 0xD0	; 208
     802:	01 c0       	rjmp	.+2      	; 0x806 <_ZN5Print11printNumberEmh+0x78>
     804:	09 5c       	subi	r16, 0xC9	; 201
     806:	f7 01       	movw	r30, r14
     808:	00 83       	st	Z, r16
     80a:	21 15       	cp	r18, r1
     80c:	31 05       	cpc	r19, r1
     80e:	41 05       	cpc	r20, r1
     810:	51 05       	cpc	r21, r1
     812:	21 f7       	brne	.-56     	; 0x7dc <_ZN5Print11printNumberEmh+0x4e>
     814:	c6 01       	movw	r24, r12
     816:	b7 01       	movw	r22, r14
     818:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN5Print5writeEPKc>
     81c:	a1 96       	adiw	r28, 0x21	; 33
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	cf 91       	pop	r28
     82a:	df 91       	pop	r29
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	cf 90       	pop	r12
     838:	bf 90       	pop	r11
     83a:	af 90       	pop	r10
     83c:	9f 90       	pop	r9
     83e:	8f 90       	pop	r8
     840:	08 95       	ret

00000842 <_ZN5Print5printEmi>:
     842:	21 15       	cp	r18, r1
     844:	31 05       	cpc	r19, r1
     846:	49 f4       	brne	.+18     	; 0x85a <_ZN5Print5printEmi+0x18>
     848:	dc 01       	movw	r26, r24
     84a:	ed 91       	ld	r30, X+
     84c:	fc 91       	ld	r31, X
     84e:	01 90       	ld	r0, Z+
     850:	f0 81       	ld	r31, Z
     852:	e0 2d       	mov	r30, r0
     854:	64 2f       	mov	r22, r20
     856:	09 95       	icall
     858:	08 95       	ret
     85a:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN5Print11printNumberEmh>
     85e:	08 95       	ret

00000860 <_ZN5Print5printEli>:
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	ec 01       	movw	r28, r24
     872:	7a 01       	movw	r14, r20
     874:	8b 01       	movw	r16, r22
     876:	21 15       	cp	r18, r1
     878:	31 05       	cpc	r19, r1
     87a:	41 f4       	brne	.+16     	; 0x88c <_ZN5Print5printEli+0x2c>
     87c:	e8 81       	ld	r30, Y
     87e:	f9 81       	ldd	r31, Y+1	; 0x01
     880:	01 90       	ld	r0, Z+
     882:	f0 81       	ld	r31, Z
     884:	e0 2d       	mov	r30, r0
     886:	64 2f       	mov	r22, r20
     888:	09 95       	icall
     88a:	1a c0       	rjmp	.+52     	; 0x8c0 <_ZN5Print5printEli+0x60>
     88c:	2a 30       	cpi	r18, 0x0A	; 10
     88e:	31 05       	cpc	r19, r1
     890:	a9 f4       	brne	.+42     	; 0x8bc <_ZN5Print5printEli+0x5c>
     892:	77 ff       	sbrs	r23, 7
     894:	12 c0       	rjmp	.+36     	; 0x8ba <_ZN5Print5printEli+0x5a>
     896:	6d e2       	ldi	r22, 0x2D	; 45
     898:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN5Print5printEc>
     89c:	6c 01       	movw	r12, r24
     89e:	44 27       	eor	r20, r20
     8a0:	55 27       	eor	r21, r21
     8a2:	ba 01       	movw	r22, r20
     8a4:	4e 19       	sub	r20, r14
     8a6:	5f 09       	sbc	r21, r15
     8a8:	60 0b       	sbc	r22, r16
     8aa:	71 0b       	sbc	r23, r17
     8ac:	ce 01       	movw	r24, r28
     8ae:	2a e0       	ldi	r18, 0x0A	; 10
     8b0:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN5Print11printNumberEmh>
     8b4:	c8 0e       	add	r12, r24
     8b6:	d9 1e       	adc	r13, r25
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <_ZN5Print5printEli+0x62>
     8ba:	2a e0       	ldi	r18, 0x0A	; 10
     8bc:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN5Print11printNumberEmh>
     8c0:	6c 01       	movw	r12, r24
     8c2:	c6 01       	movw	r24, r12
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	08 95       	ret

000008d6 <_ZN5Print5printEii>:
    size_t println(const Printable&);
    size_t println(void);
};

#endif
     8d6:	9a 01       	movw	r18, r20
     8d8:	fb 01       	movw	r30, r22
     8da:	af 01       	movw	r20, r30
     8dc:	66 27       	eor	r22, r22
     8de:	57 fd       	sbrc	r21, 7
     8e0:	60 95       	com	r22
     8e2:	76 2f       	mov	r23, r22
     8e4:	0e 94 30 04 	call	0x860	; 0x860 <_ZN5Print5printEli>
     8e8:	08 95       	ret

000008ea <_ZN5Print10printFloatEdh>:
     8ea:	6f 92       	push	r6
     8ec:	7f 92       	push	r7
     8ee:	9f 92       	push	r9
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	3c 01       	movw	r6, r24
     906:	7a 01       	movw	r14, r20
     908:	8b 01       	movw	r16, r22
     90a:	c2 2e       	mov	r12, r18
     90c:	cb 01       	movw	r24, r22
     90e:	ba 01       	movw	r22, r20
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	a9 01       	movw	r20, r18
     916:	0e 94 c0 06 	call	0xd80	; 0xd80 <__cmpsf2>
     91a:	87 ff       	sbrs	r24, 7
     91c:	0a c0       	rjmp	.+20     	; 0x932 <__stack+0x33>
     91e:	c3 01       	movw	r24, r6
     920:	6d e2       	ldi	r22, 0x2D	; 45
     922:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN5Print5printEc>
     926:	ec 01       	movw	r28, r24
     928:	17 fb       	bst	r17, 7
     92a:	10 95       	com	r17
     92c:	17 f9       	bld	r17, 7
     92e:	10 95       	com	r17
     930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
     932:	c0 e0       	ldi	r28, 0x00	; 0
     934:	d0 e0       	ldi	r29, 0x00	; 0
     936:	dd 24       	eor	r13, r13
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	2f e3       	ldi	r18, 0x3F	; 63
     940:	11 c0       	rjmp	.+34     	; 0x964 <__stack+0x65>
     942:	da 01       	movw	r26, r20
     944:	f9 01       	movw	r30, r18
     946:	6b 2f       	mov	r22, r27
     948:	74 2f       	mov	r23, r20
     94a:	8f 2f       	mov	r24, r31
     94c:	92 2f       	mov	r25, r18
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e2       	ldi	r20, 0x20	; 32
     954:	51 e4       	ldi	r21, 0x41	; 65
     956:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divsf3>
     95a:	56 2f       	mov	r21, r22
     95c:	47 2f       	mov	r20, r23
     95e:	38 2f       	mov	r19, r24
     960:	29 2f       	mov	r18, r25
     962:	d3 94       	inc	r13
     964:	dc 14       	cp	r13, r12
     966:	68 f3       	brcs	.-38     	; 0x942 <__stack+0x43>
     968:	c8 01       	movw	r24, r16
     96a:	b7 01       	movw	r22, r14
     96c:	da 01       	movw	r26, r20
     96e:	f9 01       	movw	r30, r18
     970:	2b 2f       	mov	r18, r27
     972:	34 2f       	mov	r19, r20
     974:	4f 2f       	mov	r20, r31
     976:	5e 2f       	mov	r21, r30
     978:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__addsf3>
     97c:	5b 01       	movw	r10, r22
     97e:	f8 2e       	mov	r15, r24
     980:	99 2e       	mov	r9, r25
     982:	7b 2d       	mov	r23, r11
     984:	0e 94 31 07 	call	0xe62	; 0xe62 <__fixunssfsi>
     988:	16 2f       	mov	r17, r22
     98a:	d7 2e       	mov	r13, r23
     98c:	e8 2e       	mov	r14, r24
     98e:	09 2f       	mov	r16, r25
     990:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
     994:	9b 01       	movw	r18, r22
     996:	ac 01       	movw	r20, r24
     998:	6a 2d       	mov	r22, r10
     99a:	7b 2d       	mov	r23, r11
     99c:	8f 2d       	mov	r24, r15
     99e:	99 2d       	mov	r25, r9
     9a0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__subsf3>
     9a4:	96 2e       	mov	r9, r22
     9a6:	a7 2e       	mov	r10, r23
     9a8:	b8 2e       	mov	r11, r24
     9aa:	f9 2e       	mov	r15, r25
     9ac:	c3 01       	movw	r24, r6
     9ae:	41 2f       	mov	r20, r17
     9b0:	5d 2d       	mov	r21, r13
     9b2:	6e 2d       	mov	r22, r14
     9b4:	70 2f       	mov	r23, r16
     9b6:	2a e0       	ldi	r18, 0x0A	; 10
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	0e 94 21 04 	call	0x842	; 0x842 <_ZN5Print5printEmi>
     9be:	c8 0f       	add	r28, r24
     9c0:	d9 1f       	adc	r29, r25
     9c2:	cc 20       	and	r12, r12
     9c4:	b9 f1       	breq	.+110    	; 0xa34 <__stack+0x135>
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     9c6:	c3 01       	movw	r24, r6
     9c8:	60 e4       	ldi	r22, 0x40	; 64
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN5Print5writeEPKc>
     9d0:	c8 0f       	add	r28, r24
     9d2:	d9 1f       	adc	r29, r25
     9d4:	2f c0       	rjmp	.+94     	; 0xa34 <__stack+0x135>
     9d6:	69 2d       	mov	r22, r9
     9d8:	7a 2d       	mov	r23, r10
     9da:	8b 2d       	mov	r24, r11
     9dc:	9f 2d       	mov	r25, r15
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e2       	ldi	r20, 0x20	; 32
     9e4:	51 e4       	ldi	r21, 0x41	; 65
     9e6:	0e 94 0f 08 	call	0x101e	; 0x101e <__mulsf3>
     9ea:	d6 2e       	mov	r13, r22
     9ec:	b7 2e       	mov	r11, r23
     9ee:	a8 2e       	mov	r10, r24
     9f0:	99 2e       	mov	r9, r25
     9f2:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fixsfsi>
    size_t println(void);
};

#endif
     9f6:	7b 01       	movw	r14, r22
     9f8:	00 27       	eor	r16, r16
     9fa:	f7 fc       	sbrc	r15, 7
     9fc:	00 95       	com	r16
     9fe:	10 2f       	mov	r17, r16
     a00:	c3 01       	movw	r24, r6
     a02:	b8 01       	movw	r22, r16
     a04:	a7 01       	movw	r20, r14
     a06:	2a e0       	ldi	r18, 0x0A	; 10
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	0e 94 30 04 	call	0x860	; 0x860 <_ZN5Print5printEli>
     a0e:	c8 0f       	add	r28, r24
     a10:	d9 1f       	adc	r29, r25
     a12:	c8 01       	movw	r24, r16
     a14:	b7 01       	movw	r22, r14
     a16:	0e 94 5f 07 	call	0xebe	; 0xebe <__floatsisf>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	6d 2d       	mov	r22, r13
     a20:	7b 2d       	mov	r23, r11
     a22:	8a 2d       	mov	r24, r10
     a24:	99 2d       	mov	r25, r9
     a26:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__subsf3>
     a2a:	96 2e       	mov	r9, r22
     a2c:	a7 2e       	mov	r10, r23
     a2e:	b8 2e       	mov	r11, r24
     a30:	f9 2e       	mov	r15, r25
     a32:	ca 94       	dec	r12
     a34:	cc 20       	and	r12, r12
     a36:	79 f6       	brne	.-98     	; 0x9d6 <__stack+0xd7>
     a38:	ce 01       	movw	r24, r28
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	bf 90       	pop	r11
     a4c:	af 90       	pop	r10
     a4e:	9f 90       	pop	r9
     a50:	7f 90       	pop	r7
     a52:	6f 90       	pop	r6
     a54:	08 95       	ret

00000a56 <_ZN5Print5printEdi>:
     a56:	0e 94 75 04 	call	0x8ea	; 0x8ea <_ZN5Print10printFloatEdh>
     a5a:	08 95       	ret

00000a5c <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	29 f0       	breq	.+10     	; 0xa6a <_Z10randomSeedj+0xe>
    srandom(seed);
     a60:	bc 01       	movw	r22, r24
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <srandom>
     a6a:	08 95       	ret

00000a6c <_Z6randoml>:
  }
}

long random(long howbig)
{
     a6c:	ef 92       	push	r14
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	7b 01       	movw	r14, r22
     a76:	8c 01       	movw	r16, r24
  if (howbig == 0) {
     a78:	61 15       	cp	r22, r1
     a7a:	71 05       	cpc	r23, r1
     a7c:	81 05       	cpc	r24, r1
     a7e:	91 05       	cpc	r25, r1
     a80:	49 f0       	breq	.+18     	; 0xa94 <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
     a82:	0e 94 75 0a 	call	0x14ea	; 0x14ea <random>
     a86:	a8 01       	movw	r20, r16
     a88:	97 01       	movw	r18, r14
     a8a:	0e 94 c6 08 	call	0x118c	; 0x118c <__divmodsi4>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	03 c0       	rjmp	.+6      	; 0xa9a <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
     a9a:	b9 01       	movw	r22, r18
     a9c:	ca 01       	movw	r24, r20
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	08 95       	ret

00000aa8 <main>:
#include <Arduino.h>

int main(void)
{
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
	init();
     aac:	0e 94 ff 05 	call	0xbfe	; 0xbfe <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     ab0:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ab4:	c1 e5       	ldi	r28, 0x51	; 81
     ab6:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     ab8:	0e 94 84 00 	call	0x108	; 0x108 <loop>
		if (serialEventRun) serialEventRun();
     abc:	20 97       	sbiw	r28, 0x00	; 0
     abe:	e1 f3       	breq	.-8      	; 0xab8 <main+0x10>
     ac0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_Z14serialEventRunv>
     ac4:	f9 cf       	rjmp	.-14     	; 0xab8 <main+0x10>

00000ac6 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
     ac6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <malloc>
}
     aca:	08 95       	ret

00000acc <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
     acc:	0e 94 95 09 	call	0x132a	; 0x132a <free>
} 
     ad0:	08 95       	ret

00000ad2 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
     ad2:	08 95       	ret

00000ad4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	2f 93       	push	r18
     ae0:	3f 93       	push	r19
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     aea:	80 91 42 02 	lds	r24, 0x0242
     aee:	90 91 43 02 	lds	r25, 0x0243
     af2:	a0 91 44 02 	lds	r26, 0x0244
     af6:	b0 91 45 02 	lds	r27, 0x0245
	unsigned char f = timer0_fract;
     afa:	30 91 46 02 	lds	r19, 0x0246

	m += MILLIS_INC;
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	a1 1d       	adc	r26, r1
     b02:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     b04:	23 2f       	mov	r18, r19
     b06:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     b08:	2d 37       	cpi	r18, 0x7D	; 125
     b0a:	20 f0       	brcs	.+8      	; 0xb14 <__vector_16+0x40>
		f -= FRACT_MAX;
     b0c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	a1 1d       	adc	r26, r1
     b12:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     b14:	20 93 46 02 	sts	0x0246, r18
	timer0_millis = m;
     b18:	80 93 42 02 	sts	0x0242, r24
     b1c:	90 93 43 02 	sts	0x0243, r25
     b20:	a0 93 44 02 	sts	0x0244, r26
     b24:	b0 93 45 02 	sts	0x0245, r27
	timer0_overflow_count++;
     b28:	80 91 3e 02 	lds	r24, 0x023E
     b2c:	90 91 3f 02 	lds	r25, 0x023F
     b30:	a0 91 40 02 	lds	r26, 0x0240
     b34:	b0 91 41 02 	lds	r27, 0x0241
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	a1 1d       	adc	r26, r1
     b3c:	b1 1d       	adc	r27, r1
     b3e:	80 93 3e 02 	sts	0x023E, r24
     b42:	90 93 3f 02 	sts	0x023F, r25
     b46:	a0 93 40 02 	sts	0x0240, r26
     b4a:	b0 93 41 02 	sts	0x0241, r27
}
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	3f 91       	pop	r19
     b58:	2f 91       	pop	r18
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     b64:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     b66:	f8 94       	cli
	m = timer0_overflow_count;
     b68:	20 91 3e 02 	lds	r18, 0x023E
     b6c:	30 91 3f 02 	lds	r19, 0x023F
     b70:	40 91 40 02 	lds	r20, 0x0240
     b74:	50 91 41 02 	lds	r21, 0x0241
#if defined(TCNT0)
	t = TCNT0;
     b78:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     b7a:	a8 9b       	sbis	0x15, 0	; 21
     b7c:	06 c0       	rjmp	.+12     	; 0xb8a <micros+0x26>
     b7e:	8f 3f       	cpi	r24, 0xFF	; 255
     b80:	21 f0       	breq	.+8      	; 0xb8a <micros+0x26>
		m++;
     b82:	2f 5f       	subi	r18, 0xFF	; 255
     b84:	3f 4f       	sbci	r19, 0xFF	; 255
     b86:	4f 4f       	sbci	r20, 0xFF	; 255
     b88:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     b8a:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     b8c:	54 2f       	mov	r21, r20
     b8e:	43 2f       	mov	r20, r19
     b90:	32 2f       	mov	r19, r18
     b92:	22 27       	eor	r18, r18
     b94:	28 0f       	add	r18, r24
     b96:	31 1d       	adc	r19, r1
     b98:	41 1d       	adc	r20, r1
     b9a:	51 1d       	adc	r21, r1
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	22 0f       	add	r18, r18
     ba0:	33 1f       	adc	r19, r19
     ba2:	44 1f       	adc	r20, r20
     ba4:	55 1f       	adc	r21, r21
     ba6:	8a 95       	dec	r24
     ba8:	d1 f7       	brne	.-12     	; 0xb9e <micros+0x3a>
}
     baa:	b9 01       	movw	r22, r18
     bac:	ca 01       	movw	r24, r20
     bae:	08 95       	ret

00000bb0 <delay>:

void delay(unsigned long ms)
{
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	7b 01       	movw	r14, r22
     bbe:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     bc0:	0e 94 b2 05 	call	0xb64	; 0xb64 <micros>
     bc4:	eb 01       	movw	r28, r22

	while (ms > 0) {
     bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     bc8:	0e 94 b2 05 	call	0xb64	; 0xb64 <micros>
     bcc:	6c 1b       	sub	r22, r28
     bce:	7d 0b       	sbc	r23, r29
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	68 3e       	cpi	r22, 0xE8	; 232
     bd4:	78 07       	cpc	r23, r24
     bd6:	38 f0       	brcs	.+14     	; 0xbe6 <delay+0x36>
			ms--;
     bd8:	08 94       	sec
     bda:	e1 08       	sbc	r14, r1
     bdc:	f1 08       	sbc	r15, r1
     bde:	01 09       	sbc	r16, r1
     be0:	11 09       	sbc	r17, r1
			start += 1000;
     be2:	c8 51       	subi	r28, 0x18	; 24
     be4:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     be6:	e1 14       	cp	r14, r1
     be8:	f1 04       	cpc	r15, r1
     bea:	01 05       	cpc	r16, r1
     bec:	11 05       	cpc	r17, r1
     bee:	61 f7       	brne	.-40     	; 0xbc8 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     bfe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     c00:	84 b5       	in	r24, 0x24	; 36
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     c06:	84 b5       	in	r24, 0x24	; 36
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     c0c:	85 b5       	in	r24, 0x25	; 37
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     c12:	85 b5       	in	r24, 0x25	; 37
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     c18:	ee e6       	ldi	r30, 0x6E	; 110
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     c22:	e1 e8       	ldi	r30, 0x81	; 129
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     c28:	80 81       	ld	r24, Z
     c2a:	82 60       	ori	r24, 0x02	; 2
     c2c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     c2e:	80 81       	ld	r24, Z
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     c34:	e0 e8       	ldi	r30, 0x80	; 128
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     c3e:	e1 eb       	ldi	r30, 0xB1	; 177
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	84 60       	ori	r24, 0x04	; 4
     c46:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     c48:	e0 eb       	ldi	r30, 0xB0	; 176
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     c52:	ea e7       	ldi	r30, 0x7A	; 122
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	84 60       	ori	r24, 0x04	; 4
     c5a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     c5c:	80 81       	ld	r24, Z
     c5e:	82 60       	ori	r24, 0x02	; 2
     c60:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     c62:	80 81       	ld	r24, Z
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     c68:	80 81       	ld	r24, Z
     c6a:	80 68       	ori	r24, 0x80	; 128
     c6c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     c6e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     c72:	08 95       	ret

00000c74 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     c74:	8e 30       	cpi	r24, 0x0E	; 14
     c76:	08 f0       	brcs	.+2      	; 0xc7a <analogRead+0x6>
     c78:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     c7a:	87 70       	andi	r24, 0x07	; 7
     c7c:	90 91 4c 01 	lds	r25, 0x014C
     c80:	92 95       	swap	r25
     c82:	99 0f       	add	r25, r25
     c84:	99 0f       	add	r25, r25
     c86:	90 7c       	andi	r25, 0xC0	; 192
     c88:	98 2b       	or	r25, r24
     c8a:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     c8e:	80 91 7a 00 	lds	r24, 0x007A
     c92:	80 64       	ori	r24, 0x40	; 64
     c94:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     c98:	80 91 7a 00 	lds	r24, 0x007A
     c9c:	86 fd       	sbrc	r24, 6
     c9e:	fc cf       	rjmp	.-8      	; 0xc98 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     ca0:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     ca4:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     ca8:	93 2f       	mov	r25, r19
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	28 2b       	or	r18, r24
     cb0:	39 2b       	or	r19, r25
}
     cb2:	c9 01       	movw	r24, r18
     cb4:	08 95       	ret

00000cb6 <__subsf3>:
     cb6:	50 58       	subi	r21, 0x80	; 128

00000cb8 <__addsf3>:
     cb8:	bb 27       	eor	r27, r27
     cba:	aa 27       	eor	r26, r26
     cbc:	0e d0       	rcall	.+28     	; 0xcda <__addsf3x>
     cbe:	75 c1       	rjmp	.+746    	; 0xfaa <__fp_round>
     cc0:	66 d1       	rcall	.+716    	; 0xf8e <__fp_pscA>
     cc2:	30 f0       	brcs	.+12     	; 0xcd0 <__addsf3+0x18>
     cc4:	6b d1       	rcall	.+726    	; 0xf9c <__fp_pscB>
     cc6:	20 f0       	brcs	.+8      	; 0xcd0 <__addsf3+0x18>
     cc8:	31 f4       	brne	.+12     	; 0xcd6 <__addsf3+0x1e>
     cca:	9f 3f       	cpi	r25, 0xFF	; 255
     ccc:	11 f4       	brne	.+4      	; 0xcd2 <__addsf3+0x1a>
     cce:	1e f4       	brtc	.+6      	; 0xcd6 <__addsf3+0x1e>
     cd0:	5b c1       	rjmp	.+694    	; 0xf88 <__fp_nan>
     cd2:	0e f4       	brtc	.+2      	; 0xcd6 <__addsf3+0x1e>
     cd4:	e0 95       	com	r30
     cd6:	e7 fb       	bst	r30, 7
     cd8:	51 c1       	rjmp	.+674    	; 0xf7c <__fp_inf>

00000cda <__addsf3x>:
     cda:	e9 2f       	mov	r30, r25
     cdc:	77 d1       	rcall	.+750    	; 0xfcc <__fp_split3>
     cde:	80 f3       	brcs	.-32     	; 0xcc0 <__addsf3+0x8>
     ce0:	ba 17       	cp	r27, r26
     ce2:	62 07       	cpc	r22, r18
     ce4:	73 07       	cpc	r23, r19
     ce6:	84 07       	cpc	r24, r20
     ce8:	95 07       	cpc	r25, r21
     cea:	18 f0       	brcs	.+6      	; 0xcf2 <__addsf3x+0x18>
     cec:	71 f4       	brne	.+28     	; 0xd0a <__addsf3x+0x30>
     cee:	9e f5       	brtc	.+102    	; 0xd56 <__addsf3x+0x7c>
     cf0:	8f c1       	rjmp	.+798    	; 0x1010 <__fp_zero>
     cf2:	0e f4       	brtc	.+2      	; 0xcf6 <__addsf3x+0x1c>
     cf4:	e0 95       	com	r30
     cf6:	0b 2e       	mov	r0, r27
     cf8:	ba 2f       	mov	r27, r26
     cfa:	a0 2d       	mov	r26, r0
     cfc:	0b 01       	movw	r0, r22
     cfe:	b9 01       	movw	r22, r18
     d00:	90 01       	movw	r18, r0
     d02:	0c 01       	movw	r0, r24
     d04:	ca 01       	movw	r24, r20
     d06:	a0 01       	movw	r20, r0
     d08:	11 24       	eor	r1, r1
     d0a:	ff 27       	eor	r31, r31
     d0c:	59 1b       	sub	r21, r25
     d0e:	99 f0       	breq	.+38     	; 0xd36 <__addsf3x+0x5c>
     d10:	59 3f       	cpi	r21, 0xF9	; 249
     d12:	50 f4       	brcc	.+20     	; 0xd28 <__addsf3x+0x4e>
     d14:	50 3e       	cpi	r21, 0xE0	; 224
     d16:	68 f1       	brcs	.+90     	; 0xd72 <__addsf3x+0x98>
     d18:	1a 16       	cp	r1, r26
     d1a:	f0 40       	sbci	r31, 0x00	; 0
     d1c:	a2 2f       	mov	r26, r18
     d1e:	23 2f       	mov	r18, r19
     d20:	34 2f       	mov	r19, r20
     d22:	44 27       	eor	r20, r20
     d24:	58 5f       	subi	r21, 0xF8	; 248
     d26:	f3 cf       	rjmp	.-26     	; 0xd0e <__addsf3x+0x34>
     d28:	46 95       	lsr	r20
     d2a:	37 95       	ror	r19
     d2c:	27 95       	ror	r18
     d2e:	a7 95       	ror	r26
     d30:	f0 40       	sbci	r31, 0x00	; 0
     d32:	53 95       	inc	r21
     d34:	c9 f7       	brne	.-14     	; 0xd28 <__addsf3x+0x4e>
     d36:	7e f4       	brtc	.+30     	; 0xd56 <__addsf3x+0x7c>
     d38:	1f 16       	cp	r1, r31
     d3a:	ba 0b       	sbc	r27, r26
     d3c:	62 0b       	sbc	r22, r18
     d3e:	73 0b       	sbc	r23, r19
     d40:	84 0b       	sbc	r24, r20
     d42:	ba f0       	brmi	.+46     	; 0xd72 <__addsf3x+0x98>
     d44:	91 50       	subi	r25, 0x01	; 1
     d46:	a1 f0       	breq	.+40     	; 0xd70 <__addsf3x+0x96>
     d48:	ff 0f       	add	r31, r31
     d4a:	bb 1f       	adc	r27, r27
     d4c:	66 1f       	adc	r22, r22
     d4e:	77 1f       	adc	r23, r23
     d50:	88 1f       	adc	r24, r24
     d52:	c2 f7       	brpl	.-16     	; 0xd44 <__addsf3x+0x6a>
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <__addsf3x+0x98>
     d56:	ba 0f       	add	r27, r26
     d58:	62 1f       	adc	r22, r18
     d5a:	73 1f       	adc	r23, r19
     d5c:	84 1f       	adc	r24, r20
     d5e:	48 f4       	brcc	.+18     	; 0xd72 <__addsf3x+0x98>
     d60:	87 95       	ror	r24
     d62:	77 95       	ror	r23
     d64:	67 95       	ror	r22
     d66:	b7 95       	ror	r27
     d68:	f7 95       	ror	r31
     d6a:	9e 3f       	cpi	r25, 0xFE	; 254
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <__addsf3x+0x96>
     d6e:	b3 cf       	rjmp	.-154    	; 0xcd6 <__addsf3+0x1e>
     d70:	93 95       	inc	r25
     d72:	88 0f       	add	r24, r24
     d74:	08 f0       	brcs	.+2      	; 0xd78 <__addsf3x+0x9e>
     d76:	99 27       	eor	r25, r25
     d78:	ee 0f       	add	r30, r30
     d7a:	97 95       	ror	r25
     d7c:	87 95       	ror	r24
     d7e:	08 95       	ret

00000d80 <__cmpsf2>:
     d80:	d9 d0       	rcall	.+434    	; 0xf34 <__fp_cmp>
     d82:	08 f4       	brcc	.+2      	; 0xd86 <__cmpsf2+0x6>
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	08 95       	ret

00000d88 <__divsf3>:
     d88:	0c d0       	rcall	.+24     	; 0xda2 <__divsf3x>
     d8a:	0f c1       	rjmp	.+542    	; 0xfaa <__fp_round>
     d8c:	07 d1       	rcall	.+526    	; 0xf9c <__fp_pscB>
     d8e:	40 f0       	brcs	.+16     	; 0xda0 <__divsf3+0x18>
     d90:	fe d0       	rcall	.+508    	; 0xf8e <__fp_pscA>
     d92:	30 f0       	brcs	.+12     	; 0xda0 <__divsf3+0x18>
     d94:	21 f4       	brne	.+8      	; 0xd9e <__divsf3+0x16>
     d96:	5f 3f       	cpi	r21, 0xFF	; 255
     d98:	19 f0       	breq	.+6      	; 0xda0 <__divsf3+0x18>
     d9a:	f0 c0       	rjmp	.+480    	; 0xf7c <__fp_inf>
     d9c:	51 11       	cpse	r21, r1
     d9e:	39 c1       	rjmp	.+626    	; 0x1012 <__fp_szero>
     da0:	f3 c0       	rjmp	.+486    	; 0xf88 <__fp_nan>

00000da2 <__divsf3x>:
     da2:	14 d1       	rcall	.+552    	; 0xfcc <__fp_split3>
     da4:	98 f3       	brcs	.-26     	; 0xd8c <__divsf3+0x4>

00000da6 <__divsf3_pse>:
     da6:	99 23       	and	r25, r25
     da8:	c9 f3       	breq	.-14     	; 0xd9c <__divsf3+0x14>
     daa:	55 23       	and	r21, r21
     dac:	b1 f3       	breq	.-20     	; 0xd9a <__divsf3+0x12>
     dae:	95 1b       	sub	r25, r21
     db0:	55 0b       	sbc	r21, r21
     db2:	bb 27       	eor	r27, r27
     db4:	aa 27       	eor	r26, r26
     db6:	62 17       	cp	r22, r18
     db8:	73 07       	cpc	r23, r19
     dba:	84 07       	cpc	r24, r20
     dbc:	38 f0       	brcs	.+14     	; 0xdcc <__divsf3_pse+0x26>
     dbe:	9f 5f       	subi	r25, 0xFF	; 255
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
     dc2:	22 0f       	add	r18, r18
     dc4:	33 1f       	adc	r19, r19
     dc6:	44 1f       	adc	r20, r20
     dc8:	aa 1f       	adc	r26, r26
     dca:	a9 f3       	breq	.-22     	; 0xdb6 <__divsf3_pse+0x10>
     dcc:	33 d0       	rcall	.+102    	; 0xe34 <__divsf3_pse+0x8e>
     dce:	0e 2e       	mov	r0, r30
     dd0:	3a f0       	brmi	.+14     	; 0xde0 <__divsf3_pse+0x3a>
     dd2:	e0 e8       	ldi	r30, 0x80	; 128
     dd4:	30 d0       	rcall	.+96     	; 0xe36 <__divsf3_pse+0x90>
     dd6:	91 50       	subi	r25, 0x01	; 1
     dd8:	50 40       	sbci	r21, 0x00	; 0
     dda:	e6 95       	lsr	r30
     ddc:	00 1c       	adc	r0, r0
     dde:	ca f7       	brpl	.-14     	; 0xdd2 <__divsf3_pse+0x2c>
     de0:	29 d0       	rcall	.+82     	; 0xe34 <__divsf3_pse+0x8e>
     de2:	fe 2f       	mov	r31, r30
     de4:	27 d0       	rcall	.+78     	; 0xe34 <__divsf3_pse+0x8e>
     de6:	66 0f       	add	r22, r22
     de8:	77 1f       	adc	r23, r23
     dea:	88 1f       	adc	r24, r24
     dec:	bb 1f       	adc	r27, r27
     dee:	26 17       	cp	r18, r22
     df0:	37 07       	cpc	r19, r23
     df2:	48 07       	cpc	r20, r24
     df4:	ab 07       	cpc	r26, r27
     df6:	b0 e8       	ldi	r27, 0x80	; 128
     df8:	09 f0       	breq	.+2      	; 0xdfc <__divsf3_pse+0x56>
     dfa:	bb 0b       	sbc	r27, r27
     dfc:	80 2d       	mov	r24, r0
     dfe:	bf 01       	movw	r22, r30
     e00:	ff 27       	eor	r31, r31
     e02:	93 58       	subi	r25, 0x83	; 131
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	2a f0       	brmi	.+10     	; 0xe12 <__divsf3_pse+0x6c>
     e08:	9e 3f       	cpi	r25, 0xFE	; 254
     e0a:	51 05       	cpc	r21, r1
     e0c:	68 f0       	brcs	.+26     	; 0xe28 <__divsf3_pse+0x82>
     e0e:	b6 c0       	rjmp	.+364    	; 0xf7c <__fp_inf>
     e10:	00 c1       	rjmp	.+512    	; 0x1012 <__fp_szero>
     e12:	5f 3f       	cpi	r21, 0xFF	; 255
     e14:	ec f3       	brlt	.-6      	; 0xe10 <__divsf3_pse+0x6a>
     e16:	98 3e       	cpi	r25, 0xE8	; 232
     e18:	dc f3       	brlt	.-10     	; 0xe10 <__divsf3_pse+0x6a>
     e1a:	86 95       	lsr	r24
     e1c:	77 95       	ror	r23
     e1e:	67 95       	ror	r22
     e20:	b7 95       	ror	r27
     e22:	f7 95       	ror	r31
     e24:	9f 5f       	subi	r25, 0xFF	; 255
     e26:	c9 f7       	brne	.-14     	; 0xe1a <__divsf3_pse+0x74>
     e28:	88 0f       	add	r24, r24
     e2a:	91 1d       	adc	r25, r1
     e2c:	96 95       	lsr	r25
     e2e:	87 95       	ror	r24
     e30:	97 f9       	bld	r25, 7
     e32:	08 95       	ret
     e34:	e1 e0       	ldi	r30, 0x01	; 1
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	bb 1f       	adc	r27, r27
     e3e:	62 17       	cp	r22, r18
     e40:	73 07       	cpc	r23, r19
     e42:	84 07       	cpc	r24, r20
     e44:	ba 07       	cpc	r27, r26
     e46:	20 f0       	brcs	.+8      	; 0xe50 <__divsf3_pse+0xaa>
     e48:	62 1b       	sub	r22, r18
     e4a:	73 0b       	sbc	r23, r19
     e4c:	84 0b       	sbc	r24, r20
     e4e:	ba 0b       	sbc	r27, r26
     e50:	ee 1f       	adc	r30, r30
     e52:	88 f7       	brcc	.-30     	; 0xe36 <__divsf3_pse+0x90>
     e54:	e0 95       	com	r30
     e56:	08 95       	ret

00000e58 <__fixsfsi>:
     e58:	04 d0       	rcall	.+8      	; 0xe62 <__fixunssfsi>
     e5a:	68 94       	set
     e5c:	b1 11       	cpse	r27, r1
     e5e:	d9 c0       	rjmp	.+434    	; 0x1012 <__fp_szero>
     e60:	08 95       	ret

00000e62 <__fixunssfsi>:
     e62:	bc d0       	rcall	.+376    	; 0xfdc <__fp_splitA>
     e64:	88 f0       	brcs	.+34     	; 0xe88 <__fixunssfsi+0x26>
     e66:	9f 57       	subi	r25, 0x7F	; 127
     e68:	90 f0       	brcs	.+36     	; 0xe8e <__fixunssfsi+0x2c>
     e6a:	b9 2f       	mov	r27, r25
     e6c:	99 27       	eor	r25, r25
     e6e:	b7 51       	subi	r27, 0x17	; 23
     e70:	a0 f0       	brcs	.+40     	; 0xe9a <__fixunssfsi+0x38>
     e72:	d1 f0       	breq	.+52     	; 0xea8 <__fixunssfsi+0x46>
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	88 1f       	adc	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	1a f0       	brmi	.+6      	; 0xe84 <__fixunssfsi+0x22>
     e7e:	ba 95       	dec	r27
     e80:	c9 f7       	brne	.-14     	; 0xe74 <__fixunssfsi+0x12>
     e82:	12 c0       	rjmp	.+36     	; 0xea8 <__fixunssfsi+0x46>
     e84:	b1 30       	cpi	r27, 0x01	; 1
     e86:	81 f0       	breq	.+32     	; 0xea8 <__fixunssfsi+0x46>
     e88:	c3 d0       	rcall	.+390    	; 0x1010 <__fp_zero>
     e8a:	b1 e0       	ldi	r27, 0x01	; 1
     e8c:	08 95       	ret
     e8e:	c0 c0       	rjmp	.+384    	; 0x1010 <__fp_zero>
     e90:	67 2f       	mov	r22, r23
     e92:	78 2f       	mov	r23, r24
     e94:	88 27       	eor	r24, r24
     e96:	b8 5f       	subi	r27, 0xF8	; 248
     e98:	39 f0       	breq	.+14     	; 0xea8 <__fixunssfsi+0x46>
     e9a:	b9 3f       	cpi	r27, 0xF9	; 249
     e9c:	cc f3       	brlt	.-14     	; 0xe90 <__fixunssfsi+0x2e>
     e9e:	86 95       	lsr	r24
     ea0:	77 95       	ror	r23
     ea2:	67 95       	ror	r22
     ea4:	b3 95       	inc	r27
     ea6:	d9 f7       	brne	.-10     	; 0xe9e <__fixunssfsi+0x3c>
     ea8:	3e f4       	brtc	.+14     	; 0xeb8 <__fixunssfsi+0x56>
     eaa:	90 95       	com	r25
     eac:	80 95       	com	r24
     eae:	70 95       	com	r23
     eb0:	61 95       	neg	r22
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	8f 4f       	sbci	r24, 0xFF	; 255
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	08 95       	ret

00000eba <__floatunsisf>:
     eba:	e8 94       	clt
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <__floatsisf+0x12>

00000ebe <__floatsisf>:
     ebe:	97 fb       	bst	r25, 7
     ec0:	3e f4       	brtc	.+14     	; 0xed0 <__floatsisf+0x12>
     ec2:	90 95       	com	r25
     ec4:	80 95       	com	r24
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	99 23       	and	r25, r25
     ed2:	a9 f0       	breq	.+42     	; 0xefe <__floatsisf+0x40>
     ed4:	f9 2f       	mov	r31, r25
     ed6:	96 e9       	ldi	r25, 0x96	; 150
     ed8:	bb 27       	eor	r27, r27
     eda:	93 95       	inc	r25
     edc:	f6 95       	lsr	r31
     ede:	87 95       	ror	r24
     ee0:	77 95       	ror	r23
     ee2:	67 95       	ror	r22
     ee4:	b7 95       	ror	r27
     ee6:	f1 11       	cpse	r31, r1
     ee8:	f8 cf       	rjmp	.-16     	; 0xeda <__floatsisf+0x1c>
     eea:	fa f4       	brpl	.+62     	; 0xf2a <__floatsisf+0x6c>
     eec:	bb 0f       	add	r27, r27
     eee:	11 f4       	brne	.+4      	; 0xef4 <__floatsisf+0x36>
     ef0:	60 ff       	sbrs	r22, 0
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <__floatsisf+0x6c>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <__floatsisf+0x6c>
     efe:	88 23       	and	r24, r24
     f00:	11 f0       	breq	.+4      	; 0xf06 <__floatsisf+0x48>
     f02:	96 e9       	ldi	r25, 0x96	; 150
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <__floatsisf+0x6a>
     f06:	77 23       	and	r23, r23
     f08:	21 f0       	breq	.+8      	; 0xf12 <__floatsisf+0x54>
     f0a:	9e e8       	ldi	r25, 0x8E	; 142
     f0c:	87 2f       	mov	r24, r23
     f0e:	76 2f       	mov	r23, r22
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <__floatsisf+0x5e>
     f12:	66 23       	and	r22, r22
     f14:	71 f0       	breq	.+28     	; 0xf32 <__floatsisf+0x74>
     f16:	96 e8       	ldi	r25, 0x86	; 134
     f18:	86 2f       	mov	r24, r22
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	2a f0       	brmi	.+10     	; 0xf2a <__floatsisf+0x6c>
     f20:	9a 95       	dec	r25
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	88 1f       	adc	r24, r24
     f28:	da f7       	brpl	.-10     	; 0xf20 <__floatsisf+0x62>
     f2a:	88 0f       	add	r24, r24
     f2c:	96 95       	lsr	r25
     f2e:	87 95       	ror	r24
     f30:	97 f9       	bld	r25, 7
     f32:	08 95       	ret

00000f34 <__fp_cmp>:
     f34:	99 0f       	add	r25, r25
     f36:	00 08       	sbc	r0, r0
     f38:	55 0f       	add	r21, r21
     f3a:	aa 0b       	sbc	r26, r26
     f3c:	e0 e8       	ldi	r30, 0x80	; 128
     f3e:	fe ef       	ldi	r31, 0xFE	; 254
     f40:	16 16       	cp	r1, r22
     f42:	17 06       	cpc	r1, r23
     f44:	e8 07       	cpc	r30, r24
     f46:	f9 07       	cpc	r31, r25
     f48:	c0 f0       	brcs	.+48     	; 0xf7a <__fp_cmp+0x46>
     f4a:	12 16       	cp	r1, r18
     f4c:	13 06       	cpc	r1, r19
     f4e:	e4 07       	cpc	r30, r20
     f50:	f5 07       	cpc	r31, r21
     f52:	98 f0       	brcs	.+38     	; 0xf7a <__fp_cmp+0x46>
     f54:	62 1b       	sub	r22, r18
     f56:	73 0b       	sbc	r23, r19
     f58:	84 0b       	sbc	r24, r20
     f5a:	95 0b       	sbc	r25, r21
     f5c:	39 f4       	brne	.+14     	; 0xf6c <__fp_cmp+0x38>
     f5e:	0a 26       	eor	r0, r26
     f60:	61 f0       	breq	.+24     	; 0xf7a <__fp_cmp+0x46>
     f62:	23 2b       	or	r18, r19
     f64:	24 2b       	or	r18, r20
     f66:	25 2b       	or	r18, r21
     f68:	21 f4       	brne	.+8      	; 0xf72 <__fp_cmp+0x3e>
     f6a:	08 95       	ret
     f6c:	0a 26       	eor	r0, r26
     f6e:	09 f4       	brne	.+2      	; 0xf72 <__fp_cmp+0x3e>
     f70:	a1 40       	sbci	r26, 0x01	; 1
     f72:	a6 95       	lsr	r26
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	81 1d       	adc	r24, r1
     f78:	81 1d       	adc	r24, r1
     f7a:	08 95       	ret

00000f7c <__fp_inf>:
     f7c:	97 f9       	bld	r25, 7
     f7e:	9f 67       	ori	r25, 0x7F	; 127
     f80:	80 e8       	ldi	r24, 0x80	; 128
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	08 95       	ret

00000f88 <__fp_nan>:
     f88:	9f ef       	ldi	r25, 0xFF	; 255
     f8a:	80 ec       	ldi	r24, 0xC0	; 192
     f8c:	08 95       	ret

00000f8e <__fp_pscA>:
     f8e:	00 24       	eor	r0, r0
     f90:	0a 94       	dec	r0
     f92:	16 16       	cp	r1, r22
     f94:	17 06       	cpc	r1, r23
     f96:	18 06       	cpc	r1, r24
     f98:	09 06       	cpc	r0, r25
     f9a:	08 95       	ret

00000f9c <__fp_pscB>:
     f9c:	00 24       	eor	r0, r0
     f9e:	0a 94       	dec	r0
     fa0:	12 16       	cp	r1, r18
     fa2:	13 06       	cpc	r1, r19
     fa4:	14 06       	cpc	r1, r20
     fa6:	05 06       	cpc	r0, r21
     fa8:	08 95       	ret

00000faa <__fp_round>:
     faa:	09 2e       	mov	r0, r25
     fac:	03 94       	inc	r0
     fae:	00 0c       	add	r0, r0
     fb0:	11 f4       	brne	.+4      	; 0xfb6 <__fp_round+0xc>
     fb2:	88 23       	and	r24, r24
     fb4:	52 f0       	brmi	.+20     	; 0xfca <__fp_round+0x20>
     fb6:	bb 0f       	add	r27, r27
     fb8:	40 f4       	brcc	.+16     	; 0xfca <__fp_round+0x20>
     fba:	bf 2b       	or	r27, r31
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <__fp_round+0x18>
     fbe:	60 ff       	sbrs	r22, 0
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__fp_round+0x20>
     fc2:	6f 5f       	subi	r22, 0xFF	; 255
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	08 95       	ret

00000fcc <__fp_split3>:
     fcc:	57 fd       	sbrc	r21, 7
     fce:	90 58       	subi	r25, 0x80	; 128
     fd0:	44 0f       	add	r20, r20
     fd2:	55 1f       	adc	r21, r21
     fd4:	59 f0       	breq	.+22     	; 0xfec <__fp_splitA+0x10>
     fd6:	5f 3f       	cpi	r21, 0xFF	; 255
     fd8:	71 f0       	breq	.+28     	; 0xff6 <__fp_splitA+0x1a>
     fda:	47 95       	ror	r20

00000fdc <__fp_splitA>:
     fdc:	88 0f       	add	r24, r24
     fde:	97 fb       	bst	r25, 7
     fe0:	99 1f       	adc	r25, r25
     fe2:	61 f0       	breq	.+24     	; 0xffc <__fp_splitA+0x20>
     fe4:	9f 3f       	cpi	r25, 0xFF	; 255
     fe6:	79 f0       	breq	.+30     	; 0x1006 <__fp_splitA+0x2a>
     fe8:	87 95       	ror	r24
     fea:	08 95       	ret
     fec:	12 16       	cp	r1, r18
     fee:	13 06       	cpc	r1, r19
     ff0:	14 06       	cpc	r1, r20
     ff2:	55 1f       	adc	r21, r21
     ff4:	f2 cf       	rjmp	.-28     	; 0xfda <__fp_split3+0xe>
     ff6:	46 95       	lsr	r20
     ff8:	f1 df       	rcall	.-30     	; 0xfdc <__fp_splitA>
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <__fp_splitA+0x30>
     ffc:	16 16       	cp	r1, r22
     ffe:	17 06       	cpc	r1, r23
    1000:	18 06       	cpc	r1, r24
    1002:	99 1f       	adc	r25, r25
    1004:	f1 cf       	rjmp	.-30     	; 0xfe8 <__fp_splitA+0xc>
    1006:	86 95       	lsr	r24
    1008:	71 05       	cpc	r23, r1
    100a:	61 05       	cpc	r22, r1
    100c:	08 94       	sec
    100e:	08 95       	ret

00001010 <__fp_zero>:
    1010:	e8 94       	clt

00001012 <__fp_szero>:
    1012:	bb 27       	eor	r27, r27
    1014:	66 27       	eor	r22, r22
    1016:	77 27       	eor	r23, r23
    1018:	cb 01       	movw	r24, r22
    101a:	97 f9       	bld	r25, 7
    101c:	08 95       	ret

0000101e <__mulsf3>:
    101e:	0b d0       	rcall	.+22     	; 0x1036 <__mulsf3x>
    1020:	c4 cf       	rjmp	.-120    	; 0xfaa <__fp_round>
    1022:	b5 df       	rcall	.-150    	; 0xf8e <__fp_pscA>
    1024:	28 f0       	brcs	.+10     	; 0x1030 <__mulsf3+0x12>
    1026:	ba df       	rcall	.-140    	; 0xf9c <__fp_pscB>
    1028:	18 f0       	brcs	.+6      	; 0x1030 <__mulsf3+0x12>
    102a:	95 23       	and	r25, r21
    102c:	09 f0       	breq	.+2      	; 0x1030 <__mulsf3+0x12>
    102e:	a6 cf       	rjmp	.-180    	; 0xf7c <__fp_inf>
    1030:	ab cf       	rjmp	.-170    	; 0xf88 <__fp_nan>
    1032:	11 24       	eor	r1, r1
    1034:	ee cf       	rjmp	.-36     	; 0x1012 <__fp_szero>

00001036 <__mulsf3x>:
    1036:	ca df       	rcall	.-108    	; 0xfcc <__fp_split3>
    1038:	a0 f3       	brcs	.-24     	; 0x1022 <__mulsf3+0x4>

0000103a <__mulsf3_pse>:
    103a:	95 9f       	mul	r25, r21
    103c:	d1 f3       	breq	.-12     	; 0x1032 <__mulsf3+0x14>
    103e:	95 0f       	add	r25, r21
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	55 1f       	adc	r21, r21
    1044:	62 9f       	mul	r22, r18
    1046:	f0 01       	movw	r30, r0
    1048:	72 9f       	mul	r23, r18
    104a:	bb 27       	eor	r27, r27
    104c:	f0 0d       	add	r31, r0
    104e:	b1 1d       	adc	r27, r1
    1050:	63 9f       	mul	r22, r19
    1052:	aa 27       	eor	r26, r26
    1054:	f0 0d       	add	r31, r0
    1056:	b1 1d       	adc	r27, r1
    1058:	aa 1f       	adc	r26, r26
    105a:	64 9f       	mul	r22, r20
    105c:	66 27       	eor	r22, r22
    105e:	b0 0d       	add	r27, r0
    1060:	a1 1d       	adc	r26, r1
    1062:	66 1f       	adc	r22, r22
    1064:	82 9f       	mul	r24, r18
    1066:	22 27       	eor	r18, r18
    1068:	b0 0d       	add	r27, r0
    106a:	a1 1d       	adc	r26, r1
    106c:	62 1f       	adc	r22, r18
    106e:	73 9f       	mul	r23, r19
    1070:	b0 0d       	add	r27, r0
    1072:	a1 1d       	adc	r26, r1
    1074:	62 1f       	adc	r22, r18
    1076:	83 9f       	mul	r24, r19
    1078:	a0 0d       	add	r26, r0
    107a:	61 1d       	adc	r22, r1
    107c:	22 1f       	adc	r18, r18
    107e:	74 9f       	mul	r23, r20
    1080:	33 27       	eor	r19, r19
    1082:	a0 0d       	add	r26, r0
    1084:	61 1d       	adc	r22, r1
    1086:	23 1f       	adc	r18, r19
    1088:	84 9f       	mul	r24, r20
    108a:	60 0d       	add	r22, r0
    108c:	21 1d       	adc	r18, r1
    108e:	82 2f       	mov	r24, r18
    1090:	76 2f       	mov	r23, r22
    1092:	6a 2f       	mov	r22, r26
    1094:	11 24       	eor	r1, r1
    1096:	9f 57       	subi	r25, 0x7F	; 127
    1098:	50 40       	sbci	r21, 0x00	; 0
    109a:	8a f0       	brmi	.+34     	; 0x10be <__mulsf3_pse+0x84>
    109c:	e1 f0       	breq	.+56     	; 0x10d6 <__mulsf3_pse+0x9c>
    109e:	88 23       	and	r24, r24
    10a0:	4a f0       	brmi	.+18     	; 0x10b4 <__mulsf3_pse+0x7a>
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	bb 1f       	adc	r27, r27
    10a8:	66 1f       	adc	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	91 50       	subi	r25, 0x01	; 1
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	a9 f7       	brne	.-22     	; 0x109e <__mulsf3_pse+0x64>
    10b4:	9e 3f       	cpi	r25, 0xFE	; 254
    10b6:	51 05       	cpc	r21, r1
    10b8:	70 f0       	brcs	.+28     	; 0x10d6 <__mulsf3_pse+0x9c>
    10ba:	60 cf       	rjmp	.-320    	; 0xf7c <__fp_inf>
    10bc:	aa cf       	rjmp	.-172    	; 0x1012 <__fp_szero>
    10be:	5f 3f       	cpi	r21, 0xFF	; 255
    10c0:	ec f3       	brlt	.-6      	; 0x10bc <__mulsf3_pse+0x82>
    10c2:	98 3e       	cpi	r25, 0xE8	; 232
    10c4:	dc f3       	brlt	.-10     	; 0x10bc <__mulsf3_pse+0x82>
    10c6:	86 95       	lsr	r24
    10c8:	77 95       	ror	r23
    10ca:	67 95       	ror	r22
    10cc:	b7 95       	ror	r27
    10ce:	f7 95       	ror	r31
    10d0:	e7 95       	ror	r30
    10d2:	9f 5f       	subi	r25, 0xFF	; 255
    10d4:	c1 f7       	brne	.-16     	; 0x10c6 <__mulsf3_pse+0x8c>
    10d6:	fe 2b       	or	r31, r30
    10d8:	88 0f       	add	r24, r24
    10da:	91 1d       	adc	r25, r1
    10dc:	96 95       	lsr	r25
    10de:	87 95       	ror	r24
    10e0:	97 f9       	bld	r25, 7
    10e2:	08 95       	ret

000010e4 <__mulsi3>:
    10e4:	62 9f       	mul	r22, r18
    10e6:	d0 01       	movw	r26, r0
    10e8:	73 9f       	mul	r23, r19
    10ea:	f0 01       	movw	r30, r0
    10ec:	82 9f       	mul	r24, r18
    10ee:	e0 0d       	add	r30, r0
    10f0:	f1 1d       	adc	r31, r1
    10f2:	64 9f       	mul	r22, r20
    10f4:	e0 0d       	add	r30, r0
    10f6:	f1 1d       	adc	r31, r1
    10f8:	92 9f       	mul	r25, r18
    10fa:	f0 0d       	add	r31, r0
    10fc:	83 9f       	mul	r24, r19
    10fe:	f0 0d       	add	r31, r0
    1100:	74 9f       	mul	r23, r20
    1102:	f0 0d       	add	r31, r0
    1104:	65 9f       	mul	r22, r21
    1106:	f0 0d       	add	r31, r0
    1108:	99 27       	eor	r25, r25
    110a:	72 9f       	mul	r23, r18
    110c:	b0 0d       	add	r27, r0
    110e:	e1 1d       	adc	r30, r1
    1110:	f9 1f       	adc	r31, r25
    1112:	63 9f       	mul	r22, r19
    1114:	b0 0d       	add	r27, r0
    1116:	e1 1d       	adc	r30, r1
    1118:	f9 1f       	adc	r31, r25
    111a:	bd 01       	movw	r22, r26
    111c:	cf 01       	movw	r24, r30
    111e:	11 24       	eor	r1, r1
    1120:	08 95       	ret

00001122 <__divmodhi4>:
    1122:	97 fb       	bst	r25, 7
    1124:	09 2e       	mov	r0, r25
    1126:	07 26       	eor	r0, r23
    1128:	0a d0       	rcall	.+20     	; 0x113e <__divmodhi4_neg1>
    112a:	77 fd       	sbrc	r23, 7
    112c:	04 d0       	rcall	.+8      	; 0x1136 <__divmodhi4_neg2>
    112e:	49 d0       	rcall	.+146    	; 0x11c2 <__udivmodhi4>
    1130:	06 d0       	rcall	.+12     	; 0x113e <__divmodhi4_neg1>
    1132:	00 20       	and	r0, r0
    1134:	1a f4       	brpl	.+6      	; 0x113c <__divmodhi4_exit>

00001136 <__divmodhi4_neg2>:
    1136:	70 95       	com	r23
    1138:	61 95       	neg	r22
    113a:	7f 4f       	sbci	r23, 0xFF	; 255

0000113c <__divmodhi4_exit>:
    113c:	08 95       	ret

0000113e <__divmodhi4_neg1>:
    113e:	f6 f7       	brtc	.-4      	; 0x113c <__divmodhi4_exit>
    1140:	90 95       	com	r25
    1142:	81 95       	neg	r24
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	08 95       	ret

00001148 <__udivmodsi4>:
    1148:	a1 e2       	ldi	r26, 0x21	; 33
    114a:	1a 2e       	mov	r1, r26
    114c:	aa 1b       	sub	r26, r26
    114e:	bb 1b       	sub	r27, r27
    1150:	fd 01       	movw	r30, r26
    1152:	0d c0       	rjmp	.+26     	; 0x116e <__udivmodsi4_ep>

00001154 <__udivmodsi4_loop>:
    1154:	aa 1f       	adc	r26, r26
    1156:	bb 1f       	adc	r27, r27
    1158:	ee 1f       	adc	r30, r30
    115a:	ff 1f       	adc	r31, r31
    115c:	a2 17       	cp	r26, r18
    115e:	b3 07       	cpc	r27, r19
    1160:	e4 07       	cpc	r30, r20
    1162:	f5 07       	cpc	r31, r21
    1164:	20 f0       	brcs	.+8      	; 0x116e <__udivmodsi4_ep>
    1166:	a2 1b       	sub	r26, r18
    1168:	b3 0b       	sbc	r27, r19
    116a:	e4 0b       	sbc	r30, r20
    116c:	f5 0b       	sbc	r31, r21

0000116e <__udivmodsi4_ep>:
    116e:	66 1f       	adc	r22, r22
    1170:	77 1f       	adc	r23, r23
    1172:	88 1f       	adc	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	1a 94       	dec	r1
    1178:	69 f7       	brne	.-38     	; 0x1154 <__udivmodsi4_loop>
    117a:	60 95       	com	r22
    117c:	70 95       	com	r23
    117e:	80 95       	com	r24
    1180:	90 95       	com	r25
    1182:	9b 01       	movw	r18, r22
    1184:	ac 01       	movw	r20, r24
    1186:	bd 01       	movw	r22, r26
    1188:	cf 01       	movw	r24, r30
    118a:	08 95       	ret

0000118c <__divmodsi4>:
    118c:	97 fb       	bst	r25, 7
    118e:	09 2e       	mov	r0, r25
    1190:	05 26       	eor	r0, r21
    1192:	0e d0       	rcall	.+28     	; 0x11b0 <__divmodsi4_neg1>
    1194:	57 fd       	sbrc	r21, 7
    1196:	04 d0       	rcall	.+8      	; 0x11a0 <__divmodsi4_neg2>
    1198:	d7 df       	rcall	.-82     	; 0x1148 <__udivmodsi4>
    119a:	0a d0       	rcall	.+20     	; 0x11b0 <__divmodsi4_neg1>
    119c:	00 1c       	adc	r0, r0
    119e:	38 f4       	brcc	.+14     	; 0x11ae <__divmodsi4_exit>

000011a0 <__divmodsi4_neg2>:
    11a0:	50 95       	com	r21
    11a2:	40 95       	com	r20
    11a4:	30 95       	com	r19
    11a6:	21 95       	neg	r18
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	4f 4f       	sbci	r20, 0xFF	; 255
    11ac:	5f 4f       	sbci	r21, 0xFF	; 255

000011ae <__divmodsi4_exit>:
    11ae:	08 95       	ret

000011b0 <__divmodsi4_neg1>:
    11b0:	f6 f7       	brtc	.-4      	; 0x11ae <__divmodsi4_exit>
    11b2:	90 95       	com	r25
    11b4:	80 95       	com	r24
    11b6:	70 95       	com	r23
    11b8:	61 95       	neg	r22
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	8f 4f       	sbci	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	08 95       	ret

000011c2 <__udivmodhi4>:
    11c2:	aa 1b       	sub	r26, r26
    11c4:	bb 1b       	sub	r27, r27
    11c6:	51 e1       	ldi	r21, 0x11	; 17
    11c8:	07 c0       	rjmp	.+14     	; 0x11d8 <__udivmodhi4_ep>

000011ca <__udivmodhi4_loop>:
    11ca:	aa 1f       	adc	r26, r26
    11cc:	bb 1f       	adc	r27, r27
    11ce:	a6 17       	cp	r26, r22
    11d0:	b7 07       	cpc	r27, r23
    11d2:	10 f0       	brcs	.+4      	; 0x11d8 <__udivmodhi4_ep>
    11d4:	a6 1b       	sub	r26, r22
    11d6:	b7 0b       	sbc	r27, r23

000011d8 <__udivmodhi4_ep>:
    11d8:	88 1f       	adc	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	5a 95       	dec	r21
    11de:	a9 f7       	brne	.-22     	; 0x11ca <__udivmodhi4_loop>
    11e0:	80 95       	com	r24
    11e2:	90 95       	com	r25
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	08 95       	ret

000011ea <__tablejump2__>:
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31

000011ee <__tablejump__>:
    11ee:	05 90       	lpm	r0, Z+
    11f0:	f4 91       	lpm	r31, Z+
    11f2:	e0 2d       	mov	r30, r0
    11f4:	09 94       	ijmp

000011f6 <malloc>:
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	91 05       	cpc	r25, r1
    11fe:	10 f4       	brcc	.+4      	; 0x1204 <malloc+0xe>
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	e0 91 49 02 	lds	r30, 0x0249
    1208:	f0 91 4a 02 	lds	r31, 0x024A
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	26 c0       	rjmp	.+76     	; 0x1262 <malloc+0x6c>
    1216:	60 81       	ld	r22, Z
    1218:	71 81       	ldd	r23, Z+1	; 0x01
    121a:	68 17       	cp	r22, r24
    121c:	79 07       	cpc	r23, r25
    121e:	e0 f0       	brcs	.+56     	; 0x1258 <malloc+0x62>
    1220:	68 17       	cp	r22, r24
    1222:	79 07       	cpc	r23, r25
    1224:	81 f4       	brne	.+32     	; 0x1246 <malloc+0x50>
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	21 15       	cp	r18, r1
    122c:	31 05       	cpc	r19, r1
    122e:	31 f0       	breq	.+12     	; 0x123c <malloc+0x46>
    1230:	d9 01       	movw	r26, r18
    1232:	13 96       	adiw	r26, 0x03	; 3
    1234:	9c 93       	st	X, r25
    1236:	8e 93       	st	-X, r24
    1238:	12 97       	sbiw	r26, 0x02	; 2
    123a:	2b c0       	rjmp	.+86     	; 0x1292 <malloc+0x9c>
    123c:	90 93 4a 02 	sts	0x024A, r25
    1240:	80 93 49 02 	sts	0x0249, r24
    1244:	26 c0       	rjmp	.+76     	; 0x1292 <malloc+0x9c>
    1246:	41 15       	cp	r20, r1
    1248:	51 05       	cpc	r21, r1
    124a:	19 f0       	breq	.+6      	; 0x1252 <malloc+0x5c>
    124c:	64 17       	cp	r22, r20
    124e:	75 07       	cpc	r23, r21
    1250:	18 f4       	brcc	.+6      	; 0x1258 <malloc+0x62>
    1252:	ab 01       	movw	r20, r22
    1254:	e9 01       	movw	r28, r18
    1256:	df 01       	movw	r26, r30
    1258:	9f 01       	movw	r18, r30
    125a:	72 81       	ldd	r23, Z+2	; 0x02
    125c:	63 81       	ldd	r22, Z+3	; 0x03
    125e:	e7 2f       	mov	r30, r23
    1260:	f6 2f       	mov	r31, r22
    1262:	30 97       	sbiw	r30, 0x00	; 0
    1264:	c1 f6       	brne	.-80     	; 0x1216 <malloc+0x20>
    1266:	41 15       	cp	r20, r1
    1268:	51 05       	cpc	r21, r1
    126a:	01 f1       	breq	.+64     	; 0x12ac <malloc+0xb6>
    126c:	48 1b       	sub	r20, r24
    126e:	59 0b       	sbc	r21, r25
    1270:	44 30       	cpi	r20, 0x04	; 4
    1272:	51 05       	cpc	r21, r1
    1274:	80 f4       	brcc	.+32     	; 0x1296 <malloc+0xa0>
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	8d 91       	ld	r24, X+
    127a:	9c 91       	ld	r25, X
    127c:	13 97       	sbiw	r26, 0x03	; 3
    127e:	20 97       	sbiw	r28, 0x00	; 0
    1280:	19 f0       	breq	.+6      	; 0x1288 <malloc+0x92>
    1282:	9b 83       	std	Y+3, r25	; 0x03
    1284:	8a 83       	std	Y+2, r24	; 0x02
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <malloc+0x9a>
    1288:	90 93 4a 02 	sts	0x024A, r25
    128c:	80 93 49 02 	sts	0x0249, r24
    1290:	fd 01       	movw	r30, r26
    1292:	32 96       	adiw	r30, 0x02	; 2
    1294:	46 c0       	rjmp	.+140    	; 0x1322 <malloc+0x12c>
    1296:	fd 01       	movw	r30, r26
    1298:	e4 0f       	add	r30, r20
    129a:	f5 1f       	adc	r31, r21
    129c:	81 93       	st	Z+, r24
    129e:	91 93       	st	Z+, r25
    12a0:	42 50       	subi	r20, 0x02	; 2
    12a2:	50 40       	sbci	r21, 0x00	; 0
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	5c 93       	st	X, r21
    12a8:	4e 93       	st	-X, r20
    12aa:	3b c0       	rjmp	.+118    	; 0x1322 <malloc+0x12c>
    12ac:	20 91 47 02 	lds	r18, 0x0247
    12b0:	30 91 48 02 	lds	r19, 0x0248
    12b4:	21 15       	cp	r18, r1
    12b6:	31 05       	cpc	r19, r1
    12b8:	41 f4       	brne	.+16     	; 0x12ca <malloc+0xd4>
    12ba:	20 91 44 01 	lds	r18, 0x0144
    12be:	30 91 45 01 	lds	r19, 0x0145
    12c2:	30 93 48 02 	sts	0x0248, r19
    12c6:	20 93 47 02 	sts	0x0247, r18
    12ca:	20 91 46 01 	lds	r18, 0x0146
    12ce:	30 91 47 01 	lds	r19, 0x0147
    12d2:	21 15       	cp	r18, r1
    12d4:	31 05       	cpc	r19, r1
    12d6:	41 f4       	brne	.+16     	; 0x12e8 <malloc+0xf2>
    12d8:	2d b7       	in	r18, 0x3d	; 61
    12da:	3e b7       	in	r19, 0x3e	; 62
    12dc:	40 91 42 01 	lds	r20, 0x0142
    12e0:	50 91 43 01 	lds	r21, 0x0143
    12e4:	24 1b       	sub	r18, r20
    12e6:	35 0b       	sbc	r19, r21
    12e8:	e0 91 47 02 	lds	r30, 0x0247
    12ec:	f0 91 48 02 	lds	r31, 0x0248
    12f0:	e2 17       	cp	r30, r18
    12f2:	f3 07       	cpc	r31, r19
    12f4:	a0 f4       	brcc	.+40     	; 0x131e <malloc+0x128>
    12f6:	2e 1b       	sub	r18, r30
    12f8:	3f 0b       	sbc	r19, r31
    12fa:	28 17       	cp	r18, r24
    12fc:	39 07       	cpc	r19, r25
    12fe:	78 f0       	brcs	.+30     	; 0x131e <malloc+0x128>
    1300:	ac 01       	movw	r20, r24
    1302:	4e 5f       	subi	r20, 0xFE	; 254
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	24 17       	cp	r18, r20
    1308:	35 07       	cpc	r19, r21
    130a:	48 f0       	brcs	.+18     	; 0x131e <malloc+0x128>
    130c:	4e 0f       	add	r20, r30
    130e:	5f 1f       	adc	r21, r31
    1310:	50 93 48 02 	sts	0x0248, r21
    1314:	40 93 47 02 	sts	0x0247, r20
    1318:	81 93       	st	Z+, r24
    131a:	91 93       	st	Z+, r25
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <malloc+0x12c>
    131e:	e0 e0       	ldi	r30, 0x00	; 0
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	cf 01       	movw	r24, r30
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <free>:
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	09 f4       	brne	.+2      	; 0x1334 <free+0xa>
    1332:	91 c0       	rjmp	.+290    	; 0x1456 <free+0x12c>
    1334:	fc 01       	movw	r30, r24
    1336:	32 97       	sbiw	r30, 0x02	; 2
    1338:	13 82       	std	Z+3, r1	; 0x03
    133a:	12 82       	std	Z+2, r1	; 0x02
    133c:	60 91 49 02 	lds	r22, 0x0249
    1340:	70 91 4a 02 	lds	r23, 0x024A
    1344:	61 15       	cp	r22, r1
    1346:	71 05       	cpc	r23, r1
    1348:	81 f4       	brne	.+32     	; 0x136a <free+0x40>
    134a:	20 81       	ld	r18, Z
    134c:	31 81       	ldd	r19, Z+1	; 0x01
    134e:	28 0f       	add	r18, r24
    1350:	39 1f       	adc	r19, r25
    1352:	80 91 47 02 	lds	r24, 0x0247
    1356:	90 91 48 02 	lds	r25, 0x0248
    135a:	82 17       	cp	r24, r18
    135c:	93 07       	cpc	r25, r19
    135e:	99 f5       	brne	.+102    	; 0x13c6 <free+0x9c>
    1360:	f0 93 48 02 	sts	0x0248, r31
    1364:	e0 93 47 02 	sts	0x0247, r30
    1368:	76 c0       	rjmp	.+236    	; 0x1456 <free+0x12c>
    136a:	db 01       	movw	r26, r22
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <free+0x4c>
    1372:	cd 01       	movw	r24, r26
    1374:	d9 01       	movw	r26, r18
    1376:	ae 17       	cp	r26, r30
    1378:	bf 07       	cpc	r27, r31
    137a:	48 f4       	brcc	.+18     	; 0x138e <free+0x64>
    137c:	12 96       	adiw	r26, 0x02	; 2
    137e:	2d 91       	ld	r18, X+
    1380:	3c 91       	ld	r19, X
    1382:	13 97       	sbiw	r26, 0x03	; 3
    1384:	21 15       	cp	r18, r1
    1386:	31 05       	cpc	r19, r1
    1388:	a1 f7       	brne	.-24     	; 0x1372 <free+0x48>
    138a:	cd 01       	movw	r24, r26
    138c:	21 c0       	rjmp	.+66     	; 0x13d0 <free+0xa6>
    138e:	b3 83       	std	Z+3, r27	; 0x03
    1390:	a2 83       	std	Z+2, r26	; 0x02
    1392:	ef 01       	movw	r28, r30
    1394:	49 91       	ld	r20, Y+
    1396:	59 91       	ld	r21, Y+
    1398:	9e 01       	movw	r18, r28
    139a:	24 0f       	add	r18, r20
    139c:	35 1f       	adc	r19, r21
    139e:	a2 17       	cp	r26, r18
    13a0:	b3 07       	cpc	r27, r19
    13a2:	79 f4       	brne	.+30     	; 0x13c2 <free+0x98>
    13a4:	2d 91       	ld	r18, X+
    13a6:	3c 91       	ld	r19, X
    13a8:	11 97       	sbiw	r26, 0x01	; 1
    13aa:	24 0f       	add	r18, r20
    13ac:	35 1f       	adc	r19, r21
    13ae:	2e 5f       	subi	r18, 0xFE	; 254
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	31 83       	std	Z+1, r19	; 0x01
    13b4:	20 83       	st	Z, r18
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	2d 91       	ld	r18, X+
    13ba:	3c 91       	ld	r19, X
    13bc:	13 97       	sbiw	r26, 0x03	; 3
    13be:	33 83       	std	Z+3, r19	; 0x03
    13c0:	22 83       	std	Z+2, r18	; 0x02
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	29 f4       	brne	.+10     	; 0x13d0 <free+0xa6>
    13c6:	f0 93 4a 02 	sts	0x024A, r31
    13ca:	e0 93 49 02 	sts	0x0249, r30
    13ce:	43 c0       	rjmp	.+134    	; 0x1456 <free+0x12c>
    13d0:	dc 01       	movw	r26, r24
    13d2:	13 96       	adiw	r26, 0x03	; 3
    13d4:	fc 93       	st	X, r31
    13d6:	ee 93       	st	-X, r30
    13d8:	12 97       	sbiw	r26, 0x02	; 2
    13da:	4d 91       	ld	r20, X+
    13dc:	5d 91       	ld	r21, X+
    13de:	a4 0f       	add	r26, r20
    13e0:	b5 1f       	adc	r27, r21
    13e2:	ea 17       	cp	r30, r26
    13e4:	fb 07       	cpc	r31, r27
    13e6:	69 f4       	brne	.+26     	; 0x1402 <free+0xd8>
    13e8:	20 81       	ld	r18, Z
    13ea:	31 81       	ldd	r19, Z+1	; 0x01
    13ec:	24 0f       	add	r18, r20
    13ee:	35 1f       	adc	r19, r21
    13f0:	2e 5f       	subi	r18, 0xFE	; 254
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	ec 01       	movw	r28, r24
    13f6:	39 83       	std	Y+1, r19	; 0x01
    13f8:	28 83       	st	Y, r18
    13fa:	22 81       	ldd	r18, Z+2	; 0x02
    13fc:	33 81       	ldd	r19, Z+3	; 0x03
    13fe:	3b 83       	std	Y+3, r19	; 0x03
    1400:	2a 83       	std	Y+2, r18	; 0x02
    1402:	e0 e0       	ldi	r30, 0x00	; 0
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <free+0xe2>
    1408:	fb 01       	movw	r30, r22
    140a:	bc 01       	movw	r22, r24
    140c:	db 01       	movw	r26, r22
    140e:	12 96       	adiw	r26, 0x02	; 2
    1410:	8d 91       	ld	r24, X+
    1412:	9c 91       	ld	r25, X
    1414:	13 97       	sbiw	r26, 0x03	; 3
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	b9 f7       	brne	.-18     	; 0x1408 <free+0xde>
    141a:	9b 01       	movw	r18, r22
    141c:	2e 5f       	subi	r18, 0xFE	; 254
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	8d 91       	ld	r24, X+
    1422:	9c 91       	ld	r25, X
    1424:	11 97       	sbiw	r26, 0x01	; 1
    1426:	82 0f       	add	r24, r18
    1428:	93 1f       	adc	r25, r19
    142a:	40 91 47 02 	lds	r20, 0x0247
    142e:	50 91 48 02 	lds	r21, 0x0248
    1432:	48 17       	cp	r20, r24
    1434:	59 07       	cpc	r21, r25
    1436:	79 f4       	brne	.+30     	; 0x1456 <free+0x12c>
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	29 f4       	brne	.+10     	; 0x1446 <free+0x11c>
    143c:	10 92 4a 02 	sts	0x024A, r1
    1440:	10 92 49 02 	sts	0x0249, r1
    1444:	02 c0       	rjmp	.+4      	; 0x144a <free+0x120>
    1446:	13 82       	std	Z+3, r1	; 0x03
    1448:	12 82       	std	Z+2, r1	; 0x02
    144a:	22 50       	subi	r18, 0x02	; 2
    144c:	30 40       	sbci	r19, 0x00	; 0
    144e:	30 93 48 02 	sts	0x0248, r19
    1452:	20 93 47 02 	sts	0x0247, r18
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <do_random>:
    145c:	a0 e0       	ldi	r26, 0x00	; 0
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e4 e3       	ldi	r30, 0x34	; 52
    1462:	fa e0       	ldi	r31, 0x0A	; 10
    1464:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__prologue_saves__+0x10>
    1468:	ec 01       	movw	r28, r24
    146a:	68 81       	ld	r22, Y
    146c:	79 81       	ldd	r23, Y+1	; 0x01
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	9b 81       	ldd	r25, Y+3	; 0x03
    1472:	61 15       	cp	r22, r1
    1474:	71 05       	cpc	r23, r1
    1476:	81 05       	cpc	r24, r1
    1478:	91 05       	cpc	r25, r1
    147a:	21 f4       	brne	.+8      	; 0x1484 <do_random+0x28>
    147c:	64 e2       	ldi	r22, 0x24	; 36
    147e:	79 ed       	ldi	r23, 0xD9	; 217
    1480:	8b e5       	ldi	r24, 0x5B	; 91
    1482:	97 e0       	ldi	r25, 0x07	; 7
    1484:	2d e1       	ldi	r18, 0x1D	; 29
    1486:	33 ef       	ldi	r19, 0xF3	; 243
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	0e 94 c6 08 	call	0x118c	; 0x118c <__divmodsi4>
    1490:	79 01       	movw	r14, r18
    1492:	8a 01       	movw	r16, r20
    1494:	27 ea       	ldi	r18, 0xA7	; 167
    1496:	31 e4       	ldi	r19, 0x41	; 65
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__mulsi3>
    14a0:	5b 01       	movw	r10, r22
    14a2:	6c 01       	movw	r12, r24
    14a4:	c8 01       	movw	r24, r16
    14a6:	b7 01       	movw	r22, r14
    14a8:	2c ee       	ldi	r18, 0xEC	; 236
    14aa:	34 ef       	ldi	r19, 0xF4	; 244
    14ac:	4f ef       	ldi	r20, 0xFF	; 255
    14ae:	5f ef       	ldi	r21, 0xFF	; 255
    14b0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__mulsi3>
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	2a 0d       	add	r18, r10
    14ba:	3b 1d       	adc	r19, r11
    14bc:	4c 1d       	adc	r20, r12
    14be:	5d 1d       	adc	r21, r13
    14c0:	57 ff       	sbrs	r21, 7
    14c2:	04 c0       	rjmp	.+8      	; 0x14cc <do_random+0x70>
    14c4:	21 50       	subi	r18, 0x01	; 1
    14c6:	30 40       	sbci	r19, 0x00	; 0
    14c8:	40 40       	sbci	r20, 0x00	; 0
    14ca:	50 48       	sbci	r21, 0x80	; 128
    14cc:	28 83       	st	Y, r18
    14ce:	39 83       	std	Y+1, r19	; 0x01
    14d0:	4a 83       	std	Y+2, r20	; 0x02
    14d2:	5b 83       	std	Y+3, r21	; 0x03
    14d4:	5f 77       	andi	r21, 0x7F	; 127
    14d6:	b9 01       	movw	r22, r18
    14d8:	ca 01       	movw	r24, r20
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	ea e0       	ldi	r30, 0x0A	; 10
    14e0:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__epilogue_restores__+0x10>

000014e4 <random_r>:
    14e4:	0e 94 2e 0a 	call	0x145c	; 0x145c <do_random>
    14e8:	08 95       	ret

000014ea <random>:
    14ea:	88 e4       	ldi	r24, 0x48	; 72
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	0e 94 2e 0a 	call	0x145c	; 0x145c <do_random>
    14f2:	08 95       	ret

000014f4 <srandom>:
    14f4:	60 93 48 01 	sts	0x0148, r22
    14f8:	70 93 49 01 	sts	0x0149, r23
    14fc:	80 93 4a 01 	sts	0x014A, r24
    1500:	90 93 4b 01 	sts	0x014B, r25
    1504:	08 95       	ret

00001506 <__prologue_saves__>:
    1506:	2f 92       	push	r2
    1508:	3f 92       	push	r3
    150a:	4f 92       	push	r4
    150c:	5f 92       	push	r5
    150e:	6f 92       	push	r6
    1510:	7f 92       	push	r7
    1512:	8f 92       	push	r8
    1514:	9f 92       	push	r9
    1516:	af 92       	push	r10
    1518:	bf 92       	push	r11
    151a:	cf 92       	push	r12
    151c:	df 92       	push	r13
    151e:	ef 92       	push	r14
    1520:	ff 92       	push	r15
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	ca 1b       	sub	r28, r26
    1530:	db 0b       	sbc	r29, r27
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	09 94       	ijmp

0000153e <__epilogue_restores__>:
    153e:	2a 88       	ldd	r2, Y+18	; 0x12
    1540:	39 88       	ldd	r3, Y+17	; 0x11
    1542:	48 88       	ldd	r4, Y+16	; 0x10
    1544:	5f 84       	ldd	r5, Y+15	; 0x0f
    1546:	6e 84       	ldd	r6, Y+14	; 0x0e
    1548:	7d 84       	ldd	r7, Y+13	; 0x0d
    154a:	8c 84       	ldd	r8, Y+12	; 0x0c
    154c:	9b 84       	ldd	r9, Y+11	; 0x0b
    154e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1550:	b9 84       	ldd	r11, Y+9	; 0x09
    1552:	c8 84       	ldd	r12, Y+8	; 0x08
    1554:	df 80       	ldd	r13, Y+7	; 0x07
    1556:	ee 80       	ldd	r14, Y+6	; 0x06
    1558:	fd 80       	ldd	r15, Y+5	; 0x05
    155a:	0c 81       	ldd	r16, Y+4	; 0x04
    155c:	1b 81       	ldd	r17, Y+3	; 0x03
    155e:	aa 81       	ldd	r26, Y+2	; 0x02
    1560:	b9 81       	ldd	r27, Y+1	; 0x01
    1562:	ce 0f       	add	r28, r30
    1564:	d1 1d       	adc	r29, r1
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	ed 01       	movw	r28, r26
    1572:	08 95       	ret

00001574 <__do_global_dtors>:
    1574:	10 e0       	ldi	r17, 0x00	; 0
    1576:	cc e6       	ldi	r28, 0x6C	; 108
    1578:	d0 e0       	ldi	r29, 0x00	; 0
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <__do_global_dtors+0x10>
    157c:	fe 01       	movw	r30, r28
    157e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__tablejump__>
    1582:	22 96       	adiw	r28, 0x02	; 2
    1584:	ce 36       	cpi	r28, 0x6E	; 110
    1586:	d1 07       	cpc	r29, r17
    1588:	c9 f7       	brne	.-14     	; 0x157c <__do_global_dtors+0x8>
    158a:	f8 94       	cli

0000158c <__stop_program>:
    158c:	ff cf       	rjmp	.-2      	; 0x158c <__stop_program>
