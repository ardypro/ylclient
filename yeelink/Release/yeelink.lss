
yeelink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000016a6  0000173a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f5  0080016e  0080016e  000017a8  2**0
                  ALLOC
  3 .stab         0000dc14  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001f055  00000000  00000000  0000f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__dtors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__vector_16>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_18>
      4c:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_19>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	68 00       	.word	0x0068	; ????
      6a:	73 00       	.word	0x0073	; ????
      6c:	7e 00       	.word	0x007e	; ????
      6e:	8d 00       	.word	0x008d	; ????
      70:	98 00       	.word	0x0098	; ????
      72:	a3 00       	.word	0x00a3	; ????
      74:	e5 00       	.word	0x00e5	; ????
      76:	63 03       	mulsu	r22, r19
      78:	f9 03       	fmulsu	r23, r17

0000007a <__ctors_end>:
      7a:	ea 00       	.word	0x00ea	; ????

0000007c <__dtors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 ea       	ldi	r30, 0xA6	; 166
      90:	f6 e1       	ldi	r31, 0x16	; 22
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 36       	cpi	r26, 0x6E	; 110
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	ae e6       	ldi	r26, 0x6E	; 110
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a3 36       	cpi	r26, 0x63	; 99
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>

000000ae <__do_global_ctors>:
      ae:	10 e0       	ldi	r17, 0x00	; 0
      b0:	ca e7       	ldi	r28, 0x7A	; 122
      b2:	d0 e0       	ldi	r29, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_global_ctors+0x10>
      b6:	22 97       	sbiw	r28, 0x02	; 2
      b8:	fe 01       	movw	r30, r28
      ba:	0e 94 83 09 	call	0x1306	; 0x1306 <__tablejump__>
      be:	c8 36       	cpi	r28, 0x68	; 104
      c0:	d1 07       	cpc	r29, r17
      c2:	c9 f7       	brne	.-14     	; 0xb6 <__do_global_ctors+0x8>
      c4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
      c8:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__do_global_dtors>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <_GLOBAL__I__ZN9DhcpClass13beginWithDHCPEPhmm>:
}

IPAddress DhcpClass::getDnsServerIp()
{
    return IPAddress(_dhcpDnsServerIp);
}
      d0:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
      d2:	8e e6       	ldi	r24, 0x6E	; 110
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	00 e0       	ldi	r16, 0x00	; 0
      de:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN9IPAddressC1Ehhhh>
      e2:	0f 91       	pop	r16
      e4:	08 95       	ret

000000e6 <_GLOBAL__I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
      e6:	0f 93       	push	r16
      e8:	84 e7       	ldi	r24, 0x74	; 116
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN9IPAddressC1Ehhhh>
      f8:	0f 91       	pop	r16
      fa:	08 95       	ret

000000fc <_GLOBAL__I__ZN13EthernetClass6_stateE>:
IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}

EthernetClass Ethernet;
      fc:	0f 93       	push	r16
      fe:	80 e8       	ldi	r24, 0x80	; 128
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	00 e0       	ldi	r16, 0x00	; 0
     10a:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN9IPAddressC1Ehhhh>
#include "EthernetClient.h"
#include "EthernetServer.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
     10e:	8a e7       	ldi	r24, 0x7A	; 122
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN9IPAddressC1Ev>
     116:	0f 91       	pop	r16
     118:	08 95       	ret

0000011a <_GLOBAL__I__ZN14EthernetClient8_srcportE>:
// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}
     11a:	0f 93       	push	r16
     11c:	86 e8       	ldi	r24, 0x86	; 134
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN9IPAddressC1Ehhhh>
     12c:	0f 91       	pop	r16
     12e:	08 95       	ret

00000130 <_GLOBAL__I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
     130:	0f 93       	push	r16
     132:	8c e8       	ldi	r24, 0x8C	; 140
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN9IPAddressC1Ehhhh>
     142:	0f 91       	pop	r16
     144:	08 95       	ret

00000146 <_GLOBAL__I__ZN11EthernetUDPC2Ev>:
{
  while (available())
  {
    read();
  }
}
     146:	0f 93       	push	r16
     148:	82 e9       	ldi	r24, 0x92	; 146
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN9IPAddressC1Ehhhh>
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <_Z41__static_initialization_and_destruction_0ii.clone.0>:
{
	int v;
	v=random(256);
	client.Post(v);
	delay(20*1000);
}
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	29 f4       	brne	.+10     	; 0x16c <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
#include "ylclient.h"

extern HardwareSerial Serial;
using namespace yeelink;

ylclient client;
     162:	88 e9       	ldi	r24, 0x98	; 152
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN7yeelink8ylclientC1Ev>
     16a:	08 95       	ret
     16c:	00 97       	sbiw	r24, 0x00	; 0
     16e:	21 f4       	brne	.+8      	; 0x178 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
     170:	88 e9       	ldi	r24, 0x98	; 152
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_ZN7yeelink8ylclientD1Ev>
     178:	08 95       	ret

0000017a <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
	Serial.begin(9600);
     17a:	81 e3       	ldi	r24, 0x31	; 49
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	55 e2       	ldi	r21, 0x25	; 37
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN14HardwareSerial5beginEm>
	//初始化yeelink client
	//client.setAPIKey("apikey");	//设置API key，这里采用默认的key
	//client.setAPIVersion("v1.0");	//设置API版本，除非yeelink API升级，则采用默认的v1.0版本
	client.setEthernetCardType(SERIALOVERHTTP );
     18a:	88 e9       	ldi	r24, 0x98	; 152
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	62 e0       	ldi	r22, 0x02	; 2
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>
	randomSeed(analogRead(0));
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	0e 94 c6 06 	call	0xd8c	; 0xd8c <analogRead>
     19c:	0e 94 ba 05 	call	0xb74	; 0xb74 <_Z10randomSeedj>
}
     1a0:	08 95       	ret

000001a2 <loop>:

// The loop function is called in an endless loop
void loop()
{
	int v;
	v=random(256);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	71 e0       	ldi	r23, 0x01	; 1
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z6randoml>
     1ae:	9b 01       	movw	r18, r22
     1b0:	ac 01       	movw	r20, r24
	client.Post(v);
     1b2:	88 e9       	ldi	r24, 0x98	; 152
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	b9 01       	movw	r22, r18
     1b8:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN7yeelink8ylclient4PostEi>
	delay(20*1000);
     1bc:	60 e2       	ldi	r22, 0x20	; 32
     1be:	7e e4       	ldi	r23, 0x4E	; 78
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <delay>
}
     1c8:	08 95       	ret

000001ca <_GLOBAL__I_client>:
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z41__static_initialization_and_destruction_0ii.clone.0>
     1d2:	08 95       	ret

000001d4 <_GLOBAL__D_client>:
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z41__static_initialization_and_destruction_0ii.clone.0>
     1dc:	08 95       	ret

000001de <_ZN7yeelink17ylGenericEthernetD1Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     1de:	27 e3       	ldi	r18, 0x37	; 55
     1e0:	31 e0       	ldi	r19, 0x01	; 1
     1e2:	fc 01       	movw	r30, r24
     1e4:	31 83       	std	Z+1, r19	; 0x01
     1e6:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     1e8:	08 95       	ret

000001ea <_ZN7yeelink17ylGenericEthernetD0Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     1ea:	27 e3       	ldi	r18, 0x37	; 55
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	fc 01       	movw	r30, r24
     1f0:	31 83       	std	Z+1, r19	; 0x01
     1f2:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     1f4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZdlPv>
     1f8:	08 95       	ret

000001fa <_ZN7yeelink17ylGenericEthernetC1Ev>:
//#include "ylconst.h"

namespace yeelink
{

ylGenericEthernet::ylGenericEthernet()
     1fa:	fc 01       	movw	r30, r24
     1fc:	87 e3       	ldi	r24, 0x37	; 55
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	91 83       	std	Z+1, r25	; 0x01
     202:	80 83       	st	Z, r24
{
	seconds = 10; //API规定两条记录发送的时间间隔不少于10s
     204:	8a e0       	ldi	r24, 0x0A	; 10
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	93 83       	std	Z+3, r25	; 0x03
     20a:	82 83       	std	Z+2, r24	; 0x02
	apiHeader = 0;
     20c:	15 82       	std	Z+5, r1	; 0x05
     20e:	14 82       	std	Z+4, r1	; 0x04
	jsonStr = 0;
     210:	17 82       	std	Z+7, r1	; 0x07
     212:	16 82       	std	Z+6, r1	; 0x06

}
     214:	08 95       	ret

00000216 <_ZN7yeelink12ylSerialHTTP12postKeyValueEPcS1_>:

bool ylSerialHTTP::postKeyValue(char* key, char* value)
{

	return 0;
}
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	08 95       	ret

0000021a <_ZN7yeelink12ylSerialHTTP4PostEf>:
}

bool ylSerialHTTP::Post(float value)
{
	//sendValueflag();
	return serial->print(value);
     21a:	fc 01       	movw	r30, r24
     21c:	82 85       	ldd	r24, Z+10	; 0x0a
     21e:	93 85       	ldd	r25, Z+11	; 0x0b
     220:	22 e0       	ldi	r18, 0x02	; 2
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN5Print5printEdi>
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	00 97       	sbiw	r24, 0x00	; 0
     22c:	09 f4       	brne	.+2      	; 0x230 <_ZN7yeelink12ylSerialHTTP4PostEf+0x16>
     22e:	20 e0       	ldi	r18, 0x00	; 0
}
     230:	82 2f       	mov	r24, r18
     232:	08 95       	ret

00000234 <_ZN7yeelink12ylSerialHTTP4PostEi>:
}

bool ylSerialHTTP::Post(int value)
{
	//sendValueflag();
	return serial->print(value);
     234:	fc 01       	movw	r30, r24
     236:	82 85       	ldd	r24, Z+10	; 0x0a
     238:	93 85       	ldd	r25, Z+11	; 0x0b
     23a:	4a e0       	ldi	r20, 0x0A	; 10
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <_ZN5Print5printEii>
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	00 97       	sbiw	r24, 0x00	; 0
     246:	09 f4       	brne	.+2      	; 0x24a <_ZN7yeelink12ylSerialHTTP4PostEi+0x16>
     248:	20 e0       	ldi	r18, 0x00	; 0
}
     24a:	82 2f       	mov	r24, r18
     24c:	08 95       	ret

0000024e <_ZN7yeelink12ylSerialHTTPD1Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     24e:	25 e4       	ldi	r18, 0x45	; 69
     250:	31 e0       	ldi	r19, 0x01	; 1
     252:	fc 01       	movw	r30, r24
     254:	31 83       	std	Z+1, r19	; 0x01
     256:	20 83       	st	Z, r18
     258:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     25c:	08 95       	ret

0000025e <_ZN7yeelink12ylSerialHTTPD0Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ec 01       	movw	r28, r24
     264:	85 e4       	ldi	r24, 0x45	; 69
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	99 83       	std	Y+1, r25	; 0x01
     26a:	88 83       	st	Y, r24
     26c:	ce 01       	movw	r24, r28
     26e:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     272:	ce 01       	movw	r24, r28
     274:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZdlPv>
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <_ZN7yeelink12ylSerialHTTPC1Ei>:
#endif

namespace yeelink
{

ylSerialHTTP::ylSerialHTTP(int serialIndex)
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	ec 01       	movw	r28, r24
     288:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN7yeelink17ylGenericEthernetC1Ev>
     28c:	85 e4       	ldi	r24, 0x45	; 69
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	99 83       	std	Y+1, r25	; 0x01
     292:	88 83       	st	Y, r24
#else
		serial = &Serial;
#endif
		break;
	default:
		serial = &Serial;
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	9b 87       	std	Y+11, r25	; 0x0b
     29a:	8a 87       	std	Y+10, r24	; 0x0a
	}

}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	08 95       	ret

000002a6 <_ZN7yeelink8ylclientD1Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     2a6:	23 e5       	ldi	r18, 0x53	; 83
     2a8:	31 e0       	ldi	r19, 0x01	; 1
     2aa:	fc 01       	movw	r30, r24
     2ac:	31 83       	std	Z+1, r19	; 0x01
     2ae:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     2b0:	08 95       	ret

000002b2 <_ZN7yeelink8ylclientD0Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     2b2:	23 e5       	ldi	r18, 0x53	; 83
     2b4:	31 e0       	ldi	r19, 0x01	; 1
     2b6:	fc 01       	movw	r30, r24
     2b8:	31 83       	std	Z+1, r19	; 0x01
     2ba:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     2bc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZdlPv>
     2c0:	08 95       	ret

000002c2 <_ZN7yeelink8ylclientC1Ev>:
//#endif

namespace yeelink
{

ylclient::ylclient()
     2c2:	fc 01       	movw	r30, r24
     2c4:	83 e5       	ldi	r24, 0x53	; 83
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	91 83       	std	Z+1, r25	; 0x01
     2ca:	80 83       	st	Z, r24
{
	// TODO Auto-generated constructor stub
	this->_connected = false;
     2cc:	16 82       	std	Z+6, r1	; 0x06
	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	93 83       	std	Z+3, r25	; 0x03
     2d4:	82 83       	std	Z+2, r24	; 0x02
	this->_cardtype = SERIALOVERHTTP;
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	95 83       	std	Z+5, r25	; 0x05
     2dc:	84 83       	std	Z+4, r24	; 0x04
	this->_apiver = (char*) "v1.0";
     2de:	81 e2       	ldi	r24, 0x21	; 33
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	90 87       	std	Z+8, r25	; 0x08
     2e4:	87 83       	std	Z+7, r24	; 0x07
	this->_activedeviceid = 0;
     2e6:	12 86       	std	Z+10, r1	; 0x0a
     2e8:	11 86       	std	Z+9, r1	; 0x09
	this->_activesensorid = 0;
     2ea:	14 86       	std	Z+12, r1	; 0x0c
     2ec:	13 86       	std	Z+11, r1	; 0x0b
	this->_serialIndex = 1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	96 87       	std	Z+14, r25	; 0x0e
     2f4:	85 87       	std	Z+13, r24	; 0x0d

}
     2f6:	08 95       	ret

000002f8 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>:
//此处应该能够判断板子类型，然后决定串口数量

}

void ylclient::setEthernetCardType(ETHERNETCARD cardType)
{
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
	this->_cardtype = cardType;
     302:	7d 83       	std	Y+5, r23	; 0x05
     304:	6c 83       	std	Y+4, r22	; 0x04
	switch (cardType)
     306:	62 30       	cpi	r22, 0x02	; 2
     308:	71 05       	cpc	r23, r1
     30a:	59 f4       	brne	.+22     	; 0x322 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x2a>
	case ENC28J60:

		break;

	case SERIALOVERHTTP:
		net = new ylSerialHTTP();
     30c:	8c e0       	ldi	r24, 0x0C	; 12
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 ef 05 	call	0xbde	; 0xbde <_Znwj>
     314:	8c 01       	movw	r16, r24
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN7yeelink12ylSerialHTTPC1Ei>
     31e:	0f 87       	std	Y+15, r16	; 0x0f
     320:	18 8b       	std	Y+16, r17	; 0x10

		break;
	}
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	08 95       	ret

0000032c <_ZN7yeelink8ylclient4PostEf>:
	return 0;
}

bool ylclient::Post(float value)
{
	return net->Post(value);
     32c:	dc 01       	movw	r26, r24
     32e:	1f 96       	adiw	r26, 0x0f	; 15
     330:	8d 91       	ld	r24, X+
     332:	9c 91       	ld	r25, X
     334:	50 97       	sbiw	r26, 0x10	; 16
     336:	dc 01       	movw	r26, r24
     338:	ed 91       	ld	r30, X+
     33a:	fc 91       	ld	r31, X
     33c:	06 80       	ldd	r0, Z+6	; 0x06
     33e:	f7 81       	ldd	r31, Z+7	; 0x07
     340:	e0 2d       	mov	r30, r0
     342:	09 95       	icall
}
     344:	08 95       	ret

00000346 <_ZN7yeelink8ylclient4PostEi>:
		break;
	}
}

bool ylclient::Post(int value)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	ec 01       	movw	r28, r24
	float v;
	v = (double) value;
     34c:	88 27       	eor	r24, r24
     34e:	77 fd       	sbrc	r23, 7
     350:	80 95       	com	r24
     352:	98 2f       	mov	r25, r24
     354:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__floatsisf>
     358:	ab 01       	movw	r20, r22
     35a:	bc 01       	movw	r22, r24
	return this->Post(v);
     35c:	ce 01       	movw	r24, r28
     35e:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7yeelink8ylclient4PostEf>
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     368:	fc 01       	movw	r30, r24
     36a:	84 85       	ldd	r24, Z+12	; 0x0c
     36c:	95 85       	ldd	r25, Z+13	; 0x0d
     36e:	fc 01       	movw	r30, r24
     370:	e0 5c       	subi	r30, 0xC0	; 192
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	20 81       	ld	r18, Z
     376:	31 81       	ldd	r19, Z+1	; 0x01
     378:	8e 5b       	subi	r24, 0xBE	; 190
     37a:	9f 4f       	sbci	r25, 0xFF	; 255
     37c:	fc 01       	movw	r30, r24
     37e:	80 81       	ld	r24, Z
     380:	91 81       	ldd	r25, Z+1	; 0x01
     382:	28 1b       	sub	r18, r24
     384:	39 0b       	sbc	r19, r25
     386:	2f 73       	andi	r18, 0x3F	; 63
     388:	30 70       	andi	r19, 0x00	; 0
}
     38a:	c9 01       	movw	r24, r18
     38c:	08 95       	ret

0000038e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     38e:	fc 01       	movw	r30, r24
     390:	84 85       	ldd	r24, Z+12	; 0x0c
     392:	95 85       	ldd	r25, Z+13	; 0x0d
     394:	fc 01       	movw	r30, r24
     396:	e0 5c       	subi	r30, 0xC0	; 192
     398:	ff 4f       	sbci	r31, 0xFF	; 255
     39a:	40 81       	ld	r20, Z
     39c:	51 81       	ldd	r21, Z+1	; 0x01
     39e:	fc 01       	movw	r30, r24
     3a0:	ee 5b       	subi	r30, 0xBE	; 190
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	20 81       	ld	r18, Z
     3a6:	31 81       	ldd	r19, Z+1	; 0x01
     3a8:	42 17       	cp	r20, r18
     3aa:	53 07       	cpc	r21, r19
     3ac:	41 f0       	breq	.+16     	; 0x3be <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     3ae:	01 90       	ld	r0, Z+
     3b0:	f0 81       	ld	r31, Z
     3b2:	e0 2d       	mov	r30, r0
     3b4:	e8 0f       	add	r30, r24
     3b6:	f9 1f       	adc	r31, r25
     3b8:	20 81       	ld	r18, Z
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     3c2:	c9 01       	movw	r24, r18
     3c4:	08 95       	ret

000003c6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     3c6:	fc 01       	movw	r30, r24
     3c8:	84 85       	ldd	r24, Z+12	; 0x0c
     3ca:	95 85       	ldd	r25, Z+13	; 0x0d
     3cc:	fc 01       	movw	r30, r24
     3ce:	e0 5c       	subi	r30, 0xC0	; 192
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	40 81       	ld	r20, Z
     3d4:	51 81       	ldd	r21, Z+1	; 0x01
     3d6:	fc 01       	movw	r30, r24
     3d8:	ee 5b       	subi	r30, 0xBE	; 190
     3da:	ff 4f       	sbci	r31, 0xFF	; 255
     3dc:	20 81       	ld	r18, Z
     3de:	31 81       	ldd	r19, Z+1	; 0x01
     3e0:	42 17       	cp	r20, r18
     3e2:	53 07       	cpc	r21, r19
     3e4:	71 f0       	breq	.+28     	; 0x402 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     3e6:	a0 81       	ld	r26, Z
     3e8:	b1 81       	ldd	r27, Z+1	; 0x01
     3ea:	a8 0f       	add	r26, r24
     3ec:	b9 1f       	adc	r27, r25
     3ee:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	8f 73       	andi	r24, 0x3F	; 63
     3f8:	90 70       	andi	r25, 0x00	; 0
     3fa:	91 83       	std	Z+1, r25	; 0x01
     3fc:	80 83       	st	Z, r24
    return c;
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	02 c0       	rjmp	.+4      	; 0x406 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     402:	2f ef       	ldi	r18, 0xFF	; 255
     404:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     406:	c9 01       	movw	r24, r18
     408:	08 95       	ret

0000040a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     40a:	dc 01       	movw	r26, r24
     40c:	1e 96       	adiw	r26, 0x0e	; 14
     40e:	8d 91       	ld	r24, X+
     410:	9c 91       	ld	r25, X
     412:	1f 97       	sbiw	r26, 0x0f	; 15
     414:	fc 01       	movw	r30, r24
     416:	e0 5c       	subi	r30, 0xC0	; 192
     418:	ff 4f       	sbci	r31, 0xFF	; 255
     41a:	8e 5b       	subi	r24, 0xBE	; 190
     41c:	9f 4f       	sbci	r25, 0xFF	; 255
     41e:	40 81       	ld	r20, Z
     420:	51 81       	ldd	r21, Z+1	; 0x01
     422:	dc 01       	movw	r26, r24
     424:	2d 91       	ld	r18, X+
     426:	3c 91       	ld	r19, X
     428:	11 97       	sbiw	r26, 0x01	; 1
     42a:	42 17       	cp	r20, r18
     42c:	53 07       	cpc	r21, r19
     42e:	b9 f7       	brne	.-18     	; 0x41e <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     430:	08 95       	ret

00000432 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     432:	1f 93       	push	r17
     434:	fc 01       	movw	r30, r24
     436:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     438:	26 85       	ldd	r18, Z+14	; 0x0e
     43a:	37 85       	ldd	r19, Z+15	; 0x0f
     43c:	d9 01       	movw	r26, r18
     43e:	a0 5c       	subi	r26, 0xC0	; 192
     440:	bf 4f       	sbci	r27, 0xFF	; 255
     442:	8d 91       	ld	r24, X+
     444:	9c 91       	ld	r25, X
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	60 e4       	ldi	r22, 0x40	; 64
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	0e 94 1d 09 	call	0x123a	; 0x123a <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     450:	d9 01       	movw	r26, r18
     452:	ae 5b       	subi	r26, 0xBE	; 190
     454:	bf 4f       	sbci	r27, 0xFF	; 255
     456:	4d 91       	ld	r20, X+
     458:	5c 91       	ld	r21, X
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	84 17       	cp	r24, r20
     45e:	95 07       	cpc	r25, r21
     460:	d1 f3       	breq	.-12     	; 0x456 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     462:	d9 01       	movw	r26, r18
     464:	a0 5c       	subi	r26, 0xC0	; 192
     466:	bf 4f       	sbci	r27, 0xFF	; 255
     468:	0d 90       	ld	r0, X+
     46a:	bc 91       	ld	r27, X
     46c:	a0 2d       	mov	r26, r0
     46e:	a2 0f       	add	r26, r18
     470:	b3 1f       	adc	r27, r19
     472:	1c 93       	st	X, r17
  _tx_buffer->head = i;
     474:	a6 85       	ldd	r26, Z+14	; 0x0e
     476:	b7 85       	ldd	r27, Z+15	; 0x0f
     478:	a0 5c       	subi	r26, 0xC0	; 192
     47a:	bf 4f       	sbci	r27, 0xFF	; 255
     47c:	11 96       	adiw	r26, 0x01	; 1
     47e:	9c 93       	st	X, r25
     480:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     482:	a6 89       	ldd	r26, Z+22	; 0x16
     484:	b7 89       	ldd	r27, Z+23	; 0x17
     486:	2c 91       	ld	r18, X
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	05 8c       	ldd	r0, Z+29	; 0x1d
     48e:	02 c0       	rjmp	.+4      	; 0x494 <_ZN14HardwareSerial5writeEh+0x62>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <_ZN14HardwareSerial5writeEh+0x5e>
     498:	28 2b       	or	r18, r24
     49a:	2c 93       	st	X, r18
  
  return 1;
}
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	1f 91       	pop	r17
     4a2:	08 95       	ret

000004a4 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     4a4:	fb 01       	movw	r30, r22
     4a6:	e0 5c       	subi	r30, 0xC0	; 192
     4a8:	ff 4f       	sbci	r31, 0xFF	; 255
     4aa:	20 81       	ld	r18, Z
     4ac:	31 81       	ldd	r19, Z+1	; 0x01
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
     4b2:	2f 73       	andi	r18, 0x3F	; 63
     4b4:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     4b6:	db 01       	movw	r26, r22
     4b8:	ae 5b       	subi	r26, 0xBE	; 190
     4ba:	bf 4f       	sbci	r27, 0xFF	; 255
     4bc:	4d 91       	ld	r20, X+
     4be:	5c 91       	ld	r21, X
     4c0:	11 97       	sbiw	r26, 0x01	; 1
     4c2:	24 17       	cp	r18, r20
     4c4:	35 07       	cpc	r19, r21
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
     4c8:	a0 81       	ld	r26, Z
     4ca:	b1 81       	ldd	r27, Z+1	; 0x01
     4cc:	a6 0f       	add	r26, r22
     4ce:	b7 1f       	adc	r27, r23
     4d0:	8c 93       	st	X, r24
    buffer->head = i;
     4d2:	31 83       	std	Z+1, r19	; 0x01
     4d4:	20 83       	st	Z, r18
     4d6:	08 95       	ret

000004d8 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     4d8:	08 95       	ret

000004da <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	2f 93       	push	r18
     4e6:	3f 93       	push	r19
     4e8:	4f 93       	push	r20
     4ea:	5f 93       	push	r21
     4ec:	6f 93       	push	r22
     4ee:	7f 93       	push	r23
     4f0:	8f 93       	push	r24
     4f2:	9f 93       	push	r25
     4f4:	af 93       	push	r26
     4f6:	bf 93       	push	r27
     4f8:	ef 93       	push	r30
     4fa:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     4fc:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
     500:	69 ea       	ldi	r22, 0xA9	; 169
     502:	71 e0       	ldi	r23, 0x01	; 1
     504:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_Z10store_charhP11ring_buffer>
  }
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	bf 91       	pop	r27
     50e:	af 91       	pop	r26
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	7f 91       	pop	r23
     516:	6f 91       	pop	r22
     518:	5f 91       	pop	r21
     51a:	4f 91       	pop	r20
     51c:	3f 91       	pop	r19
     51e:	2f 91       	pop	r18
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     52a:	81 e3       	ldi	r24, 0x31	; 49
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN14HardwareSerial9availableEv>
     532:	00 97       	sbiw	r24, 0x00	; 0
     534:	11 f0       	breq	.+4      	; 0x53a <_Z14serialEventRunv+0x10>
     536:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z11serialEventv>
     53a:	08 95       	ret

0000053c <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     53c:	1f 92       	push	r1
     53e:	0f 92       	push	r0
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	2f 93       	push	r18
     548:	3f 93       	push	r19
     54a:	5f 93       	push	r21
     54c:	6f 93       	push	r22
     54e:	7f 93       	push	r23
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	ef 93       	push	r30
     55a:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     55c:	20 91 2d 02 	lds	r18, 0x022D
     560:	30 91 2e 02 	lds	r19, 0x022E
     564:	80 91 2f 02 	lds	r24, 0x022F
     568:	90 91 30 02 	lds	r25, 0x0230
     56c:	28 17       	cp	r18, r24
     56e:	39 07       	cpc	r19, r25
     570:	31 f4       	brne	.+12     	; 0x57e <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     572:	80 91 c1 00 	lds	r24, 0x00C1
     576:	8f 7d       	andi	r24, 0xDF	; 223
     578:	80 93 c1 00 	sts	0x00C1, r24
     57c:	16 c0       	rjmp	.+44     	; 0x5aa <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     57e:	e0 91 2f 02 	lds	r30, 0x022F
     582:	f0 91 30 02 	lds	r31, 0x0230
     586:	e3 51       	subi	r30, 0x13	; 19
     588:	fe 4f       	sbci	r31, 0xFE	; 254
     58a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     58c:	80 91 2f 02 	lds	r24, 0x022F
     590:	90 91 30 02 	lds	r25, 0x0230
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	60 e4       	ldi	r22, 0x40	; 64
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	0e 94 1d 09 	call	0x123a	; 0x123a <__divmodhi4>
     59e:	90 93 30 02 	sts	0x0230, r25
     5a2:	80 93 2f 02 	sts	0x022F, r24
	
  #if defined(UDR0)
    UDR0 = c;
     5a6:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	3f 91       	pop	r19
     5be:	2f 91       	pop	r18
     5c0:	0f 90       	pop	r0
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	0f 90       	pop	r0
     5c6:	1f 90       	pop	r1
     5c8:	18 95       	reti

000005ca <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     5ca:	df 92       	push	r13
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
     5da:	7a 01       	movw	r14, r20
     5dc:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     5de:	dd 24       	eor	r13, r13
     5e0:	d3 94       	inc	r13
     5e2:	40 30       	cpi	r20, 0x00	; 0
     5e4:	81 ee       	ldi	r24, 0xE1	; 225
     5e6:	58 07       	cpc	r21, r24
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	68 07       	cpc	r22, r24
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	78 07       	cpc	r23, r24
     5f0:	49 f4       	brne	.+18     	; 0x604 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     5f2:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     5f4:	ec 89       	ldd	r30, Y+20	; 0x14
     5f6:	fd 89       	ldd	r31, Y+21	; 0x15
     5f8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     5fa:	60 e8       	ldi	r22, 0x80	; 128
     5fc:	74 e8       	ldi	r23, 0x84	; 132
     5fe:	8e e1       	ldi	r24, 0x1E	; 30
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0f c0       	rjmp	.+30     	; 0x622 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     604:	ec 89       	ldd	r30, Y+20	; 0x14
     606:	fd 89       	ldd	r31, Y+21	; 0x15
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 8c       	ldd	r0, Y+30	; 0x1e
     60e:	02 c0       	rjmp	.+4      	; 0x614 <_ZN14HardwareSerial5beginEm+0x4a>
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	0a 94       	dec	r0
     616:	e2 f7       	brpl	.-8      	; 0x610 <_ZN14HardwareSerial5beginEm+0x46>
     618:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	79 e0       	ldi	r23, 0x09	; 9
     61e:	8d e3       	ldi	r24, 0x3D	; 61
     620:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     622:	a8 01       	movw	r20, r16
     624:	97 01       	movw	r18, r14
     626:	0e 94 30 09 	call	0x1260	; 0x1260 <__udivmodsi4>
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	30 40       	sbci	r19, 0x00	; 0
     62e:	40 40       	sbci	r20, 0x00	; 0
     630:	50 40       	sbci	r21, 0x00	; 0
     632:	56 95       	lsr	r21
     634:	47 95       	ror	r20
     636:	37 95       	ror	r19
     638:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     63a:	80 e1       	ldi	r24, 0x10	; 16
     63c:	20 30       	cpi	r18, 0x00	; 0
     63e:	38 07       	cpc	r19, r24
     640:	10 f0       	brcs	.+4      	; 0x646 <_ZN14HardwareSerial5beginEm+0x7c>
     642:	dd 20       	and	r13, r13
     644:	b1 f6       	brne	.-84     	; 0x5f2 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     646:	e8 89       	ldd	r30, Y+16	; 0x10
     648:	f9 89       	ldd	r31, Y+17	; 0x11
     64a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     64c:	ea 89       	ldd	r30, Y+18	; 0x12
     64e:	fb 89       	ldd	r31, Y+19	; 0x13
     650:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     652:	ee 89       	ldd	r30, Y+22	; 0x16
     654:	ff 89       	ldd	r31, Y+23	; 0x17
     656:	40 81       	ld	r20, Z
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	9c 01       	movw	r18, r24
     65e:	0a 8c       	ldd	r0, Y+26	; 0x1a
     660:	02 c0       	rjmp	.+4      	; 0x666 <_ZN14HardwareSerial5beginEm+0x9c>
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	0a 94       	dec	r0
     668:	e2 f7       	brpl	.-8      	; 0x662 <_ZN14HardwareSerial5beginEm+0x98>
     66a:	42 2b       	or	r20, r18
     66c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     66e:	ee 89       	ldd	r30, Y+22	; 0x16
     670:	ff 89       	ldd	r31, Y+23	; 0x17
     672:	40 81       	ld	r20, Z
     674:	9c 01       	movw	r18, r24
     676:	0b 8c       	ldd	r0, Y+27	; 0x1b
     678:	02 c0       	rjmp	.+4      	; 0x67e <_ZN14HardwareSerial5beginEm+0xb4>
     67a:	22 0f       	add	r18, r18
     67c:	33 1f       	adc	r19, r19
     67e:	0a 94       	dec	r0
     680:	e2 f7       	brpl	.-8      	; 0x67a <_ZN14HardwareSerial5beginEm+0xb0>
     682:	42 2b       	or	r20, r18
     684:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     686:	ee 89       	ldd	r30, Y+22	; 0x16
     688:	ff 89       	ldd	r31, Y+23	; 0x17
     68a:	40 81       	ld	r20, Z
     68c:	9c 01       	movw	r18, r24
     68e:	0c 8c       	ldd	r0, Y+28	; 0x1c
     690:	02 c0       	rjmp	.+4      	; 0x696 <_ZN14HardwareSerial5beginEm+0xcc>
     692:	22 0f       	add	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	0a 94       	dec	r0
     698:	e2 f7       	brpl	.-8      	; 0x692 <_ZN14HardwareSerial5beginEm+0xc8>
     69a:	42 2b       	or	r20, r18
     69c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     69e:	ee 89       	ldd	r30, Y+22	; 0x16
     6a0:	ff 89       	ldd	r31, Y+23	; 0x17
     6a2:	20 81       	ld	r18, Z
     6a4:	0d 8c       	ldd	r0, Y+29	; 0x1d
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <_ZN14HardwareSerial5beginEm+0xe2>
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	0a 94       	dec	r0
     6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <_ZN14HardwareSerial5beginEm+0xde>
     6b0:	80 95       	com	r24
     6b2:	82 23       	and	r24, r18
     6b4:	80 83       	st	Z, r24
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	08 95       	ret

000006c6 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6c6:	10 92 34 02 	sts	0x0234, r1
     6ca:	10 92 33 02 	sts	0x0233, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     6ce:	88 ee       	ldi	r24, 0xE8	; 232
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	a0 e0       	ldi	r26, 0x00	; 0
     6d4:	b0 e0       	ldi	r27, 0x00	; 0
     6d6:	80 93 35 02 	sts	0x0235, r24
     6da:	90 93 36 02 	sts	0x0236, r25
     6de:	a0 93 37 02 	sts	0x0237, r26
     6e2:	b0 93 38 02 	sts	0x0238, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     6e6:	e3 e3       	ldi	r30, 0x33	; 51
     6e8:	f2 e0       	ldi	r31, 0x02	; 2
     6ea:	8b e5       	ldi	r24, 0x5B	; 91
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	92 93       	st	-Z, r25
     6f0:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     6f2:	89 ea       	ldi	r24, 0xA9	; 169
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	95 87       	std	Z+13, r25	; 0x0d
     6f8:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     6fa:	8d ee       	ldi	r24, 0xED	; 237
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	97 87       	std	Z+15, r25	; 0x0f
     700:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     702:	85 ec       	ldi	r24, 0xC5	; 197
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	91 8b       	std	Z+17, r25	; 0x11
     708:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     70a:	84 ec       	ldi	r24, 0xC4	; 196
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	93 8b       	std	Z+19, r25	; 0x13
     710:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     712:	80 ec       	ldi	r24, 0xC0	; 192
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	95 8b       	std	Z+21, r25	; 0x15
     718:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     71a:	81 ec       	ldi	r24, 0xC1	; 193
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	97 8b       	std	Z+23, r25	; 0x17
     720:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     722:	86 ec       	ldi	r24, 0xC6	; 198
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	91 8f       	std	Z+25, r25	; 0x19
     728:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     732:	87 e0       	ldi	r24, 0x07	; 7
     734:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     736:	85 e0       	ldi	r24, 0x05	; 5
     738:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     73e:	08 95       	ret

00000740 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	4c 01       	movw	r8, r24
     75a:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	a8 2e       	mov	r10, r24
     760:	b1 2c       	mov	r11, r1
     762:	a8 0c       	add	r10, r8
     764:	b9 1c       	adc	r11, r9
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     766:	c0 e0       	ldi	r28, 0x00	; 0
     768:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     76a:	cc 24       	eor	r12, r12
     76c:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     76e:	f5 01       	movw	r30, r10
     770:	61 91       	ld	r22, Z+
     772:	5f 01       	movw	r10, r30
     774:	c7 01       	movw	r24, r14
     776:	4a e0       	ldi	r20, 0x0A	; 10
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN5Print5printEhi>
     77e:	8c 01       	movw	r16, r24
        n += p.print('.');
     780:	c7 01       	movw	r24, r14
     782:	6e e2       	ldi	r22, 0x2E	; 46
     784:	0e 94 43 04 	call	0x886	; 0x886 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     788:	08 0f       	add	r16, r24
     78a:	19 1f       	adc	r17, r25
        n += p.print('.');
     78c:	c0 0e       	add	r12, r16
     78e:	d1 1e       	adc	r13, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     790:	21 96       	adiw	r28, 0x01	; 1
     792:	c3 30       	cpi	r28, 0x03	; 3
     794:	d1 05       	cpc	r29, r1
     796:	59 f7       	brne	.-42     	; 0x76e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
     798:	c7 01       	movw	r24, r14
     79a:	f4 01       	movw	r30, r8
     79c:	65 81       	ldd	r22, Z+5	; 0x05
     79e:	4a e0       	ldi	r20, 0x0A	; 10
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN5Print5printEhi>
     7a6:	c8 0e       	add	r12, r24
     7a8:	d9 1e       	adc	r13, r25
    return n;
}
     7aa:	c6 01       	movw	r24, r12
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	bf 90       	pop	r11
     7be:	af 90       	pop	r10
     7c0:	9f 90       	pop	r9
     7c2:	8f 90       	pop	r8
     7c4:	08 95       	ret

000007c6 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
     7c6:	fc 01       	movw	r30, r24
     7c8:	8b e6       	ldi	r24, 0x6B	; 107
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
     7d0:	12 82       	std	Z+2, r1	; 0x02
     7d2:	13 82       	std	Z+3, r1	; 0x03
     7d4:	14 82       	std	Z+4, r1	; 0x04
     7d6:	15 82       	std	Z+5, r1	; 0x05
}
     7d8:	08 95       	ret

000007da <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     7da:	0f 93       	push	r16
     7dc:	fc 01       	movw	r30, r24
     7de:	8b e6       	ldi	r24, 0x6B	; 107
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
     7e6:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
     7e8:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
     7ea:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
     7ec:	05 83       	std	Z+5, r16	; 0x05
}
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     7f2:	8b e6       	ldi	r24, 0x6B	; 107
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	90 93 51 02 	sts	0x0251, r25
     7fa:	80 93 50 02 	sts	0x0250, r24
{
    _address[0] = first_octet;
     7fe:	10 92 52 02 	sts	0x0252, r1
    _address[1] = second_octet;
     802:	10 92 53 02 	sts	0x0253, r1
    _address[2] = third_octet;
     806:	10 92 54 02 	sts	0x0254, r1
    _address[3] = fourth_octet;
     80a:	10 92 55 02 	sts	0x0255, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
     80e:	08 95       	ret

00000810 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	6c 01       	movw	r12, r24
     822:	7b 01       	movw	r14, r22
     824:	8a 01       	movw	r16, r20
  size_t n = 0;
     826:	c0 e0       	ldi	r28, 0x00	; 0
     828:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     82a:	0f c0       	rjmp	.+30     	; 0x84a <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
     82c:	d7 01       	movw	r26, r14
     82e:	6d 91       	ld	r22, X+
     830:	7d 01       	movw	r14, r26
     832:	d6 01       	movw	r26, r12
     834:	ed 91       	ld	r30, X+
     836:	fc 91       	ld	r31, X
     838:	01 90       	ld	r0, Z+
     83a:	f0 81       	ld	r31, Z
     83c:	e0 2d       	mov	r30, r0
     83e:	c6 01       	movw	r24, r12
     840:	09 95       	icall
     842:	c8 0f       	add	r28, r24
     844:	d9 1f       	adc	r29, r25
     846:	01 50       	subi	r16, 0x01	; 1
     848:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     84a:	01 15       	cp	r16, r1
     84c:	11 05       	cpc	r17, r1
     84e:	71 f7       	brne	.-36     	; 0x82c <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     850:	ce 01       	movw	r24, r28
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	08 95       	ret

00000864 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     864:	db 01       	movw	r26, r22
     866:	0d 90       	ld	r0, X+
     868:	00 20       	and	r0, r0
     86a:	e9 f7       	brne	.-6      	; 0x866 <_ZN5Print5writeEPKc+0x2>
     86c:	ad 01       	movw	r20, r26
     86e:	41 50       	subi	r20, 0x01	; 1
     870:	50 40       	sbci	r21, 0x00	; 0
     872:	46 1b       	sub	r20, r22
     874:	57 0b       	sbc	r21, r23
     876:	dc 01       	movw	r26, r24
     878:	ed 91       	ld	r30, X+
     87a:	fc 91       	ld	r31, X
     87c:	02 80       	ldd	r0, Z+2	; 0x02
     87e:	f3 81       	ldd	r31, Z+3	; 0x03
     880:	e0 2d       	mov	r30, r0
     882:	09 95       	icall
     884:	08 95       	ret

00000886 <_ZN5Print5printEc>:
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
     886:	dc 01       	movw	r26, r24
     888:	ed 91       	ld	r30, X+
     88a:	fc 91       	ld	r31, X
     88c:	01 90       	ld	r0, Z+
     88e:	f0 81       	ld	r31, Z
     890:	e0 2d       	mov	r30, r0
     892:	09 95       	icall
    size_t println(long, int = DEC);
     894:	08 95       	ret

00000896 <_ZN5Print11printNumberEmh>:
     896:	8f 92       	push	r8
     898:	9f 92       	push	r9
     89a:	af 92       	push	r10
     89c:	bf 92       	push	r11
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	a1 97       	sbiw	r28, 0x21	; 33
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	6c 01       	movw	r12, r24
     8c0:	04 2f       	mov	r16, r20
     8c2:	e5 2f       	mov	r30, r21
     8c4:	cb 01       	movw	r24, r22
     8c6:	12 2f       	mov	r17, r18
     8c8:	19 a2       	std	Y+33, r1	; 0x21
     8ca:	22 30       	cpi	r18, 0x02	; 2
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <_ZN5Print11printNumberEmh+0x3a>
     8ce:	1a e0       	ldi	r17, 0x0A	; 10
     8d0:	21 e2       	ldi	r18, 0x21	; 33
     8d2:	e2 2e       	mov	r14, r18
     8d4:	f1 2c       	mov	r15, r1
     8d6:	ec 0e       	add	r14, r28
     8d8:	fd 1e       	adc	r15, r29
     8da:	81 2e       	mov	r8, r17
     8dc:	99 24       	eor	r9, r9
     8de:	aa 24       	eor	r10, r10
     8e0:	bb 24       	eor	r11, r11
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <_ZN5Print11printNumberEmh+0x54>
     8e4:	02 2f       	mov	r16, r18
     8e6:	e3 2f       	mov	r30, r19
     8e8:	ca 01       	movw	r24, r20
     8ea:	60 2f       	mov	r22, r16
     8ec:	7e 2f       	mov	r23, r30
     8ee:	a5 01       	movw	r20, r10
     8f0:	94 01       	movw	r18, r8
     8f2:	0e 94 30 09 	call	0x1260	; 0x1260 <__udivmodsi4>
     8f6:	12 9f       	mul	r17, r18
     8f8:	80 2d       	mov	r24, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	08 1b       	sub	r16, r24
     8fe:	08 94       	sec
     900:	e1 08       	sbc	r14, r1
     902:	f1 08       	sbc	r15, r1
     904:	0a 30       	cpi	r16, 0x0A	; 10
     906:	14 f4       	brge	.+4      	; 0x90c <__stack+0xd>
     908:	00 5d       	subi	r16, 0xD0	; 208
     90a:	01 c0       	rjmp	.+2      	; 0x90e <__stack+0xf>
     90c:	09 5c       	subi	r16, 0xC9	; 201
     90e:	f7 01       	movw	r30, r14
     910:	00 83       	st	Z, r16
     912:	21 15       	cp	r18, r1
     914:	31 05       	cpc	r19, r1
     916:	41 05       	cpc	r20, r1
     918:	51 05       	cpc	r21, r1
     91a:	21 f7       	brne	.-56     	; 0x8e4 <_ZN5Print11printNumberEmh+0x4e>
     91c:	c6 01       	movw	r24, r12
     91e:	b7 01       	movw	r22, r14
     920:	0e 94 32 04 	call	0x864	; 0x864 <_ZN5Print5writeEPKc>
     924:	a1 96       	adiw	r28, 0x21	; 33
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	08 95       	ret

0000094a <_ZN5Print5printEmi>:
     94a:	21 15       	cp	r18, r1
     94c:	31 05       	cpc	r19, r1
     94e:	49 f4       	brne	.+18     	; 0x962 <_ZN5Print5printEmi+0x18>
     950:	dc 01       	movw	r26, r24
     952:	ed 91       	ld	r30, X+
     954:	fc 91       	ld	r31, X
     956:	01 90       	ld	r0, Z+
     958:	f0 81       	ld	r31, Z
     95a:	e0 2d       	mov	r30, r0
     95c:	64 2f       	mov	r22, r20
     95e:	09 95       	icall
     960:	08 95       	ret
     962:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN5Print11printNumberEmh>
     966:	08 95       	ret

00000968 <_ZN5Print5printEhi>:
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
     968:	9a 01       	movw	r18, r20
    size_t println(void);
     96a:	46 2f       	mov	r20, r22
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN5Print5printEmi>
};
     976:	08 95       	ret

00000978 <_ZN5Print5printEli>:
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	ec 01       	movw	r28, r24
     98a:	7a 01       	movw	r14, r20
     98c:	8b 01       	movw	r16, r22
     98e:	21 15       	cp	r18, r1
     990:	31 05       	cpc	r19, r1
     992:	41 f4       	brne	.+16     	; 0x9a4 <_ZN5Print5printEli+0x2c>
     994:	e8 81       	ld	r30, Y
     996:	f9 81       	ldd	r31, Y+1	; 0x01
     998:	01 90       	ld	r0, Z+
     99a:	f0 81       	ld	r31, Z
     99c:	e0 2d       	mov	r30, r0
     99e:	64 2f       	mov	r22, r20
     9a0:	09 95       	icall
     9a2:	1a c0       	rjmp	.+52     	; 0x9d8 <_ZN5Print5printEli+0x60>
     9a4:	2a 30       	cpi	r18, 0x0A	; 10
     9a6:	31 05       	cpc	r19, r1
     9a8:	a9 f4       	brne	.+42     	; 0x9d4 <_ZN5Print5printEli+0x5c>
     9aa:	77 ff       	sbrs	r23, 7
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <_ZN5Print5printEli+0x5a>
     9ae:	6d e2       	ldi	r22, 0x2D	; 45
     9b0:	0e 94 43 04 	call	0x886	; 0x886 <_ZN5Print5printEc>
     9b4:	6c 01       	movw	r12, r24
     9b6:	44 27       	eor	r20, r20
     9b8:	55 27       	eor	r21, r21
     9ba:	ba 01       	movw	r22, r20
     9bc:	4e 19       	sub	r20, r14
     9be:	5f 09       	sbc	r21, r15
     9c0:	60 0b       	sbc	r22, r16
     9c2:	71 0b       	sbc	r23, r17
     9c4:	ce 01       	movw	r24, r28
     9c6:	2a e0       	ldi	r18, 0x0A	; 10
     9c8:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN5Print11printNumberEmh>
     9cc:	c8 0e       	add	r12, r24
     9ce:	d9 1e       	adc	r13, r25
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <_ZN5Print5printEli+0x62>
     9d2:	2a e0       	ldi	r18, 0x0A	; 10
     9d4:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN5Print11printNumberEmh>
     9d8:	6c 01       	movw	r12, r24
     9da:	c6 01       	movw	r24, r12
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	08 95       	ret

000009ee <_ZN5Print5printEii>:
    size_t println(const Printable&);
    size_t println(void);
};

#endif
     9ee:	9a 01       	movw	r18, r20
     9f0:	fb 01       	movw	r30, r22
     9f2:	af 01       	movw	r20, r30
     9f4:	66 27       	eor	r22, r22
     9f6:	57 fd       	sbrc	r21, 7
     9f8:	60 95       	com	r22
     9fa:	76 2f       	mov	r23, r22
     9fc:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN5Print5printEli>
     a00:	08 95       	ret

00000a02 <_ZN5Print10printFloatEdh>:
     a02:	6f 92       	push	r6
     a04:	7f 92       	push	r7
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	3c 01       	movw	r6, r24
     a1e:	7a 01       	movw	r14, r20
     a20:	8b 01       	movw	r16, r22
     a22:	c2 2e       	mov	r12, r18
     a24:	cb 01       	movw	r24, r22
     a26:	ba 01       	movw	r22, r20
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	a9 01       	movw	r20, r18
     a2e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__cmpsf2>
     a32:	87 ff       	sbrs	r24, 7
     a34:	0a c0       	rjmp	.+20     	; 0xa4a <_ZN5Print10printFloatEdh+0x48>
     a36:	c3 01       	movw	r24, r6
     a38:	6d e2       	ldi	r22, 0x2D	; 45
     a3a:	0e 94 43 04 	call	0x886	; 0x886 <_ZN5Print5printEc>
     a3e:	ec 01       	movw	r28, r24
     a40:	17 fb       	bst	r17, 7
     a42:	10 95       	com	r17
     a44:	17 f9       	bld	r17, 7
     a46:	10 95       	com	r17
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <_ZN5Print10printFloatEdh+0x4c>
     a4a:	c0 e0       	ldi	r28, 0x00	; 0
     a4c:	d0 e0       	ldi	r29, 0x00	; 0
     a4e:	dd 24       	eor	r13, r13
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	2f e3       	ldi	r18, 0x3F	; 63
     a58:	11 c0       	rjmp	.+34     	; 0xa7c <_ZN5Print10printFloatEdh+0x7a>
     a5a:	da 01       	movw	r26, r20
     a5c:	f9 01       	movw	r30, r18
     a5e:	6b 2f       	mov	r22, r27
     a60:	74 2f       	mov	r23, r20
     a62:	8f 2f       	mov	r24, r31
     a64:	92 2f       	mov	r25, r18
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e2       	ldi	r20, 0x20	; 32
     a6c:	51 e4       	ldi	r21, 0x41	; 65
     a6e:	0e 94 50 07 	call	0xea0	; 0xea0 <__divsf3>
     a72:	56 2f       	mov	r21, r22
     a74:	47 2f       	mov	r20, r23
     a76:	38 2f       	mov	r19, r24
     a78:	29 2f       	mov	r18, r25
     a7a:	d3 94       	inc	r13
     a7c:	dc 14       	cp	r13, r12
     a7e:	68 f3       	brcs	.-38     	; 0xa5a <_ZN5Print10printFloatEdh+0x58>
     a80:	c8 01       	movw	r24, r16
     a82:	b7 01       	movw	r22, r14
     a84:	da 01       	movw	r26, r20
     a86:	f9 01       	movw	r30, r18
     a88:	2b 2f       	mov	r18, r27
     a8a:	34 2f       	mov	r19, r20
     a8c:	4f 2f       	mov	r20, r31
     a8e:	5e 2f       	mov	r21, r30
     a90:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__addsf3>
     a94:	5b 01       	movw	r10, r22
     a96:	f8 2e       	mov	r15, r24
     a98:	99 2e       	mov	r9, r25
     a9a:	7b 2d       	mov	r23, r11
     a9c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <__fixunssfsi>
     aa0:	16 2f       	mov	r17, r22
     aa2:	d7 2e       	mov	r13, r23
     aa4:	e8 2e       	mov	r14, r24
     aa6:	09 2f       	mov	r16, r25
     aa8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__floatunsisf>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	6a 2d       	mov	r22, r10
     ab2:	7b 2d       	mov	r23, r11
     ab4:	8f 2d       	mov	r24, r15
     ab6:	99 2d       	mov	r25, r9
     ab8:	0e 94 e7 06 	call	0xdce	; 0xdce <__subsf3>
     abc:	96 2e       	mov	r9, r22
     abe:	a7 2e       	mov	r10, r23
     ac0:	b8 2e       	mov	r11, r24
     ac2:	f9 2e       	mov	r15, r25
     ac4:	c3 01       	movw	r24, r6
     ac6:	41 2f       	mov	r20, r17
     ac8:	5d 2d       	mov	r21, r13
     aca:	6e 2d       	mov	r22, r14
     acc:	70 2f       	mov	r23, r16
     ace:	2a e0       	ldi	r18, 0x0A	; 10
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN5Print5printEmi>
     ad6:	c8 0f       	add	r28, r24
     ad8:	d9 1f       	adc	r29, r25
     ada:	cc 20       	and	r12, r12
     adc:	b9 f1       	breq	.+110    	; 0xb4c <_ZN5Print10printFloatEdh+0x14a>
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     ade:	c3 01       	movw	r24, r6
     ae0:	66 e2       	ldi	r22, 0x26	; 38
     ae2:	71 e0       	ldi	r23, 0x01	; 1
     ae4:	0e 94 32 04 	call	0x864	; 0x864 <_ZN5Print5writeEPKc>
     ae8:	c8 0f       	add	r28, r24
     aea:	d9 1f       	adc	r29, r25
     aec:	2f c0       	rjmp	.+94     	; 0xb4c <_ZN5Print10printFloatEdh+0x14a>
     aee:	69 2d       	mov	r22, r9
     af0:	7a 2d       	mov	r23, r10
     af2:	8b 2d       	mov	r24, r11
     af4:	9f 2d       	mov	r25, r15
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e2       	ldi	r20, 0x20	; 32
     afc:	51 e4       	ldi	r21, 0x41	; 65
     afe:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     b02:	d6 2e       	mov	r13, r22
     b04:	b7 2e       	mov	r11, r23
     b06:	a8 2e       	mov	r10, r24
     b08:	99 2e       	mov	r9, r25
     b0a:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fixsfsi>
    size_t println(void);
};

#endif
     b0e:	7b 01       	movw	r14, r22
     b10:	00 27       	eor	r16, r16
     b12:	f7 fc       	sbrc	r15, 7
     b14:	00 95       	com	r16
     b16:	10 2f       	mov	r17, r16
     b18:	c3 01       	movw	r24, r6
     b1a:	b8 01       	movw	r22, r16
     b1c:	a7 01       	movw	r20, r14
     b1e:	2a e0       	ldi	r18, 0x0A	; 10
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN5Print5printEli>
     b26:	c8 0f       	add	r28, r24
     b28:	d9 1f       	adc	r29, r25
     b2a:	c8 01       	movw	r24, r16
     b2c:	b7 01       	movw	r22, r14
     b2e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__floatsisf>
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
     b36:	6d 2d       	mov	r22, r13
     b38:	7b 2d       	mov	r23, r11
     b3a:	8a 2d       	mov	r24, r10
     b3c:	99 2d       	mov	r25, r9
     b3e:	0e 94 e7 06 	call	0xdce	; 0xdce <__subsf3>
     b42:	96 2e       	mov	r9, r22
     b44:	a7 2e       	mov	r10, r23
     b46:	b8 2e       	mov	r11, r24
     b48:	f9 2e       	mov	r15, r25
     b4a:	ca 94       	dec	r12
     b4c:	cc 20       	and	r12, r12
     b4e:	79 f6       	brne	.-98     	; 0xaee <_ZN5Print10printFloatEdh+0xec>
     b50:	ce 01       	movw	r24, r28
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	bf 90       	pop	r11
     b64:	af 90       	pop	r10
     b66:	9f 90       	pop	r9
     b68:	7f 90       	pop	r7
     b6a:	6f 90       	pop	r6
     b6c:	08 95       	ret

00000b6e <_ZN5Print5printEdi>:
     b6e:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN5Print10printFloatEdh>
     b72:	08 95       	ret

00000b74 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	29 f0       	breq	.+10     	; 0xb82 <_Z10randomSeedj+0xe>
    srandom(seed);
     b78:	bc 01       	movw	r22, r24
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 06 0b 	call	0x160c	; 0x160c <srandom>
     b82:	08 95       	ret

00000b84 <_Z6randoml>:
  }
}

long random(long howbig)
{
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	7b 01       	movw	r14, r22
     b8e:	8c 01       	movw	r16, r24
  if (howbig == 0) {
     b90:	61 15       	cp	r22, r1
     b92:	71 05       	cpc	r23, r1
     b94:	81 05       	cpc	r24, r1
     b96:	91 05       	cpc	r25, r1
     b98:	49 f0       	breq	.+18     	; 0xbac <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
     b9a:	0e 94 01 0b 	call	0x1602	; 0x1602 <random>
     b9e:	a8 01       	movw	r20, r16
     ba0:	97 01       	movw	r18, r14
     ba2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__divmodsi4>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
     bb2:	b9 01       	movw	r22, r18
     bb4:	ca 01       	movw	r24, r20
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	08 95       	ret

00000bc0 <main>:
#include <Arduino.h>

int main(void)
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
	init();
     bc4:	0e 94 8b 06 	call	0xd16	; 0xd16 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     bc8:	0e 94 bd 00 	call	0x17a	; 0x17a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     bcc:	c5 e9       	ldi	r28, 0x95	; 149
     bce:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     bd0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <loop>
		if (serialEventRun) serialEventRun();
     bd4:	20 97       	sbiw	r28, 0x00	; 0
     bd6:	e1 f3       	breq	.-8      	; 0xbd0 <main+0x10>
     bd8:	0e 94 95 02 	call	0x52a	; 0x52a <_Z14serialEventRunv>
     bdc:	f9 cf       	rjmp	.-14     	; 0xbd0 <main+0x10>

00000bde <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
     bde:	0e 94 87 09 	call	0x130e	; 0x130e <malloc>
}
     be2:	08 95       	ret

00000be4 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
     be4:	0e 94 21 0a 	call	0x1442	; 0x1442 <free>
} 
     be8:	08 95       	ret

00000bea <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
     bea:	08 95       	ret

00000bec <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1
     bf6:	2f 93       	push	r18
     bf8:	3f 93       	push	r19
     bfa:	8f 93       	push	r24
     bfc:	9f 93       	push	r25
     bfe:	af 93       	push	r26
     c00:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     c02:	80 91 5a 02 	lds	r24, 0x025A
     c06:	90 91 5b 02 	lds	r25, 0x025B
     c0a:	a0 91 5c 02 	lds	r26, 0x025C
     c0e:	b0 91 5d 02 	lds	r27, 0x025D
	unsigned char f = timer0_fract;
     c12:	30 91 5e 02 	lds	r19, 0x025E

	m += MILLIS_INC;
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	a1 1d       	adc	r26, r1
     c1a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     c1c:	23 2f       	mov	r18, r19
     c1e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     c20:	2d 37       	cpi	r18, 0x7D	; 125
     c22:	20 f0       	brcs	.+8      	; 0xc2c <__vector_16+0x40>
		f -= FRACT_MAX;
     c24:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	a1 1d       	adc	r26, r1
     c2a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     c2c:	20 93 5e 02 	sts	0x025E, r18
	timer0_millis = m;
     c30:	80 93 5a 02 	sts	0x025A, r24
     c34:	90 93 5b 02 	sts	0x025B, r25
     c38:	a0 93 5c 02 	sts	0x025C, r26
     c3c:	b0 93 5d 02 	sts	0x025D, r27
	timer0_overflow_count++;
     c40:	80 91 56 02 	lds	r24, 0x0256
     c44:	90 91 57 02 	lds	r25, 0x0257
     c48:	a0 91 58 02 	lds	r26, 0x0258
     c4c:	b0 91 59 02 	lds	r27, 0x0259
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	a1 1d       	adc	r26, r1
     c54:	b1 1d       	adc	r27, r1
     c56:	80 93 56 02 	sts	0x0256, r24
     c5a:	90 93 57 02 	sts	0x0257, r25
     c5e:	a0 93 58 02 	sts	0x0258, r26
     c62:	b0 93 59 02 	sts	0x0259, r27
}
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     c7c:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     c7e:	f8 94       	cli
	m = timer0_overflow_count;
     c80:	20 91 56 02 	lds	r18, 0x0256
     c84:	30 91 57 02 	lds	r19, 0x0257
     c88:	40 91 58 02 	lds	r20, 0x0258
     c8c:	50 91 59 02 	lds	r21, 0x0259
#if defined(TCNT0)
	t = TCNT0;
     c90:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     c92:	a8 9b       	sbis	0x15, 0	; 21
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <micros+0x26>
     c96:	8f 3f       	cpi	r24, 0xFF	; 255
     c98:	21 f0       	breq	.+8      	; 0xca2 <micros+0x26>
		m++;
     c9a:	2f 5f       	subi	r18, 0xFF	; 255
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     ca2:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     ca4:	54 2f       	mov	r21, r20
     ca6:	43 2f       	mov	r20, r19
     ca8:	32 2f       	mov	r19, r18
     caa:	22 27       	eor	r18, r18
     cac:	28 0f       	add	r18, r24
     cae:	31 1d       	adc	r19, r1
     cb0:	41 1d       	adc	r20, r1
     cb2:	51 1d       	adc	r21, r1
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	44 1f       	adc	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	8a 95       	dec	r24
     cc0:	d1 f7       	brne	.-12     	; 0xcb6 <micros+0x3a>
}
     cc2:	b9 01       	movw	r22, r18
     cc4:	ca 01       	movw	r24, r20
     cc6:	08 95       	ret

00000cc8 <delay>:

void delay(unsigned long ms)
{
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	7b 01       	movw	r14, r22
     cd6:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     cd8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <micros>
     cdc:	eb 01       	movw	r28, r22

	while (ms > 0) {
     cde:	0f c0       	rjmp	.+30     	; 0xcfe <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     ce0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <micros>
     ce4:	6c 1b       	sub	r22, r28
     ce6:	7d 0b       	sbc	r23, r29
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	68 3e       	cpi	r22, 0xE8	; 232
     cec:	78 07       	cpc	r23, r24
     cee:	38 f0       	brcs	.+14     	; 0xcfe <delay+0x36>
			ms--;
     cf0:	08 94       	sec
     cf2:	e1 08       	sbc	r14, r1
     cf4:	f1 08       	sbc	r15, r1
     cf6:	01 09       	sbc	r16, r1
     cf8:	11 09       	sbc	r17, r1
			start += 1000;
     cfa:	c8 51       	subi	r28, 0x18	; 24
     cfc:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     cfe:	e1 14       	cp	r14, r1
     d00:	f1 04       	cpc	r15, r1
     d02:	01 05       	cpc	r16, r1
     d04:	11 05       	cpc	r17, r1
     d06:	61 f7       	brne	.-40     	; 0xce0 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	08 95       	ret

00000d16 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d16:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d18:	84 b5       	in	r24, 0x24	; 36
     d1a:	82 60       	ori	r24, 0x02	; 2
     d1c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d1e:	84 b5       	in	r24, 0x24	; 36
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d24:	85 b5       	in	r24, 0x25	; 37
     d26:	82 60       	ori	r24, 0x02	; 2
     d28:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d2a:	85 b5       	in	r24, 0x25	; 37
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d30:	ee e6       	ldi	r30, 0x6E	; 110
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	81 60       	ori	r24, 0x01	; 1
     d38:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d3a:	e1 e8       	ldi	r30, 0x81	; 129
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d40:	80 81       	ld	r24, Z
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d46:	80 81       	ld	r24, Z
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d4c:	e0 e8       	ldi	r30, 0x80	; 128
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d56:	e1 eb       	ldi	r30, 0xB1	; 177
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	84 60       	ori	r24, 0x04	; 4
     d5e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d60:	e0 eb       	ldi	r30, 0xB0	; 176
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     d6a:	ea e7       	ldi	r30, 0x7A	; 122
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	84 60       	ori	r24, 0x04	; 4
     d72:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     d74:	80 81       	ld	r24, Z
     d76:	82 60       	ori	r24, 0x02	; 2
     d78:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     d7a:	80 81       	ld	r24, Z
     d7c:	81 60       	ori	r24, 0x01	; 1
     d7e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d80:	80 81       	ld	r24, Z
     d82:	80 68       	ori	r24, 0x80	; 128
     d84:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     d86:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     d8a:	08 95       	ret

00000d8c <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     d8c:	8e 30       	cpi	r24, 0x0E	; 14
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <analogRead+0x6>
     d90:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     d92:	87 70       	andi	r24, 0x07	; 7
     d94:	90 91 32 01 	lds	r25, 0x0132
     d98:	92 95       	swap	r25
     d9a:	99 0f       	add	r25, r25
     d9c:	99 0f       	add	r25, r25
     d9e:	90 7c       	andi	r25, 0xC0	; 192
     da0:	98 2b       	or	r25, r24
     da2:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     da6:	80 91 7a 00 	lds	r24, 0x007A
     daa:	80 64       	ori	r24, 0x40	; 64
     dac:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     db0:	80 91 7a 00 	lds	r24, 0x007A
     db4:	86 fd       	sbrc	r24, 6
     db6:	fc cf       	rjmp	.-8      	; 0xdb0 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     db8:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     dbc:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     dc0:	93 2f       	mov	r25, r19
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	28 2b       	or	r18, r24
     dc8:	39 2b       	or	r19, r25
}
     dca:	c9 01       	movw	r24, r18
     dcc:	08 95       	ret

00000dce <__subsf3>:
     dce:	50 58       	subi	r21, 0x80	; 128

00000dd0 <__addsf3>:
     dd0:	bb 27       	eor	r27, r27
     dd2:	aa 27       	eor	r26, r26
     dd4:	0e d0       	rcall	.+28     	; 0xdf2 <__addsf3x>
     dd6:	75 c1       	rjmp	.+746    	; 0x10c2 <__fp_round>
     dd8:	66 d1       	rcall	.+716    	; 0x10a6 <__fp_pscA>
     dda:	30 f0       	brcs	.+12     	; 0xde8 <__addsf3+0x18>
     ddc:	6b d1       	rcall	.+726    	; 0x10b4 <__fp_pscB>
     dde:	20 f0       	brcs	.+8      	; 0xde8 <__addsf3+0x18>
     de0:	31 f4       	brne	.+12     	; 0xdee <__addsf3+0x1e>
     de2:	9f 3f       	cpi	r25, 0xFF	; 255
     de4:	11 f4       	brne	.+4      	; 0xdea <__addsf3+0x1a>
     de6:	1e f4       	brtc	.+6      	; 0xdee <__addsf3+0x1e>
     de8:	5b c1       	rjmp	.+694    	; 0x10a0 <__fp_nan>
     dea:	0e f4       	brtc	.+2      	; 0xdee <__addsf3+0x1e>
     dec:	e0 95       	com	r30
     dee:	e7 fb       	bst	r30, 7
     df0:	51 c1       	rjmp	.+674    	; 0x1094 <__fp_inf>

00000df2 <__addsf3x>:
     df2:	e9 2f       	mov	r30, r25
     df4:	77 d1       	rcall	.+750    	; 0x10e4 <__fp_split3>
     df6:	80 f3       	brcs	.-32     	; 0xdd8 <__addsf3+0x8>
     df8:	ba 17       	cp	r27, r26
     dfa:	62 07       	cpc	r22, r18
     dfc:	73 07       	cpc	r23, r19
     dfe:	84 07       	cpc	r24, r20
     e00:	95 07       	cpc	r25, r21
     e02:	18 f0       	brcs	.+6      	; 0xe0a <__addsf3x+0x18>
     e04:	71 f4       	brne	.+28     	; 0xe22 <__addsf3x+0x30>
     e06:	9e f5       	brtc	.+102    	; 0xe6e <__addsf3x+0x7c>
     e08:	8f c1       	rjmp	.+798    	; 0x1128 <__fp_zero>
     e0a:	0e f4       	brtc	.+2      	; 0xe0e <__addsf3x+0x1c>
     e0c:	e0 95       	com	r30
     e0e:	0b 2e       	mov	r0, r27
     e10:	ba 2f       	mov	r27, r26
     e12:	a0 2d       	mov	r26, r0
     e14:	0b 01       	movw	r0, r22
     e16:	b9 01       	movw	r22, r18
     e18:	90 01       	movw	r18, r0
     e1a:	0c 01       	movw	r0, r24
     e1c:	ca 01       	movw	r24, r20
     e1e:	a0 01       	movw	r20, r0
     e20:	11 24       	eor	r1, r1
     e22:	ff 27       	eor	r31, r31
     e24:	59 1b       	sub	r21, r25
     e26:	99 f0       	breq	.+38     	; 0xe4e <__addsf3x+0x5c>
     e28:	59 3f       	cpi	r21, 0xF9	; 249
     e2a:	50 f4       	brcc	.+20     	; 0xe40 <__addsf3x+0x4e>
     e2c:	50 3e       	cpi	r21, 0xE0	; 224
     e2e:	68 f1       	brcs	.+90     	; 0xe8a <__addsf3x+0x98>
     e30:	1a 16       	cp	r1, r26
     e32:	f0 40       	sbci	r31, 0x00	; 0
     e34:	a2 2f       	mov	r26, r18
     e36:	23 2f       	mov	r18, r19
     e38:	34 2f       	mov	r19, r20
     e3a:	44 27       	eor	r20, r20
     e3c:	58 5f       	subi	r21, 0xF8	; 248
     e3e:	f3 cf       	rjmp	.-26     	; 0xe26 <__addsf3x+0x34>
     e40:	46 95       	lsr	r20
     e42:	37 95       	ror	r19
     e44:	27 95       	ror	r18
     e46:	a7 95       	ror	r26
     e48:	f0 40       	sbci	r31, 0x00	; 0
     e4a:	53 95       	inc	r21
     e4c:	c9 f7       	brne	.-14     	; 0xe40 <__addsf3x+0x4e>
     e4e:	7e f4       	brtc	.+30     	; 0xe6e <__addsf3x+0x7c>
     e50:	1f 16       	cp	r1, r31
     e52:	ba 0b       	sbc	r27, r26
     e54:	62 0b       	sbc	r22, r18
     e56:	73 0b       	sbc	r23, r19
     e58:	84 0b       	sbc	r24, r20
     e5a:	ba f0       	brmi	.+46     	; 0xe8a <__addsf3x+0x98>
     e5c:	91 50       	subi	r25, 0x01	; 1
     e5e:	a1 f0       	breq	.+40     	; 0xe88 <__addsf3x+0x96>
     e60:	ff 0f       	add	r31, r31
     e62:	bb 1f       	adc	r27, r27
     e64:	66 1f       	adc	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	88 1f       	adc	r24, r24
     e6a:	c2 f7       	brpl	.-16     	; 0xe5c <__addsf3x+0x6a>
     e6c:	0e c0       	rjmp	.+28     	; 0xe8a <__addsf3x+0x98>
     e6e:	ba 0f       	add	r27, r26
     e70:	62 1f       	adc	r22, r18
     e72:	73 1f       	adc	r23, r19
     e74:	84 1f       	adc	r24, r20
     e76:	48 f4       	brcc	.+18     	; 0xe8a <__addsf3x+0x98>
     e78:	87 95       	ror	r24
     e7a:	77 95       	ror	r23
     e7c:	67 95       	ror	r22
     e7e:	b7 95       	ror	r27
     e80:	f7 95       	ror	r31
     e82:	9e 3f       	cpi	r25, 0xFE	; 254
     e84:	08 f0       	brcs	.+2      	; 0xe88 <__addsf3x+0x96>
     e86:	b3 cf       	rjmp	.-154    	; 0xdee <__addsf3+0x1e>
     e88:	93 95       	inc	r25
     e8a:	88 0f       	add	r24, r24
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__addsf3x+0x9e>
     e8e:	99 27       	eor	r25, r25
     e90:	ee 0f       	add	r30, r30
     e92:	97 95       	ror	r25
     e94:	87 95       	ror	r24
     e96:	08 95       	ret

00000e98 <__cmpsf2>:
     e98:	d9 d0       	rcall	.+434    	; 0x104c <__fp_cmp>
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <__cmpsf2+0x6>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	08 95       	ret

00000ea0 <__divsf3>:
     ea0:	0c d0       	rcall	.+24     	; 0xeba <__divsf3x>
     ea2:	0f c1       	rjmp	.+542    	; 0x10c2 <__fp_round>
     ea4:	07 d1       	rcall	.+526    	; 0x10b4 <__fp_pscB>
     ea6:	40 f0       	brcs	.+16     	; 0xeb8 <__divsf3+0x18>
     ea8:	fe d0       	rcall	.+508    	; 0x10a6 <__fp_pscA>
     eaa:	30 f0       	brcs	.+12     	; 0xeb8 <__divsf3+0x18>
     eac:	21 f4       	brne	.+8      	; 0xeb6 <__divsf3+0x16>
     eae:	5f 3f       	cpi	r21, 0xFF	; 255
     eb0:	19 f0       	breq	.+6      	; 0xeb8 <__divsf3+0x18>
     eb2:	f0 c0       	rjmp	.+480    	; 0x1094 <__fp_inf>
     eb4:	51 11       	cpse	r21, r1
     eb6:	39 c1       	rjmp	.+626    	; 0x112a <__fp_szero>
     eb8:	f3 c0       	rjmp	.+486    	; 0x10a0 <__fp_nan>

00000eba <__divsf3x>:
     eba:	14 d1       	rcall	.+552    	; 0x10e4 <__fp_split3>
     ebc:	98 f3       	brcs	.-26     	; 0xea4 <__divsf3+0x4>

00000ebe <__divsf3_pse>:
     ebe:	99 23       	and	r25, r25
     ec0:	c9 f3       	breq	.-14     	; 0xeb4 <__divsf3+0x14>
     ec2:	55 23       	and	r21, r21
     ec4:	b1 f3       	breq	.-20     	; 0xeb2 <__divsf3+0x12>
     ec6:	95 1b       	sub	r25, r21
     ec8:	55 0b       	sbc	r21, r21
     eca:	bb 27       	eor	r27, r27
     ecc:	aa 27       	eor	r26, r26
     ece:	62 17       	cp	r22, r18
     ed0:	73 07       	cpc	r23, r19
     ed2:	84 07       	cpc	r24, r20
     ed4:	38 f0       	brcs	.+14     	; 0xee4 <__divsf3_pse+0x26>
     ed6:	9f 5f       	subi	r25, 0xFF	; 255
     ed8:	5f 4f       	sbci	r21, 0xFF	; 255
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	44 1f       	adc	r20, r20
     ee0:	aa 1f       	adc	r26, r26
     ee2:	a9 f3       	breq	.-22     	; 0xece <__divsf3_pse+0x10>
     ee4:	33 d0       	rcall	.+102    	; 0xf4c <__divsf3_pse+0x8e>
     ee6:	0e 2e       	mov	r0, r30
     ee8:	3a f0       	brmi	.+14     	; 0xef8 <__divsf3_pse+0x3a>
     eea:	e0 e8       	ldi	r30, 0x80	; 128
     eec:	30 d0       	rcall	.+96     	; 0xf4e <__divsf3_pse+0x90>
     eee:	91 50       	subi	r25, 0x01	; 1
     ef0:	50 40       	sbci	r21, 0x00	; 0
     ef2:	e6 95       	lsr	r30
     ef4:	00 1c       	adc	r0, r0
     ef6:	ca f7       	brpl	.-14     	; 0xeea <__divsf3_pse+0x2c>
     ef8:	29 d0       	rcall	.+82     	; 0xf4c <__divsf3_pse+0x8e>
     efa:	fe 2f       	mov	r31, r30
     efc:	27 d0       	rcall	.+78     	; 0xf4c <__divsf3_pse+0x8e>
     efe:	66 0f       	add	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	bb 1f       	adc	r27, r27
     f06:	26 17       	cp	r18, r22
     f08:	37 07       	cpc	r19, r23
     f0a:	48 07       	cpc	r20, r24
     f0c:	ab 07       	cpc	r26, r27
     f0e:	b0 e8       	ldi	r27, 0x80	; 128
     f10:	09 f0       	breq	.+2      	; 0xf14 <__divsf3_pse+0x56>
     f12:	bb 0b       	sbc	r27, r27
     f14:	80 2d       	mov	r24, r0
     f16:	bf 01       	movw	r22, r30
     f18:	ff 27       	eor	r31, r31
     f1a:	93 58       	subi	r25, 0x83	; 131
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	2a f0       	brmi	.+10     	; 0xf2a <__divsf3_pse+0x6c>
     f20:	9e 3f       	cpi	r25, 0xFE	; 254
     f22:	51 05       	cpc	r21, r1
     f24:	68 f0       	brcs	.+26     	; 0xf40 <__divsf3_pse+0x82>
     f26:	b6 c0       	rjmp	.+364    	; 0x1094 <__fp_inf>
     f28:	00 c1       	rjmp	.+512    	; 0x112a <__fp_szero>
     f2a:	5f 3f       	cpi	r21, 0xFF	; 255
     f2c:	ec f3       	brlt	.-6      	; 0xf28 <__divsf3_pse+0x6a>
     f2e:	98 3e       	cpi	r25, 0xE8	; 232
     f30:	dc f3       	brlt	.-10     	; 0xf28 <__divsf3_pse+0x6a>
     f32:	86 95       	lsr	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b7 95       	ror	r27
     f3a:	f7 95       	ror	r31
     f3c:	9f 5f       	subi	r25, 0xFF	; 255
     f3e:	c9 f7       	brne	.-14     	; 0xf32 <__divsf3_pse+0x74>
     f40:	88 0f       	add	r24, r24
     f42:	91 1d       	adc	r25, r1
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret
     f4c:	e1 e0       	ldi	r30, 0x01	; 1
     f4e:	66 0f       	add	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	88 1f       	adc	r24, r24
     f54:	bb 1f       	adc	r27, r27
     f56:	62 17       	cp	r22, r18
     f58:	73 07       	cpc	r23, r19
     f5a:	84 07       	cpc	r24, r20
     f5c:	ba 07       	cpc	r27, r26
     f5e:	20 f0       	brcs	.+8      	; 0xf68 <__divsf3_pse+0xaa>
     f60:	62 1b       	sub	r22, r18
     f62:	73 0b       	sbc	r23, r19
     f64:	84 0b       	sbc	r24, r20
     f66:	ba 0b       	sbc	r27, r26
     f68:	ee 1f       	adc	r30, r30
     f6a:	88 f7       	brcc	.-30     	; 0xf4e <__divsf3_pse+0x90>
     f6c:	e0 95       	com	r30
     f6e:	08 95       	ret

00000f70 <__fixsfsi>:
     f70:	04 d0       	rcall	.+8      	; 0xf7a <__fixunssfsi>
     f72:	68 94       	set
     f74:	b1 11       	cpse	r27, r1
     f76:	d9 c0       	rjmp	.+434    	; 0x112a <__fp_szero>
     f78:	08 95       	ret

00000f7a <__fixunssfsi>:
     f7a:	bc d0       	rcall	.+376    	; 0x10f4 <__fp_splitA>
     f7c:	88 f0       	brcs	.+34     	; 0xfa0 <__fixunssfsi+0x26>
     f7e:	9f 57       	subi	r25, 0x7F	; 127
     f80:	90 f0       	brcs	.+36     	; 0xfa6 <__fixunssfsi+0x2c>
     f82:	b9 2f       	mov	r27, r25
     f84:	99 27       	eor	r25, r25
     f86:	b7 51       	subi	r27, 0x17	; 23
     f88:	a0 f0       	brcs	.+40     	; 0xfb2 <__fixunssfsi+0x38>
     f8a:	d1 f0       	breq	.+52     	; 0xfc0 <__fixunssfsi+0x46>
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	1a f0       	brmi	.+6      	; 0xf9c <__fixunssfsi+0x22>
     f96:	ba 95       	dec	r27
     f98:	c9 f7       	brne	.-14     	; 0xf8c <__fixunssfsi+0x12>
     f9a:	12 c0       	rjmp	.+36     	; 0xfc0 <__fixunssfsi+0x46>
     f9c:	b1 30       	cpi	r27, 0x01	; 1
     f9e:	81 f0       	breq	.+32     	; 0xfc0 <__fixunssfsi+0x46>
     fa0:	c3 d0       	rcall	.+390    	; 0x1128 <__fp_zero>
     fa2:	b1 e0       	ldi	r27, 0x01	; 1
     fa4:	08 95       	ret
     fa6:	c0 c0       	rjmp	.+384    	; 0x1128 <__fp_zero>
     fa8:	67 2f       	mov	r22, r23
     faa:	78 2f       	mov	r23, r24
     fac:	88 27       	eor	r24, r24
     fae:	b8 5f       	subi	r27, 0xF8	; 248
     fb0:	39 f0       	breq	.+14     	; 0xfc0 <__fixunssfsi+0x46>
     fb2:	b9 3f       	cpi	r27, 0xF9	; 249
     fb4:	cc f3       	brlt	.-14     	; 0xfa8 <__fixunssfsi+0x2e>
     fb6:	86 95       	lsr	r24
     fb8:	77 95       	ror	r23
     fba:	67 95       	ror	r22
     fbc:	b3 95       	inc	r27
     fbe:	d9 f7       	brne	.-10     	; 0xfb6 <__fixunssfsi+0x3c>
     fc0:	3e f4       	brtc	.+14     	; 0xfd0 <__fixunssfsi+0x56>
     fc2:	90 95       	com	r25
     fc4:	80 95       	com	r24
     fc6:	70 95       	com	r23
     fc8:	61 95       	neg	r22
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	08 95       	ret

00000fd2 <__floatunsisf>:
     fd2:	e8 94       	clt
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <__floatsisf+0x12>

00000fd6 <__floatsisf>:
     fd6:	97 fb       	bst	r25, 7
     fd8:	3e f4       	brtc	.+14     	; 0xfe8 <__floatsisf+0x12>
     fda:	90 95       	com	r25
     fdc:	80 95       	com	r24
     fde:	70 95       	com	r23
     fe0:	61 95       	neg	r22
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	99 23       	and	r25, r25
     fea:	a9 f0       	breq	.+42     	; 0x1016 <__floatsisf+0x40>
     fec:	f9 2f       	mov	r31, r25
     fee:	96 e9       	ldi	r25, 0x96	; 150
     ff0:	bb 27       	eor	r27, r27
     ff2:	93 95       	inc	r25
     ff4:	f6 95       	lsr	r31
     ff6:	87 95       	ror	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f1 11       	cpse	r31, r1
    1000:	f8 cf       	rjmp	.-16     	; 0xff2 <__floatsisf+0x1c>
    1002:	fa f4       	brpl	.+62     	; 0x1042 <__floatsisf+0x6c>
    1004:	bb 0f       	add	r27, r27
    1006:	11 f4       	brne	.+4      	; 0x100c <__floatsisf+0x36>
    1008:	60 ff       	sbrs	r22, 0
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <__floatsisf+0x6c>
    100c:	6f 5f       	subi	r22, 0xFF	; 255
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	16 c0       	rjmp	.+44     	; 0x1042 <__floatsisf+0x6c>
    1016:	88 23       	and	r24, r24
    1018:	11 f0       	breq	.+4      	; 0x101e <__floatsisf+0x48>
    101a:	96 e9       	ldi	r25, 0x96	; 150
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <__floatsisf+0x6a>
    101e:	77 23       	and	r23, r23
    1020:	21 f0       	breq	.+8      	; 0x102a <__floatsisf+0x54>
    1022:	9e e8       	ldi	r25, 0x8E	; 142
    1024:	87 2f       	mov	r24, r23
    1026:	76 2f       	mov	r23, r22
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <__floatsisf+0x5e>
    102a:	66 23       	and	r22, r22
    102c:	71 f0       	breq	.+28     	; 0x104a <__floatsisf+0x74>
    102e:	96 e8       	ldi	r25, 0x86	; 134
    1030:	86 2f       	mov	r24, r22
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	2a f0       	brmi	.+10     	; 0x1042 <__floatsisf+0x6c>
    1038:	9a 95       	dec	r25
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	da f7       	brpl	.-10     	; 0x1038 <__floatsisf+0x62>
    1042:	88 0f       	add	r24, r24
    1044:	96 95       	lsr	r25
    1046:	87 95       	ror	r24
    1048:	97 f9       	bld	r25, 7
    104a:	08 95       	ret

0000104c <__fp_cmp>:
    104c:	99 0f       	add	r25, r25
    104e:	00 08       	sbc	r0, r0
    1050:	55 0f       	add	r21, r21
    1052:	aa 0b       	sbc	r26, r26
    1054:	e0 e8       	ldi	r30, 0x80	; 128
    1056:	fe ef       	ldi	r31, 0xFE	; 254
    1058:	16 16       	cp	r1, r22
    105a:	17 06       	cpc	r1, r23
    105c:	e8 07       	cpc	r30, r24
    105e:	f9 07       	cpc	r31, r25
    1060:	c0 f0       	brcs	.+48     	; 0x1092 <__fp_cmp+0x46>
    1062:	12 16       	cp	r1, r18
    1064:	13 06       	cpc	r1, r19
    1066:	e4 07       	cpc	r30, r20
    1068:	f5 07       	cpc	r31, r21
    106a:	98 f0       	brcs	.+38     	; 0x1092 <__fp_cmp+0x46>
    106c:	62 1b       	sub	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	84 0b       	sbc	r24, r20
    1072:	95 0b       	sbc	r25, r21
    1074:	39 f4       	brne	.+14     	; 0x1084 <__fp_cmp+0x38>
    1076:	0a 26       	eor	r0, r26
    1078:	61 f0       	breq	.+24     	; 0x1092 <__fp_cmp+0x46>
    107a:	23 2b       	or	r18, r19
    107c:	24 2b       	or	r18, r20
    107e:	25 2b       	or	r18, r21
    1080:	21 f4       	brne	.+8      	; 0x108a <__fp_cmp+0x3e>
    1082:	08 95       	ret
    1084:	0a 26       	eor	r0, r26
    1086:	09 f4       	brne	.+2      	; 0x108a <__fp_cmp+0x3e>
    1088:	a1 40       	sbci	r26, 0x01	; 1
    108a:	a6 95       	lsr	r26
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	81 1d       	adc	r24, r1
    1090:	81 1d       	adc	r24, r1
    1092:	08 95       	ret

00001094 <__fp_inf>:
    1094:	97 f9       	bld	r25, 7
    1096:	9f 67       	ori	r25, 0x7F	; 127
    1098:	80 e8       	ldi	r24, 0x80	; 128
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	08 95       	ret

000010a0 <__fp_nan>:
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	80 ec       	ldi	r24, 0xC0	; 192
    10a4:	08 95       	ret

000010a6 <__fp_pscA>:
    10a6:	00 24       	eor	r0, r0
    10a8:	0a 94       	dec	r0
    10aa:	16 16       	cp	r1, r22
    10ac:	17 06       	cpc	r1, r23
    10ae:	18 06       	cpc	r1, r24
    10b0:	09 06       	cpc	r0, r25
    10b2:	08 95       	ret

000010b4 <__fp_pscB>:
    10b4:	00 24       	eor	r0, r0
    10b6:	0a 94       	dec	r0
    10b8:	12 16       	cp	r1, r18
    10ba:	13 06       	cpc	r1, r19
    10bc:	14 06       	cpc	r1, r20
    10be:	05 06       	cpc	r0, r21
    10c0:	08 95       	ret

000010c2 <__fp_round>:
    10c2:	09 2e       	mov	r0, r25
    10c4:	03 94       	inc	r0
    10c6:	00 0c       	add	r0, r0
    10c8:	11 f4       	brne	.+4      	; 0x10ce <__fp_round+0xc>
    10ca:	88 23       	and	r24, r24
    10cc:	52 f0       	brmi	.+20     	; 0x10e2 <__fp_round+0x20>
    10ce:	bb 0f       	add	r27, r27
    10d0:	40 f4       	brcc	.+16     	; 0x10e2 <__fp_round+0x20>
    10d2:	bf 2b       	or	r27, r31
    10d4:	11 f4       	brne	.+4      	; 0x10da <__fp_round+0x18>
    10d6:	60 ff       	sbrs	r22, 0
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <__fp_round+0x20>
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	08 95       	ret

000010e4 <__fp_split3>:
    10e4:	57 fd       	sbrc	r21, 7
    10e6:	90 58       	subi	r25, 0x80	; 128
    10e8:	44 0f       	add	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	59 f0       	breq	.+22     	; 0x1104 <__fp_splitA+0x10>
    10ee:	5f 3f       	cpi	r21, 0xFF	; 255
    10f0:	71 f0       	breq	.+28     	; 0x110e <__fp_splitA+0x1a>
    10f2:	47 95       	ror	r20

000010f4 <__fp_splitA>:
    10f4:	88 0f       	add	r24, r24
    10f6:	97 fb       	bst	r25, 7
    10f8:	99 1f       	adc	r25, r25
    10fa:	61 f0       	breq	.+24     	; 0x1114 <__fp_splitA+0x20>
    10fc:	9f 3f       	cpi	r25, 0xFF	; 255
    10fe:	79 f0       	breq	.+30     	; 0x111e <__fp_splitA+0x2a>
    1100:	87 95       	ror	r24
    1102:	08 95       	ret
    1104:	12 16       	cp	r1, r18
    1106:	13 06       	cpc	r1, r19
    1108:	14 06       	cpc	r1, r20
    110a:	55 1f       	adc	r21, r21
    110c:	f2 cf       	rjmp	.-28     	; 0x10f2 <__fp_split3+0xe>
    110e:	46 95       	lsr	r20
    1110:	f1 df       	rcall	.-30     	; 0x10f4 <__fp_splitA>
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <__fp_splitA+0x30>
    1114:	16 16       	cp	r1, r22
    1116:	17 06       	cpc	r1, r23
    1118:	18 06       	cpc	r1, r24
    111a:	99 1f       	adc	r25, r25
    111c:	f1 cf       	rjmp	.-30     	; 0x1100 <__fp_splitA+0xc>
    111e:	86 95       	lsr	r24
    1120:	71 05       	cpc	r23, r1
    1122:	61 05       	cpc	r22, r1
    1124:	08 94       	sec
    1126:	08 95       	ret

00001128 <__fp_zero>:
    1128:	e8 94       	clt

0000112a <__fp_szero>:
    112a:	bb 27       	eor	r27, r27
    112c:	66 27       	eor	r22, r22
    112e:	77 27       	eor	r23, r23
    1130:	cb 01       	movw	r24, r22
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret

00001136 <__mulsf3>:
    1136:	0b d0       	rcall	.+22     	; 0x114e <__mulsf3x>
    1138:	c4 cf       	rjmp	.-120    	; 0x10c2 <__fp_round>
    113a:	b5 df       	rcall	.-150    	; 0x10a6 <__fp_pscA>
    113c:	28 f0       	brcs	.+10     	; 0x1148 <__mulsf3+0x12>
    113e:	ba df       	rcall	.-140    	; 0x10b4 <__fp_pscB>
    1140:	18 f0       	brcs	.+6      	; 0x1148 <__mulsf3+0x12>
    1142:	95 23       	and	r25, r21
    1144:	09 f0       	breq	.+2      	; 0x1148 <__mulsf3+0x12>
    1146:	a6 cf       	rjmp	.-180    	; 0x1094 <__fp_inf>
    1148:	ab cf       	rjmp	.-170    	; 0x10a0 <__fp_nan>
    114a:	11 24       	eor	r1, r1
    114c:	ee cf       	rjmp	.-36     	; 0x112a <__fp_szero>

0000114e <__mulsf3x>:
    114e:	ca df       	rcall	.-108    	; 0x10e4 <__fp_split3>
    1150:	a0 f3       	brcs	.-24     	; 0x113a <__mulsf3+0x4>

00001152 <__mulsf3_pse>:
    1152:	95 9f       	mul	r25, r21
    1154:	d1 f3       	breq	.-12     	; 0x114a <__mulsf3+0x14>
    1156:	95 0f       	add	r25, r21
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	55 1f       	adc	r21, r21
    115c:	62 9f       	mul	r22, r18
    115e:	f0 01       	movw	r30, r0
    1160:	72 9f       	mul	r23, r18
    1162:	bb 27       	eor	r27, r27
    1164:	f0 0d       	add	r31, r0
    1166:	b1 1d       	adc	r27, r1
    1168:	63 9f       	mul	r22, r19
    116a:	aa 27       	eor	r26, r26
    116c:	f0 0d       	add	r31, r0
    116e:	b1 1d       	adc	r27, r1
    1170:	aa 1f       	adc	r26, r26
    1172:	64 9f       	mul	r22, r20
    1174:	66 27       	eor	r22, r22
    1176:	b0 0d       	add	r27, r0
    1178:	a1 1d       	adc	r26, r1
    117a:	66 1f       	adc	r22, r22
    117c:	82 9f       	mul	r24, r18
    117e:	22 27       	eor	r18, r18
    1180:	b0 0d       	add	r27, r0
    1182:	a1 1d       	adc	r26, r1
    1184:	62 1f       	adc	r22, r18
    1186:	73 9f       	mul	r23, r19
    1188:	b0 0d       	add	r27, r0
    118a:	a1 1d       	adc	r26, r1
    118c:	62 1f       	adc	r22, r18
    118e:	83 9f       	mul	r24, r19
    1190:	a0 0d       	add	r26, r0
    1192:	61 1d       	adc	r22, r1
    1194:	22 1f       	adc	r18, r18
    1196:	74 9f       	mul	r23, r20
    1198:	33 27       	eor	r19, r19
    119a:	a0 0d       	add	r26, r0
    119c:	61 1d       	adc	r22, r1
    119e:	23 1f       	adc	r18, r19
    11a0:	84 9f       	mul	r24, r20
    11a2:	60 0d       	add	r22, r0
    11a4:	21 1d       	adc	r18, r1
    11a6:	82 2f       	mov	r24, r18
    11a8:	76 2f       	mov	r23, r22
    11aa:	6a 2f       	mov	r22, r26
    11ac:	11 24       	eor	r1, r1
    11ae:	9f 57       	subi	r25, 0x7F	; 127
    11b0:	50 40       	sbci	r21, 0x00	; 0
    11b2:	8a f0       	brmi	.+34     	; 0x11d6 <__mulsf3_pse+0x84>
    11b4:	e1 f0       	breq	.+56     	; 0x11ee <__mulsf3_pse+0x9c>
    11b6:	88 23       	and	r24, r24
    11b8:	4a f0       	brmi	.+18     	; 0x11cc <__mulsf3_pse+0x7a>
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	bb 1f       	adc	r27, r27
    11c0:	66 1f       	adc	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	91 50       	subi	r25, 0x01	; 1
    11c8:	50 40       	sbci	r21, 0x00	; 0
    11ca:	a9 f7       	brne	.-22     	; 0x11b6 <__mulsf3_pse+0x64>
    11cc:	9e 3f       	cpi	r25, 0xFE	; 254
    11ce:	51 05       	cpc	r21, r1
    11d0:	70 f0       	brcs	.+28     	; 0x11ee <__mulsf3_pse+0x9c>
    11d2:	60 cf       	rjmp	.-320    	; 0x1094 <__fp_inf>
    11d4:	aa cf       	rjmp	.-172    	; 0x112a <__fp_szero>
    11d6:	5f 3f       	cpi	r21, 0xFF	; 255
    11d8:	ec f3       	brlt	.-6      	; 0x11d4 <__mulsf3_pse+0x82>
    11da:	98 3e       	cpi	r25, 0xE8	; 232
    11dc:	dc f3       	brlt	.-10     	; 0x11d4 <__mulsf3_pse+0x82>
    11de:	86 95       	lsr	r24
    11e0:	77 95       	ror	r23
    11e2:	67 95       	ror	r22
    11e4:	b7 95       	ror	r27
    11e6:	f7 95       	ror	r31
    11e8:	e7 95       	ror	r30
    11ea:	9f 5f       	subi	r25, 0xFF	; 255
    11ec:	c1 f7       	brne	.-16     	; 0x11de <__mulsf3_pse+0x8c>
    11ee:	fe 2b       	or	r31, r30
    11f0:	88 0f       	add	r24, r24
    11f2:	91 1d       	adc	r25, r1
    11f4:	96 95       	lsr	r25
    11f6:	87 95       	ror	r24
    11f8:	97 f9       	bld	r25, 7
    11fa:	08 95       	ret

000011fc <__mulsi3>:
    11fc:	62 9f       	mul	r22, r18
    11fe:	d0 01       	movw	r26, r0
    1200:	73 9f       	mul	r23, r19
    1202:	f0 01       	movw	r30, r0
    1204:	82 9f       	mul	r24, r18
    1206:	e0 0d       	add	r30, r0
    1208:	f1 1d       	adc	r31, r1
    120a:	64 9f       	mul	r22, r20
    120c:	e0 0d       	add	r30, r0
    120e:	f1 1d       	adc	r31, r1
    1210:	92 9f       	mul	r25, r18
    1212:	f0 0d       	add	r31, r0
    1214:	83 9f       	mul	r24, r19
    1216:	f0 0d       	add	r31, r0
    1218:	74 9f       	mul	r23, r20
    121a:	f0 0d       	add	r31, r0
    121c:	65 9f       	mul	r22, r21
    121e:	f0 0d       	add	r31, r0
    1220:	99 27       	eor	r25, r25
    1222:	72 9f       	mul	r23, r18
    1224:	b0 0d       	add	r27, r0
    1226:	e1 1d       	adc	r30, r1
    1228:	f9 1f       	adc	r31, r25
    122a:	63 9f       	mul	r22, r19
    122c:	b0 0d       	add	r27, r0
    122e:	e1 1d       	adc	r30, r1
    1230:	f9 1f       	adc	r31, r25
    1232:	bd 01       	movw	r22, r26
    1234:	cf 01       	movw	r24, r30
    1236:	11 24       	eor	r1, r1
    1238:	08 95       	ret

0000123a <__divmodhi4>:
    123a:	97 fb       	bst	r25, 7
    123c:	09 2e       	mov	r0, r25
    123e:	07 26       	eor	r0, r23
    1240:	0a d0       	rcall	.+20     	; 0x1256 <__divmodhi4_neg1>
    1242:	77 fd       	sbrc	r23, 7
    1244:	04 d0       	rcall	.+8      	; 0x124e <__divmodhi4_neg2>
    1246:	49 d0       	rcall	.+146    	; 0x12da <__udivmodhi4>
    1248:	06 d0       	rcall	.+12     	; 0x1256 <__divmodhi4_neg1>
    124a:	00 20       	and	r0, r0
    124c:	1a f4       	brpl	.+6      	; 0x1254 <__divmodhi4_exit>

0000124e <__divmodhi4_neg2>:
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255

00001254 <__divmodhi4_exit>:
    1254:	08 95       	ret

00001256 <__divmodhi4_neg1>:
    1256:	f6 f7       	brtc	.-4      	; 0x1254 <__divmodhi4_exit>
    1258:	90 95       	com	r25
    125a:	81 95       	neg	r24
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	08 95       	ret

00001260 <__udivmodsi4>:
    1260:	a1 e2       	ldi	r26, 0x21	; 33
    1262:	1a 2e       	mov	r1, r26
    1264:	aa 1b       	sub	r26, r26
    1266:	bb 1b       	sub	r27, r27
    1268:	fd 01       	movw	r30, r26
    126a:	0d c0       	rjmp	.+26     	; 0x1286 <__udivmodsi4_ep>

0000126c <__udivmodsi4_loop>:
    126c:	aa 1f       	adc	r26, r26
    126e:	bb 1f       	adc	r27, r27
    1270:	ee 1f       	adc	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	a2 17       	cp	r26, r18
    1276:	b3 07       	cpc	r27, r19
    1278:	e4 07       	cpc	r30, r20
    127a:	f5 07       	cpc	r31, r21
    127c:	20 f0       	brcs	.+8      	; 0x1286 <__udivmodsi4_ep>
    127e:	a2 1b       	sub	r26, r18
    1280:	b3 0b       	sbc	r27, r19
    1282:	e4 0b       	sbc	r30, r20
    1284:	f5 0b       	sbc	r31, r21

00001286 <__udivmodsi4_ep>:
    1286:	66 1f       	adc	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	88 1f       	adc	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	1a 94       	dec	r1
    1290:	69 f7       	brne	.-38     	; 0x126c <__udivmodsi4_loop>
    1292:	60 95       	com	r22
    1294:	70 95       	com	r23
    1296:	80 95       	com	r24
    1298:	90 95       	com	r25
    129a:	9b 01       	movw	r18, r22
    129c:	ac 01       	movw	r20, r24
    129e:	bd 01       	movw	r22, r26
    12a0:	cf 01       	movw	r24, r30
    12a2:	08 95       	ret

000012a4 <__divmodsi4>:
    12a4:	97 fb       	bst	r25, 7
    12a6:	09 2e       	mov	r0, r25
    12a8:	05 26       	eor	r0, r21
    12aa:	0e d0       	rcall	.+28     	; 0x12c8 <__divmodsi4_neg1>
    12ac:	57 fd       	sbrc	r21, 7
    12ae:	04 d0       	rcall	.+8      	; 0x12b8 <__divmodsi4_neg2>
    12b0:	d7 df       	rcall	.-82     	; 0x1260 <__udivmodsi4>
    12b2:	0a d0       	rcall	.+20     	; 0x12c8 <__divmodsi4_neg1>
    12b4:	00 1c       	adc	r0, r0
    12b6:	38 f4       	brcc	.+14     	; 0x12c6 <__divmodsi4_exit>

000012b8 <__divmodsi4_neg2>:
    12b8:	50 95       	com	r21
    12ba:	40 95       	com	r20
    12bc:	30 95       	com	r19
    12be:	21 95       	neg	r18
    12c0:	3f 4f       	sbci	r19, 0xFF	; 255
    12c2:	4f 4f       	sbci	r20, 0xFF	; 255
    12c4:	5f 4f       	sbci	r21, 0xFF	; 255

000012c6 <__divmodsi4_exit>:
    12c6:	08 95       	ret

000012c8 <__divmodsi4_neg1>:
    12c8:	f6 f7       	brtc	.-4      	; 0x12c6 <__divmodsi4_exit>
    12ca:	90 95       	com	r25
    12cc:	80 95       	com	r24
    12ce:	70 95       	com	r23
    12d0:	61 95       	neg	r22
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8f 4f       	sbci	r24, 0xFF	; 255
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	08 95       	ret

000012da <__udivmodhi4>:
    12da:	aa 1b       	sub	r26, r26
    12dc:	bb 1b       	sub	r27, r27
    12de:	51 e1       	ldi	r21, 0x11	; 17
    12e0:	07 c0       	rjmp	.+14     	; 0x12f0 <__udivmodhi4_ep>

000012e2 <__udivmodhi4_loop>:
    12e2:	aa 1f       	adc	r26, r26
    12e4:	bb 1f       	adc	r27, r27
    12e6:	a6 17       	cp	r26, r22
    12e8:	b7 07       	cpc	r27, r23
    12ea:	10 f0       	brcs	.+4      	; 0x12f0 <__udivmodhi4_ep>
    12ec:	a6 1b       	sub	r26, r22
    12ee:	b7 0b       	sbc	r27, r23

000012f0 <__udivmodhi4_ep>:
    12f0:	88 1f       	adc	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	5a 95       	dec	r21
    12f6:	a9 f7       	brne	.-22     	; 0x12e2 <__udivmodhi4_loop>
    12f8:	80 95       	com	r24
    12fa:	90 95       	com	r25
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	08 95       	ret

00001302 <__tablejump2__>:
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31

00001306 <__tablejump__>:
    1306:	05 90       	lpm	r0, Z+
    1308:	f4 91       	lpm	r31, Z+
    130a:	e0 2d       	mov	r30, r0
    130c:	09 94       	ijmp

0000130e <malloc>:
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	91 05       	cpc	r25, r1
    1316:	10 f4       	brcc	.+4      	; 0x131c <malloc+0xe>
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	e0 91 61 02 	lds	r30, 0x0261
    1320:	f0 91 62 02 	lds	r31, 0x0262
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	26 c0       	rjmp	.+76     	; 0x137a <malloc+0x6c>
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	68 17       	cp	r22, r24
    1334:	79 07       	cpc	r23, r25
    1336:	e0 f0       	brcs	.+56     	; 0x1370 <malloc+0x62>
    1338:	68 17       	cp	r22, r24
    133a:	79 07       	cpc	r23, r25
    133c:	81 f4       	brne	.+32     	; 0x135e <malloc+0x50>
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	93 81       	ldd	r25, Z+3	; 0x03
    1342:	21 15       	cp	r18, r1
    1344:	31 05       	cpc	r19, r1
    1346:	31 f0       	breq	.+12     	; 0x1354 <malloc+0x46>
    1348:	d9 01       	movw	r26, r18
    134a:	13 96       	adiw	r26, 0x03	; 3
    134c:	9c 93       	st	X, r25
    134e:	8e 93       	st	-X, r24
    1350:	12 97       	sbiw	r26, 0x02	; 2
    1352:	2b c0       	rjmp	.+86     	; 0x13aa <malloc+0x9c>
    1354:	90 93 62 02 	sts	0x0262, r25
    1358:	80 93 61 02 	sts	0x0261, r24
    135c:	26 c0       	rjmp	.+76     	; 0x13aa <malloc+0x9c>
    135e:	41 15       	cp	r20, r1
    1360:	51 05       	cpc	r21, r1
    1362:	19 f0       	breq	.+6      	; 0x136a <malloc+0x5c>
    1364:	64 17       	cp	r22, r20
    1366:	75 07       	cpc	r23, r21
    1368:	18 f4       	brcc	.+6      	; 0x1370 <malloc+0x62>
    136a:	ab 01       	movw	r20, r22
    136c:	e9 01       	movw	r28, r18
    136e:	df 01       	movw	r26, r30
    1370:	9f 01       	movw	r18, r30
    1372:	72 81       	ldd	r23, Z+2	; 0x02
    1374:	63 81       	ldd	r22, Z+3	; 0x03
    1376:	e7 2f       	mov	r30, r23
    1378:	f6 2f       	mov	r31, r22
    137a:	30 97       	sbiw	r30, 0x00	; 0
    137c:	c1 f6       	brne	.-80     	; 0x132e <malloc+0x20>
    137e:	41 15       	cp	r20, r1
    1380:	51 05       	cpc	r21, r1
    1382:	01 f1       	breq	.+64     	; 0x13c4 <malloc+0xb6>
    1384:	48 1b       	sub	r20, r24
    1386:	59 0b       	sbc	r21, r25
    1388:	44 30       	cpi	r20, 0x04	; 4
    138a:	51 05       	cpc	r21, r1
    138c:	80 f4       	brcc	.+32     	; 0x13ae <malloc+0xa0>
    138e:	12 96       	adiw	r26, 0x02	; 2
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	13 97       	sbiw	r26, 0x03	; 3
    1396:	20 97       	sbiw	r28, 0x00	; 0
    1398:	19 f0       	breq	.+6      	; 0x13a0 <malloc+0x92>
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8a 83       	std	Y+2, r24	; 0x02
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <malloc+0x9a>
    13a0:	90 93 62 02 	sts	0x0262, r25
    13a4:	80 93 61 02 	sts	0x0261, r24
    13a8:	fd 01       	movw	r30, r26
    13aa:	32 96       	adiw	r30, 0x02	; 2
    13ac:	46 c0       	rjmp	.+140    	; 0x143a <malloc+0x12c>
    13ae:	fd 01       	movw	r30, r26
    13b0:	e4 0f       	add	r30, r20
    13b2:	f5 1f       	adc	r31, r21
    13b4:	81 93       	st	Z+, r24
    13b6:	91 93       	st	Z+, r25
    13b8:	42 50       	subi	r20, 0x02	; 2
    13ba:	50 40       	sbci	r21, 0x00	; 0
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	5c 93       	st	X, r21
    13c0:	4e 93       	st	-X, r20
    13c2:	3b c0       	rjmp	.+118    	; 0x143a <malloc+0x12c>
    13c4:	20 91 5f 02 	lds	r18, 0x025F
    13c8:	30 91 60 02 	lds	r19, 0x0260
    13cc:	21 15       	cp	r18, r1
    13ce:	31 05       	cpc	r19, r1
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <malloc+0xd4>
    13d2:	20 91 2a 01 	lds	r18, 0x012A
    13d6:	30 91 2b 01 	lds	r19, 0x012B
    13da:	30 93 60 02 	sts	0x0260, r19
    13de:	20 93 5f 02 	sts	0x025F, r18
    13e2:	20 91 2c 01 	lds	r18, 0x012C
    13e6:	30 91 2d 01 	lds	r19, 0x012D
    13ea:	21 15       	cp	r18, r1
    13ec:	31 05       	cpc	r19, r1
    13ee:	41 f4       	brne	.+16     	; 0x1400 <malloc+0xf2>
    13f0:	2d b7       	in	r18, 0x3d	; 61
    13f2:	3e b7       	in	r19, 0x3e	; 62
    13f4:	40 91 28 01 	lds	r20, 0x0128
    13f8:	50 91 29 01 	lds	r21, 0x0129
    13fc:	24 1b       	sub	r18, r20
    13fe:	35 0b       	sbc	r19, r21
    1400:	e0 91 5f 02 	lds	r30, 0x025F
    1404:	f0 91 60 02 	lds	r31, 0x0260
    1408:	e2 17       	cp	r30, r18
    140a:	f3 07       	cpc	r31, r19
    140c:	a0 f4       	brcc	.+40     	; 0x1436 <malloc+0x128>
    140e:	2e 1b       	sub	r18, r30
    1410:	3f 0b       	sbc	r19, r31
    1412:	28 17       	cp	r18, r24
    1414:	39 07       	cpc	r19, r25
    1416:	78 f0       	brcs	.+30     	; 0x1436 <malloc+0x128>
    1418:	ac 01       	movw	r20, r24
    141a:	4e 5f       	subi	r20, 0xFE	; 254
    141c:	5f 4f       	sbci	r21, 0xFF	; 255
    141e:	24 17       	cp	r18, r20
    1420:	35 07       	cpc	r19, r21
    1422:	48 f0       	brcs	.+18     	; 0x1436 <malloc+0x128>
    1424:	4e 0f       	add	r20, r30
    1426:	5f 1f       	adc	r21, r31
    1428:	50 93 60 02 	sts	0x0260, r21
    142c:	40 93 5f 02 	sts	0x025F, r20
    1430:	81 93       	st	Z+, r24
    1432:	91 93       	st	Z+, r25
    1434:	02 c0       	rjmp	.+4      	; 0x143a <malloc+0x12c>
    1436:	e0 e0       	ldi	r30, 0x00	; 0
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	cf 01       	movw	r24, r30
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <free>:
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	09 f4       	brne	.+2      	; 0x144c <free+0xa>
    144a:	91 c0       	rjmp	.+290    	; 0x156e <free+0x12c>
    144c:	fc 01       	movw	r30, r24
    144e:	32 97       	sbiw	r30, 0x02	; 2
    1450:	13 82       	std	Z+3, r1	; 0x03
    1452:	12 82       	std	Z+2, r1	; 0x02
    1454:	60 91 61 02 	lds	r22, 0x0261
    1458:	70 91 62 02 	lds	r23, 0x0262
    145c:	61 15       	cp	r22, r1
    145e:	71 05       	cpc	r23, r1
    1460:	81 f4       	brne	.+32     	; 0x1482 <free+0x40>
    1462:	20 81       	ld	r18, Z
    1464:	31 81       	ldd	r19, Z+1	; 0x01
    1466:	28 0f       	add	r18, r24
    1468:	39 1f       	adc	r19, r25
    146a:	80 91 5f 02 	lds	r24, 0x025F
    146e:	90 91 60 02 	lds	r25, 0x0260
    1472:	82 17       	cp	r24, r18
    1474:	93 07       	cpc	r25, r19
    1476:	99 f5       	brne	.+102    	; 0x14de <free+0x9c>
    1478:	f0 93 60 02 	sts	0x0260, r31
    147c:	e0 93 5f 02 	sts	0x025F, r30
    1480:	76 c0       	rjmp	.+236    	; 0x156e <free+0x12c>
    1482:	db 01       	movw	r26, r22
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <free+0x4c>
    148a:	cd 01       	movw	r24, r26
    148c:	d9 01       	movw	r26, r18
    148e:	ae 17       	cp	r26, r30
    1490:	bf 07       	cpc	r27, r31
    1492:	48 f4       	brcc	.+18     	; 0x14a6 <free+0x64>
    1494:	12 96       	adiw	r26, 0x02	; 2
    1496:	2d 91       	ld	r18, X+
    1498:	3c 91       	ld	r19, X
    149a:	13 97       	sbiw	r26, 0x03	; 3
    149c:	21 15       	cp	r18, r1
    149e:	31 05       	cpc	r19, r1
    14a0:	a1 f7       	brne	.-24     	; 0x148a <free+0x48>
    14a2:	cd 01       	movw	r24, r26
    14a4:	21 c0       	rjmp	.+66     	; 0x14e8 <free+0xa6>
    14a6:	b3 83       	std	Z+3, r27	; 0x03
    14a8:	a2 83       	std	Z+2, r26	; 0x02
    14aa:	ef 01       	movw	r28, r30
    14ac:	49 91       	ld	r20, Y+
    14ae:	59 91       	ld	r21, Y+
    14b0:	9e 01       	movw	r18, r28
    14b2:	24 0f       	add	r18, r20
    14b4:	35 1f       	adc	r19, r21
    14b6:	a2 17       	cp	r26, r18
    14b8:	b3 07       	cpc	r27, r19
    14ba:	79 f4       	brne	.+30     	; 0x14da <free+0x98>
    14bc:	2d 91       	ld	r18, X+
    14be:	3c 91       	ld	r19, X
    14c0:	11 97       	sbiw	r26, 0x01	; 1
    14c2:	24 0f       	add	r18, r20
    14c4:	35 1f       	adc	r19, r21
    14c6:	2e 5f       	subi	r18, 0xFE	; 254
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	31 83       	std	Z+1, r19	; 0x01
    14cc:	20 83       	st	Z, r18
    14ce:	12 96       	adiw	r26, 0x02	; 2
    14d0:	2d 91       	ld	r18, X+
    14d2:	3c 91       	ld	r19, X
    14d4:	13 97       	sbiw	r26, 0x03	; 3
    14d6:	33 83       	std	Z+3, r19	; 0x03
    14d8:	22 83       	std	Z+2, r18	; 0x02
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	29 f4       	brne	.+10     	; 0x14e8 <free+0xa6>
    14de:	f0 93 62 02 	sts	0x0262, r31
    14e2:	e0 93 61 02 	sts	0x0261, r30
    14e6:	43 c0       	rjmp	.+134    	; 0x156e <free+0x12c>
    14e8:	dc 01       	movw	r26, r24
    14ea:	13 96       	adiw	r26, 0x03	; 3
    14ec:	fc 93       	st	X, r31
    14ee:	ee 93       	st	-X, r30
    14f0:	12 97       	sbiw	r26, 0x02	; 2
    14f2:	4d 91       	ld	r20, X+
    14f4:	5d 91       	ld	r21, X+
    14f6:	a4 0f       	add	r26, r20
    14f8:	b5 1f       	adc	r27, r21
    14fa:	ea 17       	cp	r30, r26
    14fc:	fb 07       	cpc	r31, r27
    14fe:	69 f4       	brne	.+26     	; 0x151a <free+0xd8>
    1500:	20 81       	ld	r18, Z
    1502:	31 81       	ldd	r19, Z+1	; 0x01
    1504:	24 0f       	add	r18, r20
    1506:	35 1f       	adc	r19, r21
    1508:	2e 5f       	subi	r18, 0xFE	; 254
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	ec 01       	movw	r28, r24
    150e:	39 83       	std	Y+1, r19	; 0x01
    1510:	28 83       	st	Y, r18
    1512:	22 81       	ldd	r18, Z+2	; 0x02
    1514:	33 81       	ldd	r19, Z+3	; 0x03
    1516:	3b 83       	std	Y+3, r19	; 0x03
    1518:	2a 83       	std	Y+2, r18	; 0x02
    151a:	e0 e0       	ldi	r30, 0x00	; 0
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <free+0xe2>
    1520:	fb 01       	movw	r30, r22
    1522:	bc 01       	movw	r22, r24
    1524:	db 01       	movw	r26, r22
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	8d 91       	ld	r24, X+
    152a:	9c 91       	ld	r25, X
    152c:	13 97       	sbiw	r26, 0x03	; 3
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	b9 f7       	brne	.-18     	; 0x1520 <free+0xde>
    1532:	9b 01       	movw	r18, r22
    1534:	2e 5f       	subi	r18, 0xFE	; 254
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	8d 91       	ld	r24, X+
    153a:	9c 91       	ld	r25, X
    153c:	11 97       	sbiw	r26, 0x01	; 1
    153e:	82 0f       	add	r24, r18
    1540:	93 1f       	adc	r25, r19
    1542:	40 91 5f 02 	lds	r20, 0x025F
    1546:	50 91 60 02 	lds	r21, 0x0260
    154a:	48 17       	cp	r20, r24
    154c:	59 07       	cpc	r21, r25
    154e:	79 f4       	brne	.+30     	; 0x156e <free+0x12c>
    1550:	30 97       	sbiw	r30, 0x00	; 0
    1552:	29 f4       	brne	.+10     	; 0x155e <free+0x11c>
    1554:	10 92 62 02 	sts	0x0262, r1
    1558:	10 92 61 02 	sts	0x0261, r1
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <free+0x120>
    155e:	13 82       	std	Z+3, r1	; 0x03
    1560:	12 82       	std	Z+2, r1	; 0x02
    1562:	22 50       	subi	r18, 0x02	; 2
    1564:	30 40       	sbci	r19, 0x00	; 0
    1566:	30 93 60 02 	sts	0x0260, r19
    156a:	20 93 5f 02 	sts	0x025F, r18
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <do_random>:
    1574:	a0 e0       	ldi	r26, 0x00	; 0
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e0 ec       	ldi	r30, 0xC0	; 192
    157a:	fa e0       	ldi	r31, 0x0A	; 10
    157c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__prologue_saves__+0x10>
    1580:	ec 01       	movw	r28, r24
    1582:	68 81       	ld	r22, Y
    1584:	79 81       	ldd	r23, Y+1	; 0x01
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	9b 81       	ldd	r25, Y+3	; 0x03
    158a:	61 15       	cp	r22, r1
    158c:	71 05       	cpc	r23, r1
    158e:	81 05       	cpc	r24, r1
    1590:	91 05       	cpc	r25, r1
    1592:	21 f4       	brne	.+8      	; 0x159c <do_random+0x28>
    1594:	64 e2       	ldi	r22, 0x24	; 36
    1596:	79 ed       	ldi	r23, 0xD9	; 217
    1598:	8b e5       	ldi	r24, 0x5B	; 91
    159a:	97 e0       	ldi	r25, 0x07	; 7
    159c:	2d e1       	ldi	r18, 0x1D	; 29
    159e:	33 ef       	ldi	r19, 0xF3	; 243
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__divmodsi4>
    15a8:	79 01       	movw	r14, r18
    15aa:	8a 01       	movw	r16, r20
    15ac:	27 ea       	ldi	r18, 0xA7	; 167
    15ae:	31 e4       	ldi	r19, 0x41	; 65
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__mulsi3>
    15b8:	5b 01       	movw	r10, r22
    15ba:	6c 01       	movw	r12, r24
    15bc:	c8 01       	movw	r24, r16
    15be:	b7 01       	movw	r22, r14
    15c0:	2c ee       	ldi	r18, 0xEC	; 236
    15c2:	34 ef       	ldi	r19, 0xF4	; 244
    15c4:	4f ef       	ldi	r20, 0xFF	; 255
    15c6:	5f ef       	ldi	r21, 0xFF	; 255
    15c8:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__mulsi3>
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	2a 0d       	add	r18, r10
    15d2:	3b 1d       	adc	r19, r11
    15d4:	4c 1d       	adc	r20, r12
    15d6:	5d 1d       	adc	r21, r13
    15d8:	57 ff       	sbrs	r21, 7
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <do_random+0x70>
    15dc:	21 50       	subi	r18, 0x01	; 1
    15de:	30 40       	sbci	r19, 0x00	; 0
    15e0:	40 40       	sbci	r20, 0x00	; 0
    15e2:	50 48       	sbci	r21, 0x80	; 128
    15e4:	28 83       	st	Y, r18
    15e6:	39 83       	std	Y+1, r19	; 0x01
    15e8:	4a 83       	std	Y+2, r20	; 0x02
    15ea:	5b 83       	std	Y+3, r21	; 0x03
    15ec:	5f 77       	andi	r21, 0x7F	; 127
    15ee:	b9 01       	movw	r22, r18
    15f0:	ca 01       	movw	r24, r20
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	ea e0       	ldi	r30, 0x0A	; 10
    15f8:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__epilogue_restores__+0x10>

000015fc <random_r>:
    15fc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <do_random>
    1600:	08 95       	ret

00001602 <random>:
    1602:	8e e2       	ldi	r24, 0x2E	; 46
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	0e 94 ba 0a 	call	0x1574	; 0x1574 <do_random>
    160a:	08 95       	ret

0000160c <srandom>:
    160c:	60 93 2e 01 	sts	0x012E, r22
    1610:	70 93 2f 01 	sts	0x012F, r23
    1614:	80 93 30 01 	sts	0x0130, r24
    1618:	90 93 31 01 	sts	0x0131, r25
    161c:	08 95       	ret

0000161e <__prologue_saves__>:
    161e:	2f 92       	push	r2
    1620:	3f 92       	push	r3
    1622:	4f 92       	push	r4
    1624:	5f 92       	push	r5
    1626:	6f 92       	push	r6
    1628:	7f 92       	push	r7
    162a:	8f 92       	push	r8
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	ca 1b       	sub	r28, r26
    1648:	db 0b       	sbc	r29, r27
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	09 94       	ijmp

00001656 <__epilogue_restores__>:
    1656:	2a 88       	ldd	r2, Y+18	; 0x12
    1658:	39 88       	ldd	r3, Y+17	; 0x11
    165a:	48 88       	ldd	r4, Y+16	; 0x10
    165c:	5f 84       	ldd	r5, Y+15	; 0x0f
    165e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1660:	7d 84       	ldd	r7, Y+13	; 0x0d
    1662:	8c 84       	ldd	r8, Y+12	; 0x0c
    1664:	9b 84       	ldd	r9, Y+11	; 0x0b
    1666:	aa 84       	ldd	r10, Y+10	; 0x0a
    1668:	b9 84       	ldd	r11, Y+9	; 0x09
    166a:	c8 84       	ldd	r12, Y+8	; 0x08
    166c:	df 80       	ldd	r13, Y+7	; 0x07
    166e:	ee 80       	ldd	r14, Y+6	; 0x06
    1670:	fd 80       	ldd	r15, Y+5	; 0x05
    1672:	0c 81       	ldd	r16, Y+4	; 0x04
    1674:	1b 81       	ldd	r17, Y+3	; 0x03
    1676:	aa 81       	ldd	r26, Y+2	; 0x02
    1678:	b9 81       	ldd	r27, Y+1	; 0x01
    167a:	ce 0f       	add	r28, r30
    167c:	d1 1d       	adc	r29, r1
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	ed 01       	movw	r28, r26
    168a:	08 95       	ret

0000168c <__do_global_dtors>:
    168c:	10 e0       	ldi	r17, 0x00	; 0
    168e:	ca e7       	ldi	r28, 0x7A	; 122
    1690:	d0 e0       	ldi	r29, 0x00	; 0
    1692:	04 c0       	rjmp	.+8      	; 0x169c <__do_global_dtors+0x10>
    1694:	fe 01       	movw	r30, r28
    1696:	0e 94 83 09 	call	0x1306	; 0x1306 <__tablejump__>
    169a:	22 96       	adiw	r28, 0x02	; 2
    169c:	cc 37       	cpi	r28, 0x7C	; 124
    169e:	d1 07       	cpc	r29, r17
    16a0:	c9 f7       	brne	.-14     	; 0x1694 <__do_global_dtors+0x8>
    16a2:	f8 94       	cli

000016a4 <__stop_program>:
    16a4:	ff cf       	rjmp	.-2      	; 0x16a4 <__stop_program>
