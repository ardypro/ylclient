
yeelink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  0000170a  0000179e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000170a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f4  00800176  00800176  00001814  2**0
                  ALLOC
  3 .stab         0000dc80  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001f1e6  00000000  00000000  0000f494  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__dtors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_16>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_18>
      4c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_19>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	68 00       	.word	0x0068	; ????
      6a:	73 00       	.word	0x0073	; ????
      6c:	7e 00       	.word	0x007e	; ????
      6e:	8d 00       	.word	0x008d	; ????
      70:	98 00       	.word	0x0098	; ????
      72:	a3 00       	.word	0x00a3	; ????
      74:	e0 00       	.word	0x00e0	; ????
      76:	9f 03       	fmulsu	r17, r23
      78:	35 04       	cpc	r3, r5

0000007a <__ctors_end>:
      7a:	e5 00       	.word	0x00e5	; ????

0000007c <__dtors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ea e0       	ldi	r30, 0x0A	; 10
      90:	f7 e1       	ldi	r31, 0x17	; 23
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 37       	cpi	r26, 0x76	; 118
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	a6 e7       	ldi	r26, 0x76	; 118
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	aa 36       	cpi	r26, 0x6A	; 106
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>

000000ae <__do_global_ctors>:
      ae:	10 e0       	ldi	r17, 0x00	; 0
      b0:	ca e7       	ldi	r28, 0x7A	; 122
      b2:	d0 e0       	ldi	r29, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_global_ctors+0x10>
      b6:	22 97       	sbiw	r28, 0x02	; 2
      b8:	fe 01       	movw	r30, r28
      ba:	0e 94 b5 09 	call	0x136a	; 0x136a <__tablejump__>
      be:	c8 36       	cpi	r28, 0x68	; 104
      c0:	d1 07       	cpc	r29, r17
      c2:	c9 f7       	brne	.-14     	; 0xb6 <__do_global_ctors+0x8>
      c4:	0e 94 12 06 	call	0xc24	; 0xc24 <main>
      c8:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__do_global_dtors>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <_GLOBAL__I__ZN9DhcpClass13beginWithDHCPEPhmm>:
}

IPAddress DhcpClass::getDnsServerIp()
{
    return IPAddress(_dhcpDnsServerIp);
}
      d0:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
      d2:	86 e7       	ldi	r24, 0x76	; 118
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	00 e0       	ldi	r16, 0x00	; 0
      de:	0e 94 29 04 	call	0x852	; 0x852 <_ZN9IPAddressC1Ehhhh>
      e2:	0f 91       	pop	r16
      e4:	08 95       	ret

000000e6 <_GLOBAL__I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
      e6:	0f 93       	push	r16
      e8:	8c e7       	ldi	r24, 0x7C	; 124
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0e 94 29 04 	call	0x852	; 0x852 <_ZN9IPAddressC1Ehhhh>
      f8:	0f 91       	pop	r16
      fa:	08 95       	ret

000000fc <_GLOBAL__I__ZN13EthernetClass6_stateE>:
IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}

EthernetClass Ethernet;
      fc:	0f 93       	push	r16
      fe:	88 e8       	ldi	r24, 0x88	; 136
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	40 e0       	ldi	r20, 0x00	; 0
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	00 e0       	ldi	r16, 0x00	; 0
     10a:	0e 94 29 04 	call	0x852	; 0x852 <_ZN9IPAddressC1Ehhhh>
#include "EthernetClient.h"
#include "EthernetServer.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
     10e:	82 e8       	ldi	r24, 0x82	; 130
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN9IPAddressC1Ev>
     116:	0f 91       	pop	r16
     118:	08 95       	ret

0000011a <_GLOBAL__I__ZN14EthernetClient8_srcportE>:
// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}
     11a:	0f 93       	push	r16
     11c:	8e e8       	ldi	r24, 0x8E	; 142
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	0e 94 29 04 	call	0x852	; 0x852 <_ZN9IPAddressC1Ehhhh>
     12c:	0f 91       	pop	r16
     12e:	08 95       	ret

00000130 <_GLOBAL__I__ZN14EthernetServerC2Ej>:
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
     130:	0f 93       	push	r16
     132:	84 e9       	ldi	r24, 0x94	; 148
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	0e 94 29 04 	call	0x852	; 0x852 <_ZN9IPAddressC1Ehhhh>
     142:	0f 91       	pop	r16
     144:	08 95       	ret

00000146 <_GLOBAL__I__ZN11EthernetUDPC2Ev>:
{
  while (available())
  {
    read();
  }
}
     146:	0f 93       	push	r16
     148:	8a e9       	ldi	r24, 0x9A	; 154
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	0e 94 29 04 	call	0x852	; 0x852 <_ZN9IPAddressC1Ehhhh>
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <_Z41__static_initialization_and_destruction_0ii.clone.0>:
{
	long v;
	v=random(256);
	//client.Post(v);
	delay(20*1000);
}
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	91 05       	cpc	r25, r1
     160:	39 f4       	brne	.+14     	; 0x170 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x14>
#include "ylclient.h"

extern HardwareSerial Serial;
using namespace yeelink;

ylclient client;
     162:	80 ea       	ldi	r24, 0xA0	; 160
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	62 e0       	ldi	r22, 0x02	; 2
     168:	70 e0       	ldi	r23, 0x00	; 0
     16a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN7yeelink8ylclientC1E12ETHERNETCARD>
     16e:	08 95       	ret
     170:	00 97       	sbiw	r24, 0x00	; 0
     172:	21 f4       	brne	.+8      	; 0x17c <_Z41__static_initialization_and_destruction_0ii.clone.0+0x20>
     174:	80 ea       	ldi	r24, 0xA0	; 160
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	0e 94 8b 01 	call	0x316	; 0x316 <_ZN7yeelink8ylclientD1Ev>
     17c:	08 95       	ret

0000017e <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
	Serial.begin(9600);
     17e:	88 e3       	ldi	r24, 0x38	; 56
     180:	92 e0       	ldi	r25, 0x02	; 2
     182:	40 e8       	ldi	r20, 0x80	; 128
     184:	55 e2       	ldi	r21, 0x25	; 37
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	0e 94 21 03 	call	0x642	; 0x642 <_ZN14HardwareSerial5beginEm>
	//初始化yeelink client
	//client.setAPIKey("apikey");	//设置API key，这里采用默认的key
	//client.setAPIVersion("v1.0");	//设置API版本，除非yeelink API升级，则采用默认的v1.0版本
	client.setEthernetCardType(SERIALOVERHTTP );
     18e:	80 ea       	ldi	r24, 0xA0	; 160
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	62 e0       	ldi	r22, 0x02	; 2
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>

	randomSeed(analogRead(0));
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <analogRead>
     1a0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z10randomSeedj>
}
     1a4:	08 95       	ret

000001a6 <loop>:

// The loop function is called in an endless loop
void loop()
{
	long v;
	v=random(256);
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_Z6randoml>
	//client.Post(v);
	delay(20*1000);
     1b2:	60 e2       	ldi	r22, 0x20	; 32
     1b4:	7e e4       	ldi	r23, 0x4E	; 78
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 96 06 	call	0xd2c	; 0xd2c <delay>
}
     1be:	08 95       	ret

000001c0 <_GLOBAL__I_client>:
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z41__static_initialization_and_destruction_0ii.clone.0>
     1c8:	08 95       	ret

000001ca <_GLOBAL__D_client>:
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z41__static_initialization_and_destruction_0ii.clone.0>
     1d2:	08 95       	ret

000001d4 <_ZN7yeelink17ylGenericEthernetD1Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     1d4:	27 e3       	ldi	r18, 0x37	; 55
     1d6:	31 e0       	ldi	r19, 0x01	; 1
     1d8:	fc 01       	movw	r30, r24
     1da:	31 83       	std	Z+1, r19	; 0x01
     1dc:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     1de:	08 95       	ret

000001e0 <_ZN7yeelink17ylGenericEthernetD0Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     1e0:	27 e3       	ldi	r18, 0x37	; 55
     1e2:	31 e0       	ldi	r19, 0x01	; 1
     1e4:	fc 01       	movw	r30, r24
     1e6:	31 83       	std	Z+1, r19	; 0x01
     1e8:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     1ea:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZdlPv>
     1ee:	08 95       	ret

000001f0 <_ZN7yeelink17ylGenericEthernetC1Ev>:
//#include "ylconst.h"

namespace yeelink
{

ylGenericEthernet::ylGenericEthernet()
     1f0:	fc 01       	movw	r30, r24
     1f2:	87 e3       	ldi	r24, 0x37	; 55
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	91 83       	std	Z+1, r25	; 0x01
     1f8:	80 83       	st	Z, r24
{
	seconds = 30; //API规定两条记录发送的时间间隔不少于10s
     1fa:	8e e1       	ldi	r24, 0x1E	; 30
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	93 83       	std	Z+3, r25	; 0x03
     200:	82 83       	std	Z+2, r24	; 0x02
	apiHeader = 0;
     202:	15 82       	std	Z+5, r1	; 0x05
     204:	14 82       	std	Z+4, r1	; 0x04
	jsonStr = 0;
     206:	17 82       	std	Z+7, r1	; 0x07
     208:	16 82       	std	Z+6, r1	; 0x06

}
     20a:	08 95       	ret

0000020c <_ZN7yeelink12ylSerialHTTP4PostEf>:
}

bool ylSerialHTTP::Post(float value)
{
	//sendValueflag();
	return serial->print(value);
     20c:	fc 01       	movw	r30, r24
     20e:	82 85       	ldd	r24, Z+10	; 0x0a
     210:	93 85       	ldd	r25, Z+11	; 0x0b
     212:	22 e0       	ldi	r18, 0x02	; 2
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN5Print5printEdi>
     21a:	21 e0       	ldi	r18, 0x01	; 1
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	09 f4       	brne	.+2      	; 0x222 <_ZN7yeelink12ylSerialHTTP4PostEf+0x16>
     220:	20 e0       	ldi	r18, 0x00	; 0
}
     222:	82 2f       	mov	r24, r18
     224:	08 95       	ret

00000226 <_ZN7yeelink12ylSerialHTTP4PostEl>:
}

bool ylSerialHTTP::Post(long value)
{
	//sendValueflag();
	return serial->print(value);
     226:	fc 01       	movw	r30, r24
     228:	82 85       	ldd	r24, Z+10	; 0x0a
     22a:	93 85       	ldd	r25, Z+11	; 0x0b
     22c:	2a e0       	ldi	r18, 0x0A	; 10
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN5Print5printEli>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	09 f4       	brne	.+2      	; 0x23c <_ZN7yeelink12ylSerialHTTP4PostEl+0x16>
     23a:	20 e0       	ldi	r18, 0x00	; 0
}
     23c:	82 2f       	mov	r24, r18
     23e:	08 95       	ret

00000240 <_ZN7yeelink12ylSerialHTTPD1Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     240:	23 e4       	ldi	r18, 0x43	; 67
     242:	31 e0       	ldi	r19, 0x01	; 1
     244:	fc 01       	movw	r30, r24
     246:	31 83       	std	Z+1, r19	; 0x01
     248:	20 83       	st	Z, r18
     24a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     24e:	08 95       	ret

00000250 <_ZN7yeelink12ylSerialHTTPD0Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
     256:	83 e4       	ldi	r24, 0x43	; 67
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	99 83       	std	Y+1, r25	; 0x01
     25c:	88 83       	st	Y, r24
     25e:	ce 01       	movw	r24, r28
     260:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     264:	ce 01       	movw	r24, r28
     266:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZdlPv>
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <_ZN7yeelink12ylSerialHTTPC1Ei>:
#endif

namespace yeelink
{

ylSerialHTTP::ylSerialHTTP(int serialIndex)
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	ec 01       	movw	r28, r24
     27a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN7yeelink17ylGenericEthernetC1Ev>
     27e:	83 e4       	ldi	r24, 0x43	; 67
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	99 83       	std	Y+1, r25	; 0x01
     284:	88 83       	st	Y, r24
#else
		serial = &Serial;
#endif
		break;
	default:
		serial = &Serial;
     286:	88 e3       	ldi	r24, 0x38	; 56
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	9b 87       	std	Y+11, r25	; 0x0b
     28c:	8a 87       	std	Y+10, r24	; 0x0a
	}

}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	08 95       	ret

00000298 <_ZN7yeelink15ylW5100Ethernet4PostEf>:
		r=true;
		}
	else
		r=false;
	return r;
}
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret

0000029c <_ZN7yeelink15ylW5100Ethernet4PostEl>:

bool ylW5100Ethernet::Post(long value)
{
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	ec 01       	movw	r28, r24
     2a6:	cb 01       	movw	r24, r22
     2a8:	ba 01       	movw	r22, r20
	float f;
	f=value*1.0;
	return Post( f);
     2aa:	08 81       	ld	r16, Y
     2ac:	19 81       	ldd	r17, Y+1	; 0x01
}

bool ylW5100Ethernet::Post(long value)
{
	float f;
	f=value*1.0;
     2ae:	0e 94 1d 08 	call	0x103a	; 0x103a <__floatsisf>
     2b2:	ab 01       	movw	r20, r22
     2b4:	bc 01       	movw	r22, r24
	return Post( f);
     2b6:	d8 01       	movw	r26, r16
     2b8:	16 96       	adiw	r26, 0x06	; 6
     2ba:	ed 91       	ld	r30, X+
     2bc:	fc 91       	ld	r31, X
     2be:	17 97       	sbiw	r26, 0x07	; 7
     2c0:	ce 01       	movw	r24, r28
     2c2:	09 95       	icall
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <_ZN7yeelink15ylW5100EthernetD1Ev>:
{
	// TODO Auto-generated constructor stub

}

ylW5100Ethernet::~ylW5100Ethernet()
     2ce:	2f e4       	ldi	r18, 0x4F	; 79
     2d0:	31 e0       	ldi	r19, 0x01	; 1
     2d2:	fc 01       	movw	r30, r24
     2d4:	31 83       	std	Z+1, r19	; 0x01
     2d6:	20 83       	st	Z, r18
     2d8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     2dc:	08 95       	ret

000002de <_ZN7yeelink15ylW5100EthernetD0Ev>:
{
	// TODO Auto-generated constructor stub

}

ylW5100Ethernet::~ylW5100Ethernet()
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	ec 01       	movw	r28, r24
     2e4:	8f e4       	ldi	r24, 0x4F	; 79
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	99 83       	std	Y+1, r25	; 0x01
     2ea:	88 83       	st	Y, r24
     2ec:	ce 01       	movw	r24, r28
     2ee:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     2f2:	ce 01       	movw	r24, r28
     2f4:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZdlPv>
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <_ZN7yeelink15ylW5100EthernetC1Ev>:
#include "ylW5100Ethernet.h"

namespace yeelink
{

ylW5100Ethernet::ylW5100Ethernet()
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	ec 01       	movw	r28, r24
     304:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN7yeelink17ylGenericEthernetC1Ev>
     308:	8f e4       	ldi	r24, 0x4F	; 79
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	99 83       	std	Y+1, r25	; 0x01
     30e:	88 83       	st	Y, r24
{
	// TODO Auto-generated constructor stub

}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <_ZN7yeelink8ylclientD1Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 0;

}

ylclient::~ylclient()
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	ec 01       	movw	r28, r24
     31c:	8b e5       	ldi	r24, 0x5B	; 91
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	99 83       	std	Y+1, r25	; 0x01
     322:	88 83       	st	Y, r24
{
	delete net;
     324:	8e 85       	ldd	r24, Y+14	; 0x0e
     326:	9f 85       	ldd	r25, Y+15	; 0x0f
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	39 f0       	breq	.+14     	; 0x33a <_ZN7yeelink8ylclientD1Ev+0x24>
     32c:	dc 01       	movw	r26, r24
     32e:	ed 91       	ld	r30, X+
     330:	fc 91       	ld	r31, X
     332:	02 80       	ldd	r0, Z+2	; 0x02
     334:	f3 81       	ldd	r31, Z+3	; 0x03
     336:	e0 2d       	mov	r30, r0
     338:	09 95       	icall
	net = NULL;
     33a:	1f 86       	std	Y+15, r1	; 0x0f
     33c:	1e 86       	std	Y+14, r1	; 0x0e
}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <_ZN7yeelink8ylclientD0Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 0;

}

ylclient::~ylclient()
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ec 01       	movw	r28, r24
{
	delete net;
	net = NULL;
}
     34a:	0e 94 8b 01 	call	0x316	; 0x316 <_ZN7yeelink8ylclientD1Ev>
     34e:	ce 01       	movw	r24, r28
     350:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZdlPv>
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>:
//TODO 传递给net
	net->setSerialIndex(this->_serialIndex);
}

void ylclient::setEthernetCardType(ETHERNETCARD cardType)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ec 01       	movw	r28, r24
	this->_cardtype = cardType;
     364:	7d 83       	std	Y+5, r23	; 0x05
     366:	6c 83       	std	Y+4, r22	; 0x04
	switch (cardType)
     368:	61 15       	cp	r22, r1
     36a:	71 05       	cpc	r23, r1
     36c:	21 f0       	breq	.+8      	; 0x376 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x1c>
     36e:	62 30       	cpi	r22, 0x02	; 2
     370:	71 05       	cpc	r23, r1
     372:	a1 f4       	brne	.+40     	; 0x39c <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x42>
     374:	08 c0       	rjmp	.+16     	; 0x386 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x2c>
	{
	case W5100:
net = new ylW5100Ethernet();
     376:	88 e0       	ldi	r24, 0x08	; 8
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 21 06 	call	0xc42	; 0xc42 <_Znwj>
     37e:	8c 01       	movw	r16, r24
     380:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN7yeelink15ylW5100EthernetC1Ev>
     384:	09 c0       	rjmp	.+18     	; 0x398 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x3e>
	case ENC28J60:

		break;

	case SERIALOVERHTTP:
		net = new ylSerialHTTP();
     386:	8c e0       	ldi	r24, 0x0C	; 12
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 21 06 	call	0xc42	; 0xc42 <_Znwj>
     38e:	8c 01       	movw	r16, r24
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7yeelink12ylSerialHTTPC1Ei>
     398:	0e 87       	std	Y+14, r16	; 0x0e
     39a:	1f 87       	std	Y+15, r17	; 0x0f

		break;
	}
}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <_ZN7yeelink8ylclientC1E12ETHERNETCARD>:


namespace yeelink
{

ylclient::ylclient(ETHERNETCARD cardType)
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
     3ac:	8b e5       	ldi	r24, 0x5B	; 91
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	99 83       	std	Y+1, r25	; 0x01
     3b2:	88 83       	st	Y, r24
{
	// 必须先设置cardtype，这样才能确定net是哪个子类的实例
	this->_cardtype = cardType;
     3b4:	7d 83       	std	Y+5, r23	; 0x05
     3b6:	6c 83       	std	Y+4, r22	; 0x04
	this->setEthernetCardType(cardType);
     3b8:	ce 01       	movw	r24, r28
     3ba:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>

	this->_connected = false;
     3be:	1e 82       	std	Y+6, r1	; 0x06
	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	9b 83       	std	Y+3, r25	; 0x03
     3c6:	8a 83       	std	Y+2, r24	; 0x02

	this->_apiver = (char*) APIVERSION;
     3c8:	81 e2       	ldi	r24, 0x21	; 33
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	98 87       	std	Y+8, r25	; 0x08
     3ce:	8f 83       	std	Y+7, r24	; 0x07
	this->_activedeviceid = 0;
     3d0:	1a 86       	std	Y+10, r1	; 0x0a
     3d2:	19 86       	std	Y+9, r1	; 0x09
	this->_activesensorid = 0;
     3d4:	1c 86       	std	Y+12, r1	; 0x0c
     3d6:	1b 86       	std	Y+11, r1	; 0x0b
	this->_serialIndex = 0;
     3d8:	1d 86       	std	Y+13, r1	; 0x0d

}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     3e0:	fc 01       	movw	r30, r24
     3e2:	84 85       	ldd	r24, Z+12	; 0x0c
     3e4:	95 85       	ldd	r25, Z+13	; 0x0d
     3e6:	fc 01       	movw	r30, r24
     3e8:	e0 5c       	subi	r30, 0xC0	; 192
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	20 81       	ld	r18, Z
     3ee:	31 81       	ldd	r19, Z+1	; 0x01
     3f0:	8e 5b       	subi	r24, 0xBE	; 190
     3f2:	9f 4f       	sbci	r25, 0xFF	; 255
     3f4:	fc 01       	movw	r30, r24
     3f6:	80 81       	ld	r24, Z
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	28 1b       	sub	r18, r24
     3fc:	39 0b       	sbc	r19, r25
     3fe:	2f 73       	andi	r18, 0x3F	; 63
     400:	30 70       	andi	r19, 0x00	; 0
}
     402:	c9 01       	movw	r24, r18
     404:	08 95       	ret

00000406 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     406:	fc 01       	movw	r30, r24
     408:	84 85       	ldd	r24, Z+12	; 0x0c
     40a:	95 85       	ldd	r25, Z+13	; 0x0d
     40c:	fc 01       	movw	r30, r24
     40e:	e0 5c       	subi	r30, 0xC0	; 192
     410:	ff 4f       	sbci	r31, 0xFF	; 255
     412:	40 81       	ld	r20, Z
     414:	51 81       	ldd	r21, Z+1	; 0x01
     416:	fc 01       	movw	r30, r24
     418:	ee 5b       	subi	r30, 0xBE	; 190
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	20 81       	ld	r18, Z
     41e:	31 81       	ldd	r19, Z+1	; 0x01
     420:	42 17       	cp	r20, r18
     422:	53 07       	cpc	r21, r19
     424:	41 f0       	breq	.+16     	; 0x436 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     426:	01 90       	ld	r0, Z+
     428:	f0 81       	ld	r31, Z
     42a:	e0 2d       	mov	r30, r0
     42c:	e8 0f       	add	r30, r24
     42e:	f9 1f       	adc	r31, r25
     430:	20 81       	ld	r18, Z
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     436:	2f ef       	ldi	r18, 0xFF	; 255
     438:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     43a:	c9 01       	movw	r24, r18
     43c:	08 95       	ret

0000043e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     43e:	fc 01       	movw	r30, r24
     440:	84 85       	ldd	r24, Z+12	; 0x0c
     442:	95 85       	ldd	r25, Z+13	; 0x0d
     444:	fc 01       	movw	r30, r24
     446:	e0 5c       	subi	r30, 0xC0	; 192
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	40 81       	ld	r20, Z
     44c:	51 81       	ldd	r21, Z+1	; 0x01
     44e:	fc 01       	movw	r30, r24
     450:	ee 5b       	subi	r30, 0xBE	; 190
     452:	ff 4f       	sbci	r31, 0xFF	; 255
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	42 17       	cp	r20, r18
     45a:	53 07       	cpc	r21, r19
     45c:	71 f0       	breq	.+28     	; 0x47a <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     45e:	a0 81       	ld	r26, Z
     460:	b1 81       	ldd	r27, Z+1	; 0x01
     462:	a8 0f       	add	r26, r24
     464:	b9 1f       	adc	r27, r25
     466:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	8f 73       	andi	r24, 0x3F	; 63
     470:	90 70       	andi	r25, 0x00	; 0
     472:	91 83       	std	Z+1, r25	; 0x01
     474:	80 83       	st	Z, r24
    return c;
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     47a:	2f ef       	ldi	r18, 0xFF	; 255
     47c:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     47e:	c9 01       	movw	r24, r18
     480:	08 95       	ret

00000482 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     482:	dc 01       	movw	r26, r24
     484:	1e 96       	adiw	r26, 0x0e	; 14
     486:	8d 91       	ld	r24, X+
     488:	9c 91       	ld	r25, X
     48a:	1f 97       	sbiw	r26, 0x0f	; 15
     48c:	fc 01       	movw	r30, r24
     48e:	e0 5c       	subi	r30, 0xC0	; 192
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	8e 5b       	subi	r24, 0xBE	; 190
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	40 81       	ld	r20, Z
     498:	51 81       	ldd	r21, Z+1	; 0x01
     49a:	dc 01       	movw	r26, r24
     49c:	2d 91       	ld	r18, X+
     49e:	3c 91       	ld	r19, X
     4a0:	11 97       	sbiw	r26, 0x01	; 1
     4a2:	42 17       	cp	r20, r18
     4a4:	53 07       	cpc	r21, r19
     4a6:	b9 f7       	brne	.-18     	; 0x496 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     4a8:	08 95       	ret

000004aa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     4aa:	1f 93       	push	r17
     4ac:	fc 01       	movw	r30, r24
     4ae:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     4b0:	26 85       	ldd	r18, Z+14	; 0x0e
     4b2:	37 85       	ldd	r19, Z+15	; 0x0f
     4b4:	d9 01       	movw	r26, r18
     4b6:	a0 5c       	subi	r26, 0xC0	; 192
     4b8:	bf 4f       	sbci	r27, 0xFF	; 255
     4ba:	8d 91       	ld	r24, X+
     4bc:	9c 91       	ld	r25, X
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	60 e4       	ldi	r22, 0x40	; 64
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     4c8:	d9 01       	movw	r26, r18
     4ca:	ae 5b       	subi	r26, 0xBE	; 190
     4cc:	bf 4f       	sbci	r27, 0xFF	; 255
     4ce:	4d 91       	ld	r20, X+
     4d0:	5c 91       	ld	r21, X
     4d2:	11 97       	sbiw	r26, 0x01	; 1
     4d4:	84 17       	cp	r24, r20
     4d6:	95 07       	cpc	r25, r21
     4d8:	d1 f3       	breq	.-12     	; 0x4ce <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     4da:	d9 01       	movw	r26, r18
     4dc:	a0 5c       	subi	r26, 0xC0	; 192
     4de:	bf 4f       	sbci	r27, 0xFF	; 255
     4e0:	0d 90       	ld	r0, X+
     4e2:	bc 91       	ld	r27, X
     4e4:	a0 2d       	mov	r26, r0
     4e6:	a2 0f       	add	r26, r18
     4e8:	b3 1f       	adc	r27, r19
     4ea:	1c 93       	st	X, r17
  _tx_buffer->head = i;
     4ec:	a6 85       	ldd	r26, Z+14	; 0x0e
     4ee:	b7 85       	ldd	r27, Z+15	; 0x0f
     4f0:	a0 5c       	subi	r26, 0xC0	; 192
     4f2:	bf 4f       	sbci	r27, 0xFF	; 255
     4f4:	11 96       	adiw	r26, 0x01	; 1
     4f6:	9c 93       	st	X, r25
     4f8:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     4fa:	a6 89       	ldd	r26, Z+22	; 0x16
     4fc:	b7 89       	ldd	r27, Z+23	; 0x17
     4fe:	2c 91       	ld	r18, X
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	05 8c       	ldd	r0, Z+29	; 0x1d
     506:	02 c0       	rjmp	.+4      	; 0x50c <_ZN14HardwareSerial5writeEh+0x62>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	0a 94       	dec	r0
     50e:	e2 f7       	brpl	.-8      	; 0x508 <_ZN14HardwareSerial5writeEh+0x5e>
     510:	28 2b       	or	r18, r24
     512:	2c 93       	st	X, r18
  
  return 1;
}
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	1f 91       	pop	r17
     51a:	08 95       	ret

0000051c <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     51c:	fb 01       	movw	r30, r22
     51e:	e0 5c       	subi	r30, 0xC0	; 192
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	20 81       	ld	r18, Z
     524:	31 81       	ldd	r19, Z+1	; 0x01
     526:	2f 5f       	subi	r18, 0xFF	; 255
     528:	3f 4f       	sbci	r19, 0xFF	; 255
     52a:	2f 73       	andi	r18, 0x3F	; 63
     52c:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     52e:	db 01       	movw	r26, r22
     530:	ae 5b       	subi	r26, 0xBE	; 190
     532:	bf 4f       	sbci	r27, 0xFF	; 255
     534:	4d 91       	ld	r20, X+
     536:	5c 91       	ld	r21, X
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	24 17       	cp	r18, r20
     53c:	35 07       	cpc	r19, r21
     53e:	39 f0       	breq	.+14     	; 0x54e <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
     540:	a0 81       	ld	r26, Z
     542:	b1 81       	ldd	r27, Z+1	; 0x01
     544:	a6 0f       	add	r26, r22
     546:	b7 1f       	adc	r27, r23
     548:	8c 93       	st	X, r24
    buffer->head = i;
     54a:	31 83       	std	Z+1, r19	; 0x01
     54c:	20 83       	st	Z, r18
     54e:	08 95       	ret

00000550 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     550:	08 95       	ret

00000552 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     574:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
     578:	60 eb       	ldi	r22, 0xB0	; 176
     57a:	71 e0       	ldi	r23, 0x01	; 1
     57c:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z10store_charhP11ring_buffer>
  }
     580:	ff 91       	pop	r31
     582:	ef 91       	pop	r30
     584:	bf 91       	pop	r27
     586:	af 91       	pop	r26
     588:	9f 91       	pop	r25
     58a:	8f 91       	pop	r24
     58c:	7f 91       	pop	r23
     58e:	6f 91       	pop	r22
     590:	5f 91       	pop	r21
     592:	4f 91       	pop	r20
     594:	3f 91       	pop	r19
     596:	2f 91       	pop	r18
     598:	0f 90       	pop	r0
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	0f 90       	pop	r0
     59e:	1f 90       	pop	r1
     5a0:	18 95       	reti

000005a2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     5a2:	88 e3       	ldi	r24, 0x38	; 56
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN14HardwareSerial9availableEv>
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	11 f0       	breq	.+4      	; 0x5b2 <_Z14serialEventRunv+0x10>
     5ae:	0e 94 a8 02 	call	0x550	; 0x550 <_Z11serialEventv>
     5b2:	08 95       	ret

000005b4 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     5b4:	1f 92       	push	r1
     5b6:	0f 92       	push	r0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	2f 93       	push	r18
     5c0:	3f 93       	push	r19
     5c2:	5f 93       	push	r21
     5c4:	6f 93       	push	r22
     5c6:	7f 93       	push	r23
     5c8:	8f 93       	push	r24
     5ca:	9f 93       	push	r25
     5cc:	af 93       	push	r26
     5ce:	bf 93       	push	r27
     5d0:	ef 93       	push	r30
     5d2:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     5d4:	20 91 34 02 	lds	r18, 0x0234
     5d8:	30 91 35 02 	lds	r19, 0x0235
     5dc:	80 91 36 02 	lds	r24, 0x0236
     5e0:	90 91 37 02 	lds	r25, 0x0237
     5e4:	28 17       	cp	r18, r24
     5e6:	39 07       	cpc	r19, r25
     5e8:	31 f4       	brne	.+12     	; 0x5f6 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     5ea:	80 91 c1 00 	lds	r24, 0x00C1
     5ee:	8f 7d       	andi	r24, 0xDF	; 223
     5f0:	80 93 c1 00 	sts	0x00C1, r24
     5f4:	16 c0       	rjmp	.+44     	; 0x622 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     5f6:	e0 91 36 02 	lds	r30, 0x0236
     5fa:	f0 91 37 02 	lds	r31, 0x0237
     5fe:	ec 50       	subi	r30, 0x0C	; 12
     600:	fe 4f       	sbci	r31, 0xFE	; 254
     602:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     604:	80 91 36 02 	lds	r24, 0x0236
     608:	90 91 37 02 	lds	r25, 0x0237
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	60 e4       	ldi	r22, 0x40	; 64
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     616:	90 93 37 02 	sts	0x0237, r25
     61a:	80 93 36 02 	sts	0x0236, r24
	
  #if defined(UDR0)
    UDR0 = c;
     61e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     622:	ff 91       	pop	r31
     624:	ef 91       	pop	r30
     626:	bf 91       	pop	r27
     628:	af 91       	pop	r26
     62a:	9f 91       	pop	r25
     62c:	8f 91       	pop	r24
     62e:	7f 91       	pop	r23
     630:	6f 91       	pop	r22
     632:	5f 91       	pop	r21
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     642:	df 92       	push	r13
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24
     652:	7a 01       	movw	r14, r20
     654:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     656:	dd 24       	eor	r13, r13
     658:	d3 94       	inc	r13
     65a:	40 30       	cpi	r20, 0x00	; 0
     65c:	81 ee       	ldi	r24, 0xE1	; 225
     65e:	58 07       	cpc	r21, r24
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	68 07       	cpc	r22, r24
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	78 07       	cpc	r23, r24
     668:	49 f4       	brne	.+18     	; 0x67c <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     66a:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     66c:	ec 89       	ldd	r30, Y+20	; 0x14
     66e:	fd 89       	ldd	r31, Y+21	; 0x15
     670:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     672:	60 e8       	ldi	r22, 0x80	; 128
     674:	74 e8       	ldi	r23, 0x84	; 132
     676:	8e e1       	ldi	r24, 0x1E	; 30
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0f c0       	rjmp	.+30     	; 0x69a <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     67c:	ec 89       	ldd	r30, Y+20	; 0x14
     67e:	fd 89       	ldd	r31, Y+21	; 0x15
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 8c       	ldd	r0, Y+30	; 0x1e
     686:	02 c0       	rjmp	.+4      	; 0x68c <_ZN14HardwareSerial5beginEm+0x4a>
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <_ZN14HardwareSerial5beginEm+0x46>
     690:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	79 e0       	ldi	r23, 0x09	; 9
     696:	8d e3       	ldi	r24, 0x3D	; 61
     698:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     69a:	a8 01       	movw	r20, r16
     69c:	97 01       	movw	r18, r14
     69e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodsi4>
     6a2:	21 50       	subi	r18, 0x01	; 1
     6a4:	30 40       	sbci	r19, 0x00	; 0
     6a6:	40 40       	sbci	r20, 0x00	; 0
     6a8:	50 40       	sbci	r21, 0x00	; 0
     6aa:	56 95       	lsr	r21
     6ac:	47 95       	ror	r20
     6ae:	37 95       	ror	r19
     6b0:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     6b2:	80 e1       	ldi	r24, 0x10	; 16
     6b4:	20 30       	cpi	r18, 0x00	; 0
     6b6:	38 07       	cpc	r19, r24
     6b8:	10 f0       	brcs	.+4      	; 0x6be <_ZN14HardwareSerial5beginEm+0x7c>
     6ba:	dd 20       	and	r13, r13
     6bc:	b1 f6       	brne	.-84     	; 0x66a <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     6be:	e8 89       	ldd	r30, Y+16	; 0x10
     6c0:	f9 89       	ldd	r31, Y+17	; 0x11
     6c2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     6c4:	ea 89       	ldd	r30, Y+18	; 0x12
     6c6:	fb 89       	ldd	r31, Y+19	; 0x13
     6c8:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     6ca:	ee 89       	ldd	r30, Y+22	; 0x16
     6cc:	ff 89       	ldd	r31, Y+23	; 0x17
     6ce:	40 81       	ld	r20, Z
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	9c 01       	movw	r18, r24
     6d6:	0a 8c       	ldd	r0, Y+26	; 0x1a
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <_ZN14HardwareSerial5beginEm+0x9c>
     6da:	22 0f       	add	r18, r18
     6dc:	33 1f       	adc	r19, r19
     6de:	0a 94       	dec	r0
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <_ZN14HardwareSerial5beginEm+0x98>
     6e2:	42 2b       	or	r20, r18
     6e4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     6e6:	ee 89       	ldd	r30, Y+22	; 0x16
     6e8:	ff 89       	ldd	r31, Y+23	; 0x17
     6ea:	40 81       	ld	r20, Z
     6ec:	9c 01       	movw	r18, r24
     6ee:	0b 8c       	ldd	r0, Y+27	; 0x1b
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <_ZN14HardwareSerial5beginEm+0xb4>
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	0a 94       	dec	r0
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <_ZN14HardwareSerial5beginEm+0xb0>
     6fa:	42 2b       	or	r20, r18
     6fc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     6fe:	ee 89       	ldd	r30, Y+22	; 0x16
     700:	ff 89       	ldd	r31, Y+23	; 0x17
     702:	40 81       	ld	r20, Z
     704:	9c 01       	movw	r18, r24
     706:	0c 8c       	ldd	r0, Y+28	; 0x1c
     708:	02 c0       	rjmp	.+4      	; 0x70e <_ZN14HardwareSerial5beginEm+0xcc>
     70a:	22 0f       	add	r18, r18
     70c:	33 1f       	adc	r19, r19
     70e:	0a 94       	dec	r0
     710:	e2 f7       	brpl	.-8      	; 0x70a <_ZN14HardwareSerial5beginEm+0xc8>
     712:	42 2b       	or	r20, r18
     714:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     716:	ee 89       	ldd	r30, Y+22	; 0x16
     718:	ff 89       	ldd	r31, Y+23	; 0x17
     71a:	20 81       	ld	r18, Z
     71c:	0d 8c       	ldd	r0, Y+29	; 0x1d
     71e:	02 c0       	rjmp	.+4      	; 0x724 <_ZN14HardwareSerial5beginEm+0xe2>
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <_ZN14HardwareSerial5beginEm+0xde>
     728:	80 95       	com	r24
     72a:	82 23       	and	r24, r18
     72c:	80 83       	st	Z, r24
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	08 95       	ret

0000073e <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     73e:	10 92 3b 02 	sts	0x023B, r1
     742:	10 92 3a 02 	sts	0x023A, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     746:	88 ee       	ldi	r24, 0xE8	; 232
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	a0 e0       	ldi	r26, 0x00	; 0
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	80 93 3c 02 	sts	0x023C, r24
     752:	90 93 3d 02 	sts	0x023D, r25
     756:	a0 93 3e 02 	sts	0x023E, r26
     75a:	b0 93 3f 02 	sts	0x023F, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     75e:	ea e3       	ldi	r30, 0x3A	; 58
     760:	f2 e0       	ldi	r31, 0x02	; 2
     762:	83 e6       	ldi	r24, 0x63	; 99
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	92 93       	st	-Z, r25
     768:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     76a:	80 eb       	ldi	r24, 0xB0	; 176
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	95 87       	std	Z+13, r25	; 0x0d
     770:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     772:	84 ef       	ldi	r24, 0xF4	; 244
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	97 87       	std	Z+15, r25	; 0x0f
     778:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     77a:	85 ec       	ldi	r24, 0xC5	; 197
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	91 8b       	std	Z+17, r25	; 0x11
     780:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     782:	84 ec       	ldi	r24, 0xC4	; 196
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	93 8b       	std	Z+19, r25	; 0x13
     788:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     78a:	80 ec       	ldi	r24, 0xC0	; 192
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	95 8b       	std	Z+21, r25	; 0x15
     790:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     792:	81 ec       	ldi	r24, 0xC1	; 193
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	97 8b       	std	Z+23, r25	; 0x17
     798:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     79a:	86 ec       	ldi	r24, 0xC6	; 198
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	91 8f       	std	Z+25, r25	; 0x19
     7a0:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     7a6:	83 e0       	ldi	r24, 0x03	; 3
     7a8:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     7aa:	87 e0       	ldi	r24, 0x07	; 7
     7ac:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     7ae:	85 e0       	ldi	r24, 0x05	; 5
     7b0:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     7b6:	08 95       	ret

000007b8 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     7b8:	8f 92       	push	r8
     7ba:	9f 92       	push	r9
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	4c 01       	movw	r8, r24
     7d2:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	a8 2e       	mov	r10, r24
     7d8:	b1 2c       	mov	r11, r1
     7da:	a8 0c       	add	r10, r8
     7dc:	b9 1c       	adc	r11, r9
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     7de:	c0 e0       	ldi	r28, 0x00	; 0
     7e0:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     7e2:	cc 24       	eor	r12, r12
     7e4:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     7e6:	f5 01       	movw	r30, r10
     7e8:	61 91       	ld	r22, Z+
     7ea:	5f 01       	movw	r10, r30
     7ec:	c7 01       	movw	r24, r14
     7ee:	4a e0       	ldi	r20, 0x0A	; 10
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN5Print5printEhi>
     7f6:	8c 01       	movw	r16, r24
        n += p.print('.');
     7f8:	c7 01       	movw	r24, r14
     7fa:	6e e2       	ldi	r22, 0x2E	; 46
     7fc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
     800:	08 0f       	add	r16, r24
     802:	19 1f       	adc	r17, r25
        n += p.print('.');
     804:	c0 0e       	add	r12, r16
     806:	d1 1e       	adc	r13, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     808:	21 96       	adiw	r28, 0x01	; 1
     80a:	c3 30       	cpi	r28, 0x03	; 3
     80c:	d1 05       	cpc	r29, r1
     80e:	59 f7       	brne	.-42     	; 0x7e6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
     810:	c7 01       	movw	r24, r14
     812:	f4 01       	movw	r30, r8
     814:	65 81       	ldd	r22, Z+5	; 0x05
     816:	4a e0       	ldi	r20, 0x0A	; 10
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN5Print5printEhi>
     81e:	c8 0e       	add	r12, r24
     820:	d9 1e       	adc	r13, r25
    return n;
}
     822:	c6 01       	movw	r24, r12
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	bf 90       	pop	r11
     836:	af 90       	pop	r10
     838:	9f 90       	pop	r9
     83a:	8f 90       	pop	r8
     83c:	08 95       	ret

0000083e <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
     83e:	fc 01       	movw	r30, r24
     840:	83 e7       	ldi	r24, 0x73	; 115
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	91 83       	std	Z+1, r25	; 0x01
     846:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
     848:	12 82       	std	Z+2, r1	; 0x02
     84a:	13 82       	std	Z+3, r1	; 0x03
     84c:	14 82       	std	Z+4, r1	; 0x04
     84e:	15 82       	std	Z+5, r1	; 0x05
}
     850:	08 95       	ret

00000852 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     852:	0f 93       	push	r16
     854:	fc 01       	movw	r30, r24
     856:	83 e7       	ldi	r24, 0x73	; 115
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
     85e:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
     860:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
     862:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
     864:	05 83       	std	Z+5, r16	; 0x05
}
     866:	0f 91       	pop	r16
     868:	08 95       	ret

0000086a <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     86a:	83 e7       	ldi	r24, 0x73	; 115
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	90 93 58 02 	sts	0x0258, r25
     872:	80 93 57 02 	sts	0x0257, r24
{
    _address[0] = first_octet;
     876:	10 92 59 02 	sts	0x0259, r1
    _address[1] = second_octet;
     87a:	10 92 5a 02 	sts	0x025A, r1
    _address[2] = third_octet;
     87e:	10 92 5b 02 	sts	0x025B, r1
    _address[3] = fourth_octet;
     882:	10 92 5c 02 	sts	0x025C, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
     886:	08 95       	ret

00000888 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	6c 01       	movw	r12, r24
     89a:	7b 01       	movw	r14, r22
     89c:	8a 01       	movw	r16, r20
  size_t n = 0;
     89e:	c0 e0       	ldi	r28, 0x00	; 0
     8a0:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
     8a4:	d7 01       	movw	r26, r14
     8a6:	6d 91       	ld	r22, X+
     8a8:	7d 01       	movw	r14, r26
     8aa:	d6 01       	movw	r26, r12
     8ac:	ed 91       	ld	r30, X+
     8ae:	fc 91       	ld	r31, X
     8b0:	01 90       	ld	r0, Z+
     8b2:	f0 81       	ld	r31, Z
     8b4:	e0 2d       	mov	r30, r0
     8b6:	c6 01       	movw	r24, r12
     8b8:	09 95       	icall
     8ba:	c8 0f       	add	r28, r24
     8bc:	d9 1f       	adc	r29, r25
     8be:	01 50       	subi	r16, 0x01	; 1
     8c0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     8c2:	01 15       	cp	r16, r1
     8c4:	11 05       	cpc	r17, r1
     8c6:	71 f7       	brne	.-36     	; 0x8a4 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     8c8:	ce 01       	movw	r24, r28
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	08 95       	ret

000008dc <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     8dc:	db 01       	movw	r26, r22
     8de:	0d 90       	ld	r0, X+
     8e0:	00 20       	and	r0, r0
     8e2:	e9 f7       	brne	.-6      	; 0x8de <_ZN5Print5writeEPKc+0x2>
     8e4:	ad 01       	movw	r20, r26
     8e6:	41 50       	subi	r20, 0x01	; 1
     8e8:	50 40       	sbci	r21, 0x00	; 0
     8ea:	46 1b       	sub	r20, r22
     8ec:	57 0b       	sbc	r21, r23
     8ee:	dc 01       	movw	r26, r24
     8f0:	ed 91       	ld	r30, X+
     8f2:	fc 91       	ld	r31, X
     8f4:	02 80       	ldd	r0, Z+2	; 0x02
     8f6:	f3 81       	ldd	r31, Z+3	; 0x03
     8f8:	e0 2d       	mov	r30, r0
     8fa:	09 95       	icall
     8fc:	08 95       	ret

000008fe <_ZN5Print5printEc>:
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
     8fe:	dc 01       	movw	r26, r24
     900:	ed 91       	ld	r30, X+
     902:	fc 91       	ld	r31, X
     904:	01 90       	ld	r0, Z+
     906:	f0 81       	ld	r31, Z
     908:	e0 2d       	mov	r30, r0
     90a:	09 95       	icall
    size_t println(long, int = DEC);
     90c:	08 95       	ret

0000090e <_ZN5Print11printNumberEmh>:
     90e:	8f 92       	push	r8
     910:	9f 92       	push	r9
     912:	af 92       	push	r10
     914:	bf 92       	push	r11
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	a1 97       	sbiw	r28, 0x21	; 33
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	6c 01       	movw	r12, r24
     938:	04 2f       	mov	r16, r20
     93a:	e5 2f       	mov	r30, r21
     93c:	cb 01       	movw	r24, r22
     93e:	12 2f       	mov	r17, r18
     940:	19 a2       	std	Y+33, r1	; 0x21
     942:	22 30       	cpi	r18, 0x02	; 2
     944:	08 f4       	brcc	.+2      	; 0x948 <_ZN5Print11printNumberEmh+0x3a>
     946:	1a e0       	ldi	r17, 0x0A	; 10
     948:	21 e2       	ldi	r18, 0x21	; 33
     94a:	e2 2e       	mov	r14, r18
     94c:	f1 2c       	mov	r15, r1
     94e:	ec 0e       	add	r14, r28
     950:	fd 1e       	adc	r15, r29
     952:	81 2e       	mov	r8, r17
     954:	99 24       	eor	r9, r9
     956:	aa 24       	eor	r10, r10
     958:	bb 24       	eor	r11, r11
     95a:	03 c0       	rjmp	.+6      	; 0x962 <_ZN5Print11printNumberEmh+0x54>
     95c:	02 2f       	mov	r16, r18
     95e:	e3 2f       	mov	r30, r19
     960:	ca 01       	movw	r24, r20
     962:	60 2f       	mov	r22, r16
     964:	7e 2f       	mov	r23, r30
     966:	a5 01       	movw	r20, r10
     968:	94 01       	movw	r18, r8
     96a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodsi4>
     96e:	12 9f       	mul	r17, r18
     970:	80 2d       	mov	r24, r0
     972:	11 24       	eor	r1, r1
     974:	08 1b       	sub	r16, r24
     976:	08 94       	sec
     978:	e1 08       	sbc	r14, r1
     97a:	f1 08       	sbc	r15, r1
     97c:	0a 30       	cpi	r16, 0x0A	; 10
     97e:	14 f4       	brge	.+4      	; 0x984 <_ZN5Print11printNumberEmh+0x76>
     980:	00 5d       	subi	r16, 0xD0	; 208
     982:	01 c0       	rjmp	.+2      	; 0x986 <_ZN5Print11printNumberEmh+0x78>
     984:	09 5c       	subi	r16, 0xC9	; 201
     986:	f7 01       	movw	r30, r14
     988:	00 83       	st	Z, r16
     98a:	21 15       	cp	r18, r1
     98c:	31 05       	cpc	r19, r1
     98e:	41 05       	cpc	r20, r1
     990:	51 05       	cpc	r21, r1
     992:	21 f7       	brne	.-56     	; 0x95c <_ZN5Print11printNumberEmh+0x4e>
     994:	c6 01       	movw	r24, r12
     996:	b7 01       	movw	r22, r14
     998:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN5Print5writeEPKc>
     99c:	a1 96       	adiw	r28, 0x21	; 33
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	bf 90       	pop	r11
     9ba:	af 90       	pop	r10
     9bc:	9f 90       	pop	r9
     9be:	8f 90       	pop	r8
     9c0:	08 95       	ret

000009c2 <_ZN5Print5printEmi>:
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	49 f4       	brne	.+18     	; 0x9da <_ZN5Print5printEmi+0x18>
     9c8:	dc 01       	movw	r26, r24
     9ca:	ed 91       	ld	r30, X+
     9cc:	fc 91       	ld	r31, X
     9ce:	01 90       	ld	r0, Z+
     9d0:	f0 81       	ld	r31, Z
     9d2:	e0 2d       	mov	r30, r0
     9d4:	64 2f       	mov	r22, r20
     9d6:	09 95       	icall
     9d8:	08 95       	ret
     9da:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN5Print11printNumberEmh>
     9de:	08 95       	ret

000009e0 <_ZN5Print5printEhi>:
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
     9e0:	9a 01       	movw	r18, r20
    size_t println(void);
     9e2:	46 2f       	mov	r20, r22
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_ZN5Print5printEmi>
};
     9ee:	08 95       	ret

000009f0 <_ZN5Print5printEli>:
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	ec 01       	movw	r28, r24
     a02:	7a 01       	movw	r14, r20
     a04:	8b 01       	movw	r16, r22
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	41 f4       	brne	.+16     	; 0xa1c <_ZN5Print5printEli+0x2c>
     a0c:	e8 81       	ld	r30, Y
     a0e:	f9 81       	ldd	r31, Y+1	; 0x01
     a10:	01 90       	ld	r0, Z+
     a12:	f0 81       	ld	r31, Z
     a14:	e0 2d       	mov	r30, r0
     a16:	64 2f       	mov	r22, r20
     a18:	09 95       	icall
     a1a:	1a c0       	rjmp	.+52     	; 0xa50 <_ZN5Print5printEli+0x60>
     a1c:	2a 30       	cpi	r18, 0x0A	; 10
     a1e:	31 05       	cpc	r19, r1
     a20:	a9 f4       	brne	.+42     	; 0xa4c <_ZN5Print5printEli+0x5c>
     a22:	77 ff       	sbrs	r23, 7
     a24:	12 c0       	rjmp	.+36     	; 0xa4a <_ZN5Print5printEli+0x5a>
     a26:	6d e2       	ldi	r22, 0x2D	; 45
     a28:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN5Print5printEc>
     a2c:	6c 01       	movw	r12, r24
     a2e:	44 27       	eor	r20, r20
     a30:	55 27       	eor	r21, r21
     a32:	ba 01       	movw	r22, r20
     a34:	4e 19       	sub	r20, r14
     a36:	5f 09       	sbc	r21, r15
     a38:	60 0b       	sbc	r22, r16
     a3a:	71 0b       	sbc	r23, r17
     a3c:	ce 01       	movw	r24, r28
     a3e:	2a e0       	ldi	r18, 0x0A	; 10
     a40:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN5Print11printNumberEmh>
     a44:	c8 0e       	add	r12, r24
     a46:	d9 1e       	adc	r13, r25
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <_ZN5Print5printEli+0x62>
     a4a:	2a e0       	ldi	r18, 0x0A	; 10
     a4c:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN5Print11printNumberEmh>
     a50:	6c 01       	movw	r12, r24
     a52:	c6 01       	movw	r24, r12
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	08 95       	ret

00000a66 <_ZN5Print10printFloatEdh>:
     a66:	6f 92       	push	r6
     a68:	7f 92       	push	r7
     a6a:	9f 92       	push	r9
     a6c:	af 92       	push	r10
     a6e:	bf 92       	push	r11
     a70:	cf 92       	push	r12
     a72:	df 92       	push	r13
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	3c 01       	movw	r6, r24
     a82:	7a 01       	movw	r14, r20
     a84:	8b 01       	movw	r16, r22
     a86:	c2 2e       	mov	r12, r18
     a88:	cb 01       	movw	r24, r22
     a8a:	ba 01       	movw	r22, r20
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	a9 01       	movw	r20, r18
     a92:	0e 94 7e 07 	call	0xefc	; 0xefc <__cmpsf2>
     a96:	87 ff       	sbrs	r24, 7
     a98:	0a c0       	rjmp	.+20     	; 0xaae <_ZN5Print10printFloatEdh+0x48>
     a9a:	c3 01       	movw	r24, r6
     a9c:	6d e2       	ldi	r22, 0x2D	; 45
     a9e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN5Print5printEc>
     aa2:	ec 01       	movw	r28, r24
     aa4:	17 fb       	bst	r17, 7
     aa6:	10 95       	com	r17
     aa8:	17 f9       	bld	r17, 7
     aaa:	10 95       	com	r17
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <_ZN5Print10printFloatEdh+0x4c>
     aae:	c0 e0       	ldi	r28, 0x00	; 0
     ab0:	d0 e0       	ldi	r29, 0x00	; 0
     ab2:	dd 24       	eor	r13, r13
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	2f e3       	ldi	r18, 0x3F	; 63
     abc:	11 c0       	rjmp	.+34     	; 0xae0 <_ZN5Print10printFloatEdh+0x7a>
     abe:	da 01       	movw	r26, r20
     ac0:	f9 01       	movw	r30, r18
     ac2:	6b 2f       	mov	r22, r27
     ac4:	74 2f       	mov	r23, r20
     ac6:	8f 2f       	mov	r24, r31
     ac8:	92 2f       	mov	r25, r18
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e2       	ldi	r20, 0x20	; 32
     ad0:	51 e4       	ldi	r21, 0x41	; 65
     ad2:	0e 94 82 07 	call	0xf04	; 0xf04 <__divsf3>
     ad6:	56 2f       	mov	r21, r22
     ad8:	47 2f       	mov	r20, r23
     ada:	38 2f       	mov	r19, r24
     adc:	29 2f       	mov	r18, r25
     ade:	d3 94       	inc	r13
     ae0:	dc 14       	cp	r13, r12
     ae2:	68 f3       	brcs	.-38     	; 0xabe <_ZN5Print10printFloatEdh+0x58>
     ae4:	c8 01       	movw	r24, r16
     ae6:	b7 01       	movw	r22, r14
     ae8:	da 01       	movw	r26, r20
     aea:	f9 01       	movw	r30, r18
     aec:	2b 2f       	mov	r18, r27
     aee:	34 2f       	mov	r19, r20
     af0:	4f 2f       	mov	r20, r31
     af2:	5e 2f       	mov	r21, r30
     af4:	0e 94 1a 07 	call	0xe34	; 0xe34 <__addsf3>
     af8:	5b 01       	movw	r10, r22
     afa:	f8 2e       	mov	r15, r24
     afc:	99 2e       	mov	r9, r25
     afe:	7b 2d       	mov	r23, r11
     b00:	0e 94 ef 07 	call	0xfde	; 0xfde <__fixunssfsi>
     b04:	16 2f       	mov	r17, r22
     b06:	d7 2e       	mov	r13, r23
     b08:	e8 2e       	mov	r14, r24
     b0a:	09 2f       	mov	r16, r25
     b0c:	0e 94 1b 08 	call	0x1036	; 0x1036 <__floatunsisf>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	6a 2d       	mov	r22, r10
     b16:	7b 2d       	mov	r23, r11
     b18:	8f 2d       	mov	r24, r15
     b1a:	99 2d       	mov	r25, r9
     b1c:	0e 94 19 07 	call	0xe32	; 0xe32 <__subsf3>
     b20:	96 2e       	mov	r9, r22
     b22:	a7 2e       	mov	r10, r23
     b24:	b8 2e       	mov	r11, r24
     b26:	f9 2e       	mov	r15, r25
     b28:	c3 01       	movw	r24, r6
     b2a:	41 2f       	mov	r20, r17
     b2c:	5d 2d       	mov	r21, r13
     b2e:	6e 2d       	mov	r22, r14
     b30:	70 2f       	mov	r23, r16
     b32:	2a e0       	ldi	r18, 0x0A	; 10
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_ZN5Print5printEmi>
     b3a:	c8 0f       	add	r28, r24
     b3c:	d9 1f       	adc	r29, r25
     b3e:	cc 20       	and	r12, r12
     b40:	b9 f1       	breq	.+110    	; 0xbb0 <_ZN5Print10printFloatEdh+0x14a>
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     b42:	c3 01       	movw	r24, r6
     b44:	66 e2       	ldi	r22, 0x26	; 38
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN5Print5writeEPKc>
     b4c:	c8 0f       	add	r28, r24
     b4e:	d9 1f       	adc	r29, r25
     b50:	2f c0       	rjmp	.+94     	; 0xbb0 <_ZN5Print10printFloatEdh+0x14a>
     b52:	69 2d       	mov	r22, r9
     b54:	7a 2d       	mov	r23, r10
     b56:	8b 2d       	mov	r24, r11
     b58:	9f 2d       	mov	r25, r15
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e2       	ldi	r20, 0x20	; 32
     b60:	51 e4       	ldi	r21, 0x41	; 65
     b62:	0e 94 cd 08 	call	0x119a	; 0x119a <__mulsf3>
     b66:	d6 2e       	mov	r13, r22
     b68:	b7 2e       	mov	r11, r23
     b6a:	a8 2e       	mov	r10, r24
     b6c:	99 2e       	mov	r9, r25
     b6e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__fixsfsi>
    size_t println(void);
};

#endif
     b72:	7b 01       	movw	r14, r22
     b74:	00 27       	eor	r16, r16
     b76:	f7 fc       	sbrc	r15, 7
     b78:	00 95       	com	r16
     b7a:	10 2f       	mov	r17, r16
     b7c:	c3 01       	movw	r24, r6
     b7e:	b8 01       	movw	r22, r16
     b80:	a7 01       	movw	r20, r14
     b82:	2a e0       	ldi	r18, 0x0A	; 10
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN5Print5printEli>
     b8a:	c8 0f       	add	r28, r24
     b8c:	d9 1f       	adc	r29, r25
     b8e:	c8 01       	movw	r24, r16
     b90:	b7 01       	movw	r22, r14
     b92:	0e 94 1d 08 	call	0x103a	; 0x103a <__floatsisf>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	6d 2d       	mov	r22, r13
     b9c:	7b 2d       	mov	r23, r11
     b9e:	8a 2d       	mov	r24, r10
     ba0:	99 2d       	mov	r25, r9
     ba2:	0e 94 19 07 	call	0xe32	; 0xe32 <__subsf3>
     ba6:	96 2e       	mov	r9, r22
     ba8:	a7 2e       	mov	r10, r23
     baa:	b8 2e       	mov	r11, r24
     bac:	f9 2e       	mov	r15, r25
     bae:	ca 94       	dec	r12
     bb0:	cc 20       	and	r12, r12
     bb2:	79 f6       	brne	.-98     	; 0xb52 <_ZN5Print10printFloatEdh+0xec>
     bb4:	ce 01       	movw	r24, r28
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	bf 90       	pop	r11
     bc8:	af 90       	pop	r10
     bca:	9f 90       	pop	r9
     bcc:	7f 90       	pop	r7
     bce:	6f 90       	pop	r6
     bd0:	08 95       	ret

00000bd2 <_ZN5Print5printEdi>:
     bd2:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN5Print10printFloatEdh>
     bd6:	08 95       	ret

00000bd8 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	29 f0       	breq	.+10     	; 0xbe6 <_Z10randomSeedj+0xe>
    srandom(seed);
     bdc:	bc 01       	movw	r22, r24
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 38 0b 	call	0x1670	; 0x1670 <srandom>
     be6:	08 95       	ret

00000be8 <_Z6randoml>:
  }
}

long random(long howbig)
{
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	7b 01       	movw	r14, r22
     bf2:	8c 01       	movw	r16, r24
  if (howbig == 0) {
     bf4:	61 15       	cp	r22, r1
     bf6:	71 05       	cpc	r23, r1
     bf8:	81 05       	cpc	r24, r1
     bfa:	91 05       	cpc	r25, r1
     bfc:	49 f0       	breq	.+18     	; 0xc10 <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
     bfe:	0e 94 33 0b 	call	0x1666	; 0x1666 <random>
     c02:	a8 01       	movw	r20, r16
     c04:	97 01       	movw	r18, r14
     c06:	0e 94 84 09 	call	0x1308	; 0x1308 <__divmodsi4>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
     c16:	b9 01       	movw	r22, r18
     c18:	ca 01       	movw	r24, r20
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	08 95       	ret

00000c24 <main>:
#include <Arduino.h>

int main(void)
{
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
	init();
     c28:	0e 94 bd 06 	call	0xd7a	; 0xd7a <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     c2c:	0e 94 bf 00 	call	0x17e	; 0x17e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c30:	c1 ed       	ldi	r28, 0xD1	; 209
     c32:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     c34:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <loop>
		if (serialEventRun) serialEventRun();
     c38:	20 97       	sbiw	r28, 0x00	; 0
     c3a:	e1 f3       	breq	.-8      	; 0xc34 <main+0x10>
     c3c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_Z14serialEventRunv>
     c40:	f9 cf       	rjmp	.-14     	; 0xc34 <main+0x10>

00000c42 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
     c42:	0e 94 b9 09 	call	0x1372	; 0x1372 <malloc>
}
     c46:	08 95       	ret

00000c48 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
     c48:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <free>
} 
     c4c:	08 95       	ret

00000c4e <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
     c4e:	08 95       	ret

00000c50 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
     c62:	af 93       	push	r26
     c64:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     c66:	80 91 61 02 	lds	r24, 0x0261
     c6a:	90 91 62 02 	lds	r25, 0x0262
     c6e:	a0 91 63 02 	lds	r26, 0x0263
     c72:	b0 91 64 02 	lds	r27, 0x0264
	unsigned char f = timer0_fract;
     c76:	30 91 65 02 	lds	r19, 0x0265

	m += MILLIS_INC;
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	a1 1d       	adc	r26, r1
     c7e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     c80:	23 2f       	mov	r18, r19
     c82:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     c84:	2d 37       	cpi	r18, 0x7D	; 125
     c86:	20 f0       	brcs	.+8      	; 0xc90 <__vector_16+0x40>
		f -= FRACT_MAX;
     c88:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	a1 1d       	adc	r26, r1
     c8e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     c90:	20 93 65 02 	sts	0x0265, r18
	timer0_millis = m;
     c94:	80 93 61 02 	sts	0x0261, r24
     c98:	90 93 62 02 	sts	0x0262, r25
     c9c:	a0 93 63 02 	sts	0x0263, r26
     ca0:	b0 93 64 02 	sts	0x0264, r27
	timer0_overflow_count++;
     ca4:	80 91 5d 02 	lds	r24, 0x025D
     ca8:	90 91 5e 02 	lds	r25, 0x025E
     cac:	a0 91 5f 02 	lds	r26, 0x025F
     cb0:	b0 91 60 02 	lds	r27, 0x0260
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	a1 1d       	adc	r26, r1
     cb8:	b1 1d       	adc	r27, r1
     cba:	80 93 5d 02 	sts	0x025D, r24
     cbe:	90 93 5e 02 	sts	0x025E, r25
     cc2:	a0 93 5f 02 	sts	0x025F, r26
     cc6:	b0 93 60 02 	sts	0x0260, r27
}
     cca:	bf 91       	pop	r27
     ccc:	af 91       	pop	r26
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0f 90       	pop	r0
     cdc:	1f 90       	pop	r1
     cde:	18 95       	reti

00000ce0 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     ce0:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     ce2:	f8 94       	cli
	m = timer0_overflow_count;
     ce4:	20 91 5d 02 	lds	r18, 0x025D
     ce8:	30 91 5e 02 	lds	r19, 0x025E
     cec:	40 91 5f 02 	lds	r20, 0x025F
     cf0:	50 91 60 02 	lds	r21, 0x0260
#if defined(TCNT0)
	t = TCNT0;
     cf4:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     cf6:	a8 9b       	sbis	0x15, 0	; 21
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <micros+0x26>
     cfa:	8f 3f       	cpi	r24, 0xFF	; 255
     cfc:	21 f0       	breq	.+8      	; 0xd06 <micros+0x26>
		m++;
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
     d02:	4f 4f       	sbci	r20, 0xFF	; 255
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     d06:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     d08:	54 2f       	mov	r21, r20
     d0a:	43 2f       	mov	r20, r19
     d0c:	32 2f       	mov	r19, r18
     d0e:	22 27       	eor	r18, r18
     d10:	28 0f       	add	r18, r24
     d12:	31 1d       	adc	r19, r1
     d14:	41 1d       	adc	r20, r1
     d16:	51 1d       	adc	r21, r1
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	44 1f       	adc	r20, r20
     d20:	55 1f       	adc	r21, r21
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <micros+0x3a>
}
     d26:	b9 01       	movw	r22, r18
     d28:	ca 01       	movw	r24, r20
     d2a:	08 95       	ret

00000d2c <delay>:

void delay(unsigned long ms)
{
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	7b 01       	movw	r14, r22
     d3a:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     d3c:	0e 94 70 06 	call	0xce0	; 0xce0 <micros>
     d40:	eb 01       	movw	r28, r22

	while (ms > 0) {
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     d44:	0e 94 70 06 	call	0xce0	; 0xce0 <micros>
     d48:	6c 1b       	sub	r22, r28
     d4a:	7d 0b       	sbc	r23, r29
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	68 3e       	cpi	r22, 0xE8	; 232
     d50:	78 07       	cpc	r23, r24
     d52:	38 f0       	brcs	.+14     	; 0xd62 <delay+0x36>
			ms--;
     d54:	08 94       	sec
     d56:	e1 08       	sbc	r14, r1
     d58:	f1 08       	sbc	r15, r1
     d5a:	01 09       	sbc	r16, r1
     d5c:	11 09       	sbc	r17, r1
			start += 1000;
     d5e:	c8 51       	subi	r28, 0x18	; 24
     d60:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     d62:	e1 14       	cp	r14, r1
     d64:	f1 04       	cpc	r15, r1
     d66:	01 05       	cpc	r16, r1
     d68:	11 05       	cpc	r17, r1
     d6a:	61 f7       	brne	.-40     	; 0xd44 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	08 95       	ret

00000d7a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d7a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d7c:	84 b5       	in	r24, 0x24	; 36
     d7e:	82 60       	ori	r24, 0x02	; 2
     d80:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d82:	84 b5       	in	r24, 0x24	; 36
     d84:	81 60       	ori	r24, 0x01	; 1
     d86:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d88:	85 b5       	in	r24, 0x25	; 37
     d8a:	82 60       	ori	r24, 0x02	; 2
     d8c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d8e:	85 b5       	in	r24, 0x25	; 37
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d94:	ee e6       	ldi	r30, 0x6E	; 110
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	81 60       	ori	r24, 0x01	; 1
     d9c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d9e:	e1 e8       	ldi	r30, 0x81	; 129
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     da4:	80 81       	ld	r24, Z
     da6:	82 60       	ori	r24, 0x02	; 2
     da8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     daa:	80 81       	ld	r24, Z
     dac:	81 60       	ori	r24, 0x01	; 1
     dae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     db0:	e0 e8       	ldi	r30, 0x80	; 128
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	81 60       	ori	r24, 0x01	; 1
     db8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     dba:	e1 eb       	ldi	r30, 0xB1	; 177
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	84 60       	ori	r24, 0x04	; 4
     dc2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     dc4:	e0 eb       	ldi	r30, 0xB0	; 176
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     dce:	ea e7       	ldi	r30, 0x7A	; 122
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	84 60       	ori	r24, 0x04	; 4
     dd6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     dd8:	80 81       	ld	r24, Z
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     dde:	80 81       	ld	r24, Z
     de0:	81 60       	ori	r24, 0x01	; 1
     de2:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     de4:	80 81       	ld	r24, Z
     de6:	80 68       	ori	r24, 0x80	; 128
     de8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     dea:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     dee:	08 95       	ret

00000df0 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     df0:	8e 30       	cpi	r24, 0x0E	; 14
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <analogRead+0x6>
     df4:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     df6:	87 70       	andi	r24, 0x07	; 7
     df8:	90 91 32 01 	lds	r25, 0x0132
     dfc:	92 95       	swap	r25
     dfe:	99 0f       	add	r25, r25
     e00:	99 0f       	add	r25, r25
     e02:	90 7c       	andi	r25, 0xC0	; 192
     e04:	98 2b       	or	r25, r24
     e06:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     e0a:	80 91 7a 00 	lds	r24, 0x007A
     e0e:	80 64       	ori	r24, 0x40	; 64
     e10:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     e14:	80 91 7a 00 	lds	r24, 0x007A
     e18:	86 fd       	sbrc	r24, 6
     e1a:	fc cf       	rjmp	.-8      	; 0xe14 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     e1c:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     e20:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     e24:	93 2f       	mov	r25, r19
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	28 2b       	or	r18, r24
     e2c:	39 2b       	or	r19, r25
}
     e2e:	c9 01       	movw	r24, r18
     e30:	08 95       	ret

00000e32 <__subsf3>:
     e32:	50 58       	subi	r21, 0x80	; 128

00000e34 <__addsf3>:
     e34:	bb 27       	eor	r27, r27
     e36:	aa 27       	eor	r26, r26
     e38:	0e d0       	rcall	.+28     	; 0xe56 <__addsf3x>
     e3a:	75 c1       	rjmp	.+746    	; 0x1126 <__fp_round>
     e3c:	66 d1       	rcall	.+716    	; 0x110a <__fp_pscA>
     e3e:	30 f0       	brcs	.+12     	; 0xe4c <__addsf3+0x18>
     e40:	6b d1       	rcall	.+726    	; 0x1118 <__fp_pscB>
     e42:	20 f0       	brcs	.+8      	; 0xe4c <__addsf3+0x18>
     e44:	31 f4       	brne	.+12     	; 0xe52 <__addsf3+0x1e>
     e46:	9f 3f       	cpi	r25, 0xFF	; 255
     e48:	11 f4       	brne	.+4      	; 0xe4e <__addsf3+0x1a>
     e4a:	1e f4       	brtc	.+6      	; 0xe52 <__addsf3+0x1e>
     e4c:	5b c1       	rjmp	.+694    	; 0x1104 <__fp_nan>
     e4e:	0e f4       	brtc	.+2      	; 0xe52 <__addsf3+0x1e>
     e50:	e0 95       	com	r30
     e52:	e7 fb       	bst	r30, 7
     e54:	51 c1       	rjmp	.+674    	; 0x10f8 <__fp_inf>

00000e56 <__addsf3x>:
     e56:	e9 2f       	mov	r30, r25
     e58:	77 d1       	rcall	.+750    	; 0x1148 <__fp_split3>
     e5a:	80 f3       	brcs	.-32     	; 0xe3c <__addsf3+0x8>
     e5c:	ba 17       	cp	r27, r26
     e5e:	62 07       	cpc	r22, r18
     e60:	73 07       	cpc	r23, r19
     e62:	84 07       	cpc	r24, r20
     e64:	95 07       	cpc	r25, r21
     e66:	18 f0       	brcs	.+6      	; 0xe6e <__addsf3x+0x18>
     e68:	71 f4       	brne	.+28     	; 0xe86 <__addsf3x+0x30>
     e6a:	9e f5       	brtc	.+102    	; 0xed2 <__addsf3x+0x7c>
     e6c:	8f c1       	rjmp	.+798    	; 0x118c <__fp_zero>
     e6e:	0e f4       	brtc	.+2      	; 0xe72 <__addsf3x+0x1c>
     e70:	e0 95       	com	r30
     e72:	0b 2e       	mov	r0, r27
     e74:	ba 2f       	mov	r27, r26
     e76:	a0 2d       	mov	r26, r0
     e78:	0b 01       	movw	r0, r22
     e7a:	b9 01       	movw	r22, r18
     e7c:	90 01       	movw	r18, r0
     e7e:	0c 01       	movw	r0, r24
     e80:	ca 01       	movw	r24, r20
     e82:	a0 01       	movw	r20, r0
     e84:	11 24       	eor	r1, r1
     e86:	ff 27       	eor	r31, r31
     e88:	59 1b       	sub	r21, r25
     e8a:	99 f0       	breq	.+38     	; 0xeb2 <__addsf3x+0x5c>
     e8c:	59 3f       	cpi	r21, 0xF9	; 249
     e8e:	50 f4       	brcc	.+20     	; 0xea4 <__addsf3x+0x4e>
     e90:	50 3e       	cpi	r21, 0xE0	; 224
     e92:	68 f1       	brcs	.+90     	; 0xeee <__addsf3x+0x98>
     e94:	1a 16       	cp	r1, r26
     e96:	f0 40       	sbci	r31, 0x00	; 0
     e98:	a2 2f       	mov	r26, r18
     e9a:	23 2f       	mov	r18, r19
     e9c:	34 2f       	mov	r19, r20
     e9e:	44 27       	eor	r20, r20
     ea0:	58 5f       	subi	r21, 0xF8	; 248
     ea2:	f3 cf       	rjmp	.-26     	; 0xe8a <__addsf3x+0x34>
     ea4:	46 95       	lsr	r20
     ea6:	37 95       	ror	r19
     ea8:	27 95       	ror	r18
     eaa:	a7 95       	ror	r26
     eac:	f0 40       	sbci	r31, 0x00	; 0
     eae:	53 95       	inc	r21
     eb0:	c9 f7       	brne	.-14     	; 0xea4 <__addsf3x+0x4e>
     eb2:	7e f4       	brtc	.+30     	; 0xed2 <__addsf3x+0x7c>
     eb4:	1f 16       	cp	r1, r31
     eb6:	ba 0b       	sbc	r27, r26
     eb8:	62 0b       	sbc	r22, r18
     eba:	73 0b       	sbc	r23, r19
     ebc:	84 0b       	sbc	r24, r20
     ebe:	ba f0       	brmi	.+46     	; 0xeee <__addsf3x+0x98>
     ec0:	91 50       	subi	r25, 0x01	; 1
     ec2:	a1 f0       	breq	.+40     	; 0xeec <__addsf3x+0x96>
     ec4:	ff 0f       	add	r31, r31
     ec6:	bb 1f       	adc	r27, r27
     ec8:	66 1f       	adc	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	c2 f7       	brpl	.-16     	; 0xec0 <__addsf3x+0x6a>
     ed0:	0e c0       	rjmp	.+28     	; 0xeee <__addsf3x+0x98>
     ed2:	ba 0f       	add	r27, r26
     ed4:	62 1f       	adc	r22, r18
     ed6:	73 1f       	adc	r23, r19
     ed8:	84 1f       	adc	r24, r20
     eda:	48 f4       	brcc	.+18     	; 0xeee <__addsf3x+0x98>
     edc:	87 95       	ror	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b7 95       	ror	r27
     ee4:	f7 95       	ror	r31
     ee6:	9e 3f       	cpi	r25, 0xFE	; 254
     ee8:	08 f0       	brcs	.+2      	; 0xeec <__addsf3x+0x96>
     eea:	b3 cf       	rjmp	.-154    	; 0xe52 <__addsf3+0x1e>
     eec:	93 95       	inc	r25
     eee:	88 0f       	add	r24, r24
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <__addsf3x+0x9e>
     ef2:	99 27       	eor	r25, r25
     ef4:	ee 0f       	add	r30, r30
     ef6:	97 95       	ror	r25
     ef8:	87 95       	ror	r24
     efa:	08 95       	ret

00000efc <__cmpsf2>:
     efc:	d9 d0       	rcall	.+434    	; 0x10b0 <__fp_cmp>
     efe:	08 f4       	brcc	.+2      	; 0xf02 <__cmpsf2+0x6>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	08 95       	ret

00000f04 <__divsf3>:
     f04:	0c d0       	rcall	.+24     	; 0xf1e <__divsf3x>
     f06:	0f c1       	rjmp	.+542    	; 0x1126 <__fp_round>
     f08:	07 d1       	rcall	.+526    	; 0x1118 <__fp_pscB>
     f0a:	40 f0       	brcs	.+16     	; 0xf1c <__divsf3+0x18>
     f0c:	fe d0       	rcall	.+508    	; 0x110a <__fp_pscA>
     f0e:	30 f0       	brcs	.+12     	; 0xf1c <__divsf3+0x18>
     f10:	21 f4       	brne	.+8      	; 0xf1a <__divsf3+0x16>
     f12:	5f 3f       	cpi	r21, 0xFF	; 255
     f14:	19 f0       	breq	.+6      	; 0xf1c <__divsf3+0x18>
     f16:	f0 c0       	rjmp	.+480    	; 0x10f8 <__fp_inf>
     f18:	51 11       	cpse	r21, r1
     f1a:	39 c1       	rjmp	.+626    	; 0x118e <__fp_szero>
     f1c:	f3 c0       	rjmp	.+486    	; 0x1104 <__fp_nan>

00000f1e <__divsf3x>:
     f1e:	14 d1       	rcall	.+552    	; 0x1148 <__fp_split3>
     f20:	98 f3       	brcs	.-26     	; 0xf08 <__divsf3+0x4>

00000f22 <__divsf3_pse>:
     f22:	99 23       	and	r25, r25
     f24:	c9 f3       	breq	.-14     	; 0xf18 <__divsf3+0x14>
     f26:	55 23       	and	r21, r21
     f28:	b1 f3       	breq	.-20     	; 0xf16 <__divsf3+0x12>
     f2a:	95 1b       	sub	r25, r21
     f2c:	55 0b       	sbc	r21, r21
     f2e:	bb 27       	eor	r27, r27
     f30:	aa 27       	eor	r26, r26
     f32:	62 17       	cp	r22, r18
     f34:	73 07       	cpc	r23, r19
     f36:	84 07       	cpc	r24, r20
     f38:	38 f0       	brcs	.+14     	; 0xf48 <__divsf3_pse+0x26>
     f3a:	9f 5f       	subi	r25, 0xFF	; 255
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	44 1f       	adc	r20, r20
     f44:	aa 1f       	adc	r26, r26
     f46:	a9 f3       	breq	.-22     	; 0xf32 <__divsf3_pse+0x10>
     f48:	33 d0       	rcall	.+102    	; 0xfb0 <__divsf3_pse+0x8e>
     f4a:	0e 2e       	mov	r0, r30
     f4c:	3a f0       	brmi	.+14     	; 0xf5c <__divsf3_pse+0x3a>
     f4e:	e0 e8       	ldi	r30, 0x80	; 128
     f50:	30 d0       	rcall	.+96     	; 0xfb2 <__divsf3_pse+0x90>
     f52:	91 50       	subi	r25, 0x01	; 1
     f54:	50 40       	sbci	r21, 0x00	; 0
     f56:	e6 95       	lsr	r30
     f58:	00 1c       	adc	r0, r0
     f5a:	ca f7       	brpl	.-14     	; 0xf4e <__divsf3_pse+0x2c>
     f5c:	29 d0       	rcall	.+82     	; 0xfb0 <__divsf3_pse+0x8e>
     f5e:	fe 2f       	mov	r31, r30
     f60:	27 d0       	rcall	.+78     	; 0xfb0 <__divsf3_pse+0x8e>
     f62:	66 0f       	add	r22, r22
     f64:	77 1f       	adc	r23, r23
     f66:	88 1f       	adc	r24, r24
     f68:	bb 1f       	adc	r27, r27
     f6a:	26 17       	cp	r18, r22
     f6c:	37 07       	cpc	r19, r23
     f6e:	48 07       	cpc	r20, r24
     f70:	ab 07       	cpc	r26, r27
     f72:	b0 e8       	ldi	r27, 0x80	; 128
     f74:	09 f0       	breq	.+2      	; 0xf78 <__divsf3_pse+0x56>
     f76:	bb 0b       	sbc	r27, r27
     f78:	80 2d       	mov	r24, r0
     f7a:	bf 01       	movw	r22, r30
     f7c:	ff 27       	eor	r31, r31
     f7e:	93 58       	subi	r25, 0x83	; 131
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	2a f0       	brmi	.+10     	; 0xf8e <__divsf3_pse+0x6c>
     f84:	9e 3f       	cpi	r25, 0xFE	; 254
     f86:	51 05       	cpc	r21, r1
     f88:	68 f0       	brcs	.+26     	; 0xfa4 <__divsf3_pse+0x82>
     f8a:	b6 c0       	rjmp	.+364    	; 0x10f8 <__fp_inf>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__fp_szero>
     f8e:	5f 3f       	cpi	r21, 0xFF	; 255
     f90:	ec f3       	brlt	.-6      	; 0xf8c <__divsf3_pse+0x6a>
     f92:	98 3e       	cpi	r25, 0xE8	; 232
     f94:	dc f3       	brlt	.-10     	; 0xf8c <__divsf3_pse+0x6a>
     f96:	86 95       	lsr	r24
     f98:	77 95       	ror	r23
     f9a:	67 95       	ror	r22
     f9c:	b7 95       	ror	r27
     f9e:	f7 95       	ror	r31
     fa0:	9f 5f       	subi	r25, 0xFF	; 255
     fa2:	c9 f7       	brne	.-14     	; 0xf96 <__divsf3_pse+0x74>
     fa4:	88 0f       	add	r24, r24
     fa6:	91 1d       	adc	r25, r1
     fa8:	96 95       	lsr	r25
     faa:	87 95       	ror	r24
     fac:	97 f9       	bld	r25, 7
     fae:	08 95       	ret
     fb0:	e1 e0       	ldi	r30, 0x01	; 1
     fb2:	66 0f       	add	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	bb 1f       	adc	r27, r27
     fba:	62 17       	cp	r22, r18
     fbc:	73 07       	cpc	r23, r19
     fbe:	84 07       	cpc	r24, r20
     fc0:	ba 07       	cpc	r27, r26
     fc2:	20 f0       	brcs	.+8      	; 0xfcc <__divsf3_pse+0xaa>
     fc4:	62 1b       	sub	r22, r18
     fc6:	73 0b       	sbc	r23, r19
     fc8:	84 0b       	sbc	r24, r20
     fca:	ba 0b       	sbc	r27, r26
     fcc:	ee 1f       	adc	r30, r30
     fce:	88 f7       	brcc	.-30     	; 0xfb2 <__divsf3_pse+0x90>
     fd0:	e0 95       	com	r30
     fd2:	08 95       	ret

00000fd4 <__fixsfsi>:
     fd4:	04 d0       	rcall	.+8      	; 0xfde <__fixunssfsi>
     fd6:	68 94       	set
     fd8:	b1 11       	cpse	r27, r1
     fda:	d9 c0       	rjmp	.+434    	; 0x118e <__fp_szero>
     fdc:	08 95       	ret

00000fde <__fixunssfsi>:
     fde:	bc d0       	rcall	.+376    	; 0x1158 <__fp_splitA>
     fe0:	88 f0       	brcs	.+34     	; 0x1004 <__fixunssfsi+0x26>
     fe2:	9f 57       	subi	r25, 0x7F	; 127
     fe4:	90 f0       	brcs	.+36     	; 0x100a <__fixunssfsi+0x2c>
     fe6:	b9 2f       	mov	r27, r25
     fe8:	99 27       	eor	r25, r25
     fea:	b7 51       	subi	r27, 0x17	; 23
     fec:	a0 f0       	brcs	.+40     	; 0x1016 <__fixunssfsi+0x38>
     fee:	d1 f0       	breq	.+52     	; 0x1024 <__fixunssfsi+0x46>
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	1a f0       	brmi	.+6      	; 0x1000 <__fixunssfsi+0x22>
     ffa:	ba 95       	dec	r27
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__fixunssfsi+0x12>
     ffe:	12 c0       	rjmp	.+36     	; 0x1024 <__fixunssfsi+0x46>
    1000:	b1 30       	cpi	r27, 0x01	; 1
    1002:	81 f0       	breq	.+32     	; 0x1024 <__fixunssfsi+0x46>
    1004:	c3 d0       	rcall	.+390    	; 0x118c <__fp_zero>
    1006:	b1 e0       	ldi	r27, 0x01	; 1
    1008:	08 95       	ret
    100a:	c0 c0       	rjmp	.+384    	; 0x118c <__fp_zero>
    100c:	67 2f       	mov	r22, r23
    100e:	78 2f       	mov	r23, r24
    1010:	88 27       	eor	r24, r24
    1012:	b8 5f       	subi	r27, 0xF8	; 248
    1014:	39 f0       	breq	.+14     	; 0x1024 <__fixunssfsi+0x46>
    1016:	b9 3f       	cpi	r27, 0xF9	; 249
    1018:	cc f3       	brlt	.-14     	; 0x100c <__fixunssfsi+0x2e>
    101a:	86 95       	lsr	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	b3 95       	inc	r27
    1022:	d9 f7       	brne	.-10     	; 0x101a <__fixunssfsi+0x3c>
    1024:	3e f4       	brtc	.+14     	; 0x1034 <__fixunssfsi+0x56>
    1026:	90 95       	com	r25
    1028:	80 95       	com	r24
    102a:	70 95       	com	r23
    102c:	61 95       	neg	r22
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	08 95       	ret

00001036 <__floatunsisf>:
    1036:	e8 94       	clt
    1038:	09 c0       	rjmp	.+18     	; 0x104c <__floatsisf+0x12>

0000103a <__floatsisf>:
    103a:	97 fb       	bst	r25, 7
    103c:	3e f4       	brtc	.+14     	; 0x104c <__floatsisf+0x12>
    103e:	90 95       	com	r25
    1040:	80 95       	com	r24
    1042:	70 95       	com	r23
    1044:	61 95       	neg	r22
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	8f 4f       	sbci	r24, 0xFF	; 255
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	99 23       	and	r25, r25
    104e:	a9 f0       	breq	.+42     	; 0x107a <__floatsisf+0x40>
    1050:	f9 2f       	mov	r31, r25
    1052:	96 e9       	ldi	r25, 0x96	; 150
    1054:	bb 27       	eor	r27, r27
    1056:	93 95       	inc	r25
    1058:	f6 95       	lsr	r31
    105a:	87 95       	ror	r24
    105c:	77 95       	ror	r23
    105e:	67 95       	ror	r22
    1060:	b7 95       	ror	r27
    1062:	f1 11       	cpse	r31, r1
    1064:	f8 cf       	rjmp	.-16     	; 0x1056 <__floatsisf+0x1c>
    1066:	fa f4       	brpl	.+62     	; 0x10a6 <__floatsisf+0x6c>
    1068:	bb 0f       	add	r27, r27
    106a:	11 f4       	brne	.+4      	; 0x1070 <__floatsisf+0x36>
    106c:	60 ff       	sbrs	r22, 0
    106e:	1b c0       	rjmp	.+54     	; 0x10a6 <__floatsisf+0x6c>
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	8f 4f       	sbci	r24, 0xFF	; 255
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	16 c0       	rjmp	.+44     	; 0x10a6 <__floatsisf+0x6c>
    107a:	88 23       	and	r24, r24
    107c:	11 f0       	breq	.+4      	; 0x1082 <__floatsisf+0x48>
    107e:	96 e9       	ldi	r25, 0x96	; 150
    1080:	11 c0       	rjmp	.+34     	; 0x10a4 <__floatsisf+0x6a>
    1082:	77 23       	and	r23, r23
    1084:	21 f0       	breq	.+8      	; 0x108e <__floatsisf+0x54>
    1086:	9e e8       	ldi	r25, 0x8E	; 142
    1088:	87 2f       	mov	r24, r23
    108a:	76 2f       	mov	r23, r22
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <__floatsisf+0x5e>
    108e:	66 23       	and	r22, r22
    1090:	71 f0       	breq	.+28     	; 0x10ae <__floatsisf+0x74>
    1092:	96 e8       	ldi	r25, 0x86	; 134
    1094:	86 2f       	mov	r24, r22
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	2a f0       	brmi	.+10     	; 0x10a6 <__floatsisf+0x6c>
    109c:	9a 95       	dec	r25
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	da f7       	brpl	.-10     	; 0x109c <__floatsisf+0x62>
    10a6:	88 0f       	add	r24, r24
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <__fp_cmp>:
    10b0:	99 0f       	add	r25, r25
    10b2:	00 08       	sbc	r0, r0
    10b4:	55 0f       	add	r21, r21
    10b6:	aa 0b       	sbc	r26, r26
    10b8:	e0 e8       	ldi	r30, 0x80	; 128
    10ba:	fe ef       	ldi	r31, 0xFE	; 254
    10bc:	16 16       	cp	r1, r22
    10be:	17 06       	cpc	r1, r23
    10c0:	e8 07       	cpc	r30, r24
    10c2:	f9 07       	cpc	r31, r25
    10c4:	c0 f0       	brcs	.+48     	; 0x10f6 <__fp_cmp+0x46>
    10c6:	12 16       	cp	r1, r18
    10c8:	13 06       	cpc	r1, r19
    10ca:	e4 07       	cpc	r30, r20
    10cc:	f5 07       	cpc	r31, r21
    10ce:	98 f0       	brcs	.+38     	; 0x10f6 <__fp_cmp+0x46>
    10d0:	62 1b       	sub	r22, r18
    10d2:	73 0b       	sbc	r23, r19
    10d4:	84 0b       	sbc	r24, r20
    10d6:	95 0b       	sbc	r25, r21
    10d8:	39 f4       	brne	.+14     	; 0x10e8 <__fp_cmp+0x38>
    10da:	0a 26       	eor	r0, r26
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <__fp_cmp+0x46>
    10de:	23 2b       	or	r18, r19
    10e0:	24 2b       	or	r18, r20
    10e2:	25 2b       	or	r18, r21
    10e4:	21 f4       	brne	.+8      	; 0x10ee <__fp_cmp+0x3e>
    10e6:	08 95       	ret
    10e8:	0a 26       	eor	r0, r26
    10ea:	09 f4       	brne	.+2      	; 0x10ee <__fp_cmp+0x3e>
    10ec:	a1 40       	sbci	r26, 0x01	; 1
    10ee:	a6 95       	lsr	r26
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	81 1d       	adc	r24, r1
    10f4:	81 1d       	adc	r24, r1
    10f6:	08 95       	ret

000010f8 <__fp_inf>:
    10f8:	97 f9       	bld	r25, 7
    10fa:	9f 67       	ori	r25, 0x7F	; 127
    10fc:	80 e8       	ldi	r24, 0x80	; 128
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	08 95       	ret

00001104 <__fp_nan>:
    1104:	9f ef       	ldi	r25, 0xFF	; 255
    1106:	80 ec       	ldi	r24, 0xC0	; 192
    1108:	08 95       	ret

0000110a <__fp_pscA>:
    110a:	00 24       	eor	r0, r0
    110c:	0a 94       	dec	r0
    110e:	16 16       	cp	r1, r22
    1110:	17 06       	cpc	r1, r23
    1112:	18 06       	cpc	r1, r24
    1114:	09 06       	cpc	r0, r25
    1116:	08 95       	ret

00001118 <__fp_pscB>:
    1118:	00 24       	eor	r0, r0
    111a:	0a 94       	dec	r0
    111c:	12 16       	cp	r1, r18
    111e:	13 06       	cpc	r1, r19
    1120:	14 06       	cpc	r1, r20
    1122:	05 06       	cpc	r0, r21
    1124:	08 95       	ret

00001126 <__fp_round>:
    1126:	09 2e       	mov	r0, r25
    1128:	03 94       	inc	r0
    112a:	00 0c       	add	r0, r0
    112c:	11 f4       	brne	.+4      	; 0x1132 <__fp_round+0xc>
    112e:	88 23       	and	r24, r24
    1130:	52 f0       	brmi	.+20     	; 0x1146 <__fp_round+0x20>
    1132:	bb 0f       	add	r27, r27
    1134:	40 f4       	brcc	.+16     	; 0x1146 <__fp_round+0x20>
    1136:	bf 2b       	or	r27, r31
    1138:	11 f4       	brne	.+4      	; 0x113e <__fp_round+0x18>
    113a:	60 ff       	sbrs	r22, 0
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <__fp_round+0x20>
    113e:	6f 5f       	subi	r22, 0xFF	; 255
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	8f 4f       	sbci	r24, 0xFF	; 255
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	08 95       	ret

00001148 <__fp_split3>:
    1148:	57 fd       	sbrc	r21, 7
    114a:	90 58       	subi	r25, 0x80	; 128
    114c:	44 0f       	add	r20, r20
    114e:	55 1f       	adc	r21, r21
    1150:	59 f0       	breq	.+22     	; 0x1168 <__fp_splitA+0x10>
    1152:	5f 3f       	cpi	r21, 0xFF	; 255
    1154:	71 f0       	breq	.+28     	; 0x1172 <__fp_splitA+0x1a>
    1156:	47 95       	ror	r20

00001158 <__fp_splitA>:
    1158:	88 0f       	add	r24, r24
    115a:	97 fb       	bst	r25, 7
    115c:	99 1f       	adc	r25, r25
    115e:	61 f0       	breq	.+24     	; 0x1178 <__fp_splitA+0x20>
    1160:	9f 3f       	cpi	r25, 0xFF	; 255
    1162:	79 f0       	breq	.+30     	; 0x1182 <__fp_splitA+0x2a>
    1164:	87 95       	ror	r24
    1166:	08 95       	ret
    1168:	12 16       	cp	r1, r18
    116a:	13 06       	cpc	r1, r19
    116c:	14 06       	cpc	r1, r20
    116e:	55 1f       	adc	r21, r21
    1170:	f2 cf       	rjmp	.-28     	; 0x1156 <__fp_split3+0xe>
    1172:	46 95       	lsr	r20
    1174:	f1 df       	rcall	.-30     	; 0x1158 <__fp_splitA>
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <__fp_splitA+0x30>
    1178:	16 16       	cp	r1, r22
    117a:	17 06       	cpc	r1, r23
    117c:	18 06       	cpc	r1, r24
    117e:	99 1f       	adc	r25, r25
    1180:	f1 cf       	rjmp	.-30     	; 0x1164 <__fp_splitA+0xc>
    1182:	86 95       	lsr	r24
    1184:	71 05       	cpc	r23, r1
    1186:	61 05       	cpc	r22, r1
    1188:	08 94       	sec
    118a:	08 95       	ret

0000118c <__fp_zero>:
    118c:	e8 94       	clt

0000118e <__fp_szero>:
    118e:	bb 27       	eor	r27, r27
    1190:	66 27       	eor	r22, r22
    1192:	77 27       	eor	r23, r23
    1194:	cb 01       	movw	r24, r22
    1196:	97 f9       	bld	r25, 7
    1198:	08 95       	ret

0000119a <__mulsf3>:
    119a:	0b d0       	rcall	.+22     	; 0x11b2 <__mulsf3x>
    119c:	c4 cf       	rjmp	.-120    	; 0x1126 <__fp_round>
    119e:	b5 df       	rcall	.-150    	; 0x110a <__fp_pscA>
    11a0:	28 f0       	brcs	.+10     	; 0x11ac <__mulsf3+0x12>
    11a2:	ba df       	rcall	.-140    	; 0x1118 <__fp_pscB>
    11a4:	18 f0       	brcs	.+6      	; 0x11ac <__mulsf3+0x12>
    11a6:	95 23       	and	r25, r21
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__mulsf3+0x12>
    11aa:	a6 cf       	rjmp	.-180    	; 0x10f8 <__fp_inf>
    11ac:	ab cf       	rjmp	.-170    	; 0x1104 <__fp_nan>
    11ae:	11 24       	eor	r1, r1
    11b0:	ee cf       	rjmp	.-36     	; 0x118e <__fp_szero>

000011b2 <__mulsf3x>:
    11b2:	ca df       	rcall	.-108    	; 0x1148 <__fp_split3>
    11b4:	a0 f3       	brcs	.-24     	; 0x119e <__mulsf3+0x4>

000011b6 <__mulsf3_pse>:
    11b6:	95 9f       	mul	r25, r21
    11b8:	d1 f3       	breq	.-12     	; 0x11ae <__mulsf3+0x14>
    11ba:	95 0f       	add	r25, r21
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	55 1f       	adc	r21, r21
    11c0:	62 9f       	mul	r22, r18
    11c2:	f0 01       	movw	r30, r0
    11c4:	72 9f       	mul	r23, r18
    11c6:	bb 27       	eor	r27, r27
    11c8:	f0 0d       	add	r31, r0
    11ca:	b1 1d       	adc	r27, r1
    11cc:	63 9f       	mul	r22, r19
    11ce:	aa 27       	eor	r26, r26
    11d0:	f0 0d       	add	r31, r0
    11d2:	b1 1d       	adc	r27, r1
    11d4:	aa 1f       	adc	r26, r26
    11d6:	64 9f       	mul	r22, r20
    11d8:	66 27       	eor	r22, r22
    11da:	b0 0d       	add	r27, r0
    11dc:	a1 1d       	adc	r26, r1
    11de:	66 1f       	adc	r22, r22
    11e0:	82 9f       	mul	r24, r18
    11e2:	22 27       	eor	r18, r18
    11e4:	b0 0d       	add	r27, r0
    11e6:	a1 1d       	adc	r26, r1
    11e8:	62 1f       	adc	r22, r18
    11ea:	73 9f       	mul	r23, r19
    11ec:	b0 0d       	add	r27, r0
    11ee:	a1 1d       	adc	r26, r1
    11f0:	62 1f       	adc	r22, r18
    11f2:	83 9f       	mul	r24, r19
    11f4:	a0 0d       	add	r26, r0
    11f6:	61 1d       	adc	r22, r1
    11f8:	22 1f       	adc	r18, r18
    11fa:	74 9f       	mul	r23, r20
    11fc:	33 27       	eor	r19, r19
    11fe:	a0 0d       	add	r26, r0
    1200:	61 1d       	adc	r22, r1
    1202:	23 1f       	adc	r18, r19
    1204:	84 9f       	mul	r24, r20
    1206:	60 0d       	add	r22, r0
    1208:	21 1d       	adc	r18, r1
    120a:	82 2f       	mov	r24, r18
    120c:	76 2f       	mov	r23, r22
    120e:	6a 2f       	mov	r22, r26
    1210:	11 24       	eor	r1, r1
    1212:	9f 57       	subi	r25, 0x7F	; 127
    1214:	50 40       	sbci	r21, 0x00	; 0
    1216:	8a f0       	brmi	.+34     	; 0x123a <__mulsf3_pse+0x84>
    1218:	e1 f0       	breq	.+56     	; 0x1252 <__mulsf3_pse+0x9c>
    121a:	88 23       	and	r24, r24
    121c:	4a f0       	brmi	.+18     	; 0x1230 <__mulsf3_pse+0x7a>
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	bb 1f       	adc	r27, r27
    1224:	66 1f       	adc	r22, r22
    1226:	77 1f       	adc	r23, r23
    1228:	88 1f       	adc	r24, r24
    122a:	91 50       	subi	r25, 0x01	; 1
    122c:	50 40       	sbci	r21, 0x00	; 0
    122e:	a9 f7       	brne	.-22     	; 0x121a <__mulsf3_pse+0x64>
    1230:	9e 3f       	cpi	r25, 0xFE	; 254
    1232:	51 05       	cpc	r21, r1
    1234:	70 f0       	brcs	.+28     	; 0x1252 <__mulsf3_pse+0x9c>
    1236:	60 cf       	rjmp	.-320    	; 0x10f8 <__fp_inf>
    1238:	aa cf       	rjmp	.-172    	; 0x118e <__fp_szero>
    123a:	5f 3f       	cpi	r21, 0xFF	; 255
    123c:	ec f3       	brlt	.-6      	; 0x1238 <__mulsf3_pse+0x82>
    123e:	98 3e       	cpi	r25, 0xE8	; 232
    1240:	dc f3       	brlt	.-10     	; 0x1238 <__mulsf3_pse+0x82>
    1242:	86 95       	lsr	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	b7 95       	ror	r27
    124a:	f7 95       	ror	r31
    124c:	e7 95       	ror	r30
    124e:	9f 5f       	subi	r25, 0xFF	; 255
    1250:	c1 f7       	brne	.-16     	; 0x1242 <__mulsf3_pse+0x8c>
    1252:	fe 2b       	or	r31, r30
    1254:	88 0f       	add	r24, r24
    1256:	91 1d       	adc	r25, r1
    1258:	96 95       	lsr	r25
    125a:	87 95       	ror	r24
    125c:	97 f9       	bld	r25, 7
    125e:	08 95       	ret

00001260 <__mulsi3>:
    1260:	62 9f       	mul	r22, r18
    1262:	d0 01       	movw	r26, r0
    1264:	73 9f       	mul	r23, r19
    1266:	f0 01       	movw	r30, r0
    1268:	82 9f       	mul	r24, r18
    126a:	e0 0d       	add	r30, r0
    126c:	f1 1d       	adc	r31, r1
    126e:	64 9f       	mul	r22, r20
    1270:	e0 0d       	add	r30, r0
    1272:	f1 1d       	adc	r31, r1
    1274:	92 9f       	mul	r25, r18
    1276:	f0 0d       	add	r31, r0
    1278:	83 9f       	mul	r24, r19
    127a:	f0 0d       	add	r31, r0
    127c:	74 9f       	mul	r23, r20
    127e:	f0 0d       	add	r31, r0
    1280:	65 9f       	mul	r22, r21
    1282:	f0 0d       	add	r31, r0
    1284:	99 27       	eor	r25, r25
    1286:	72 9f       	mul	r23, r18
    1288:	b0 0d       	add	r27, r0
    128a:	e1 1d       	adc	r30, r1
    128c:	f9 1f       	adc	r31, r25
    128e:	63 9f       	mul	r22, r19
    1290:	b0 0d       	add	r27, r0
    1292:	e1 1d       	adc	r30, r1
    1294:	f9 1f       	adc	r31, r25
    1296:	bd 01       	movw	r22, r26
    1298:	cf 01       	movw	r24, r30
    129a:	11 24       	eor	r1, r1
    129c:	08 95       	ret

0000129e <__divmodhi4>:
    129e:	97 fb       	bst	r25, 7
    12a0:	09 2e       	mov	r0, r25
    12a2:	07 26       	eor	r0, r23
    12a4:	0a d0       	rcall	.+20     	; 0x12ba <__divmodhi4_neg1>
    12a6:	77 fd       	sbrc	r23, 7
    12a8:	04 d0       	rcall	.+8      	; 0x12b2 <__divmodhi4_neg2>
    12aa:	49 d0       	rcall	.+146    	; 0x133e <__udivmodhi4>
    12ac:	06 d0       	rcall	.+12     	; 0x12ba <__divmodhi4_neg1>
    12ae:	00 20       	and	r0, r0
    12b0:	1a f4       	brpl	.+6      	; 0x12b8 <__divmodhi4_exit>

000012b2 <__divmodhi4_neg2>:
    12b2:	70 95       	com	r23
    12b4:	61 95       	neg	r22
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255

000012b8 <__divmodhi4_exit>:
    12b8:	08 95       	ret

000012ba <__divmodhi4_neg1>:
    12ba:	f6 f7       	brtc	.-4      	; 0x12b8 <__divmodhi4_exit>
    12bc:	90 95       	com	r25
    12be:	81 95       	neg	r24
    12c0:	9f 4f       	sbci	r25, 0xFF	; 255
    12c2:	08 95       	ret

000012c4 <__udivmodsi4>:
    12c4:	a1 e2       	ldi	r26, 0x21	; 33
    12c6:	1a 2e       	mov	r1, r26
    12c8:	aa 1b       	sub	r26, r26
    12ca:	bb 1b       	sub	r27, r27
    12cc:	fd 01       	movw	r30, r26
    12ce:	0d c0       	rjmp	.+26     	; 0x12ea <__udivmodsi4_ep>

000012d0 <__udivmodsi4_loop>:
    12d0:	aa 1f       	adc	r26, r26
    12d2:	bb 1f       	adc	r27, r27
    12d4:	ee 1f       	adc	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	a2 17       	cp	r26, r18
    12da:	b3 07       	cpc	r27, r19
    12dc:	e4 07       	cpc	r30, r20
    12de:	f5 07       	cpc	r31, r21
    12e0:	20 f0       	brcs	.+8      	; 0x12ea <__udivmodsi4_ep>
    12e2:	a2 1b       	sub	r26, r18
    12e4:	b3 0b       	sbc	r27, r19
    12e6:	e4 0b       	sbc	r30, r20
    12e8:	f5 0b       	sbc	r31, r21

000012ea <__udivmodsi4_ep>:
    12ea:	66 1f       	adc	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	88 1f       	adc	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	1a 94       	dec	r1
    12f4:	69 f7       	brne	.-38     	; 0x12d0 <__udivmodsi4_loop>
    12f6:	60 95       	com	r22
    12f8:	70 95       	com	r23
    12fa:	80 95       	com	r24
    12fc:	90 95       	com	r25
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
    1302:	bd 01       	movw	r22, r26
    1304:	cf 01       	movw	r24, r30
    1306:	08 95       	ret

00001308 <__divmodsi4>:
    1308:	97 fb       	bst	r25, 7
    130a:	09 2e       	mov	r0, r25
    130c:	05 26       	eor	r0, r21
    130e:	0e d0       	rcall	.+28     	; 0x132c <__divmodsi4_neg1>
    1310:	57 fd       	sbrc	r21, 7
    1312:	04 d0       	rcall	.+8      	; 0x131c <__divmodsi4_neg2>
    1314:	d7 df       	rcall	.-82     	; 0x12c4 <__udivmodsi4>
    1316:	0a d0       	rcall	.+20     	; 0x132c <__divmodsi4_neg1>
    1318:	00 1c       	adc	r0, r0
    131a:	38 f4       	brcc	.+14     	; 0x132a <__divmodsi4_exit>

0000131c <__divmodsi4_neg2>:
    131c:	50 95       	com	r21
    131e:	40 95       	com	r20
    1320:	30 95       	com	r19
    1322:	21 95       	neg	r18
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	4f 4f       	sbci	r20, 0xFF	; 255
    1328:	5f 4f       	sbci	r21, 0xFF	; 255

0000132a <__divmodsi4_exit>:
    132a:	08 95       	ret

0000132c <__divmodsi4_neg1>:
    132c:	f6 f7       	brtc	.-4      	; 0x132a <__divmodsi4_exit>
    132e:	90 95       	com	r25
    1330:	80 95       	com	r24
    1332:	70 95       	com	r23
    1334:	61 95       	neg	r22
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	8f 4f       	sbci	r24, 0xFF	; 255
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	08 95       	ret

0000133e <__udivmodhi4>:
    133e:	aa 1b       	sub	r26, r26
    1340:	bb 1b       	sub	r27, r27
    1342:	51 e1       	ldi	r21, 0x11	; 17
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <__udivmodhi4_ep>

00001346 <__udivmodhi4_loop>:
    1346:	aa 1f       	adc	r26, r26
    1348:	bb 1f       	adc	r27, r27
    134a:	a6 17       	cp	r26, r22
    134c:	b7 07       	cpc	r27, r23
    134e:	10 f0       	brcs	.+4      	; 0x1354 <__udivmodhi4_ep>
    1350:	a6 1b       	sub	r26, r22
    1352:	b7 0b       	sbc	r27, r23

00001354 <__udivmodhi4_ep>:
    1354:	88 1f       	adc	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	5a 95       	dec	r21
    135a:	a9 f7       	brne	.-22     	; 0x1346 <__udivmodhi4_loop>
    135c:	80 95       	com	r24
    135e:	90 95       	com	r25
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	08 95       	ret

00001366 <__tablejump2__>:
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31

0000136a <__tablejump__>:
    136a:	05 90       	lpm	r0, Z+
    136c:	f4 91       	lpm	r31, Z+
    136e:	e0 2d       	mov	r30, r0
    1370:	09 94       	ijmp

00001372 <malloc>:
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	91 05       	cpc	r25, r1
    137a:	10 f4       	brcc	.+4      	; 0x1380 <malloc+0xe>
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	e0 91 68 02 	lds	r30, 0x0268
    1384:	f0 91 69 02 	lds	r31, 0x0269
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	26 c0       	rjmp	.+76     	; 0x13de <malloc+0x6c>
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	68 17       	cp	r22, r24
    1398:	79 07       	cpc	r23, r25
    139a:	e0 f0       	brcs	.+56     	; 0x13d4 <malloc+0x62>
    139c:	68 17       	cp	r22, r24
    139e:	79 07       	cpc	r23, r25
    13a0:	81 f4       	brne	.+32     	; 0x13c2 <malloc+0x50>
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	21 15       	cp	r18, r1
    13a8:	31 05       	cpc	r19, r1
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <malloc+0x46>
    13ac:	d9 01       	movw	r26, r18
    13ae:	13 96       	adiw	r26, 0x03	; 3
    13b0:	9c 93       	st	X, r25
    13b2:	8e 93       	st	-X, r24
    13b4:	12 97       	sbiw	r26, 0x02	; 2
    13b6:	2b c0       	rjmp	.+86     	; 0x140e <malloc+0x9c>
    13b8:	90 93 69 02 	sts	0x0269, r25
    13bc:	80 93 68 02 	sts	0x0268, r24
    13c0:	26 c0       	rjmp	.+76     	; 0x140e <malloc+0x9c>
    13c2:	41 15       	cp	r20, r1
    13c4:	51 05       	cpc	r21, r1
    13c6:	19 f0       	breq	.+6      	; 0x13ce <malloc+0x5c>
    13c8:	64 17       	cp	r22, r20
    13ca:	75 07       	cpc	r23, r21
    13cc:	18 f4       	brcc	.+6      	; 0x13d4 <malloc+0x62>
    13ce:	ab 01       	movw	r20, r22
    13d0:	e9 01       	movw	r28, r18
    13d2:	df 01       	movw	r26, r30
    13d4:	9f 01       	movw	r18, r30
    13d6:	72 81       	ldd	r23, Z+2	; 0x02
    13d8:	63 81       	ldd	r22, Z+3	; 0x03
    13da:	e7 2f       	mov	r30, r23
    13dc:	f6 2f       	mov	r31, r22
    13de:	30 97       	sbiw	r30, 0x00	; 0
    13e0:	c1 f6       	brne	.-80     	; 0x1392 <malloc+0x20>
    13e2:	41 15       	cp	r20, r1
    13e4:	51 05       	cpc	r21, r1
    13e6:	01 f1       	breq	.+64     	; 0x1428 <malloc+0xb6>
    13e8:	48 1b       	sub	r20, r24
    13ea:	59 0b       	sbc	r21, r25
    13ec:	44 30       	cpi	r20, 0x04	; 4
    13ee:	51 05       	cpc	r21, r1
    13f0:	80 f4       	brcc	.+32     	; 0x1412 <malloc+0xa0>
    13f2:	12 96       	adiw	r26, 0x02	; 2
    13f4:	8d 91       	ld	r24, X+
    13f6:	9c 91       	ld	r25, X
    13f8:	13 97       	sbiw	r26, 0x03	; 3
    13fa:	20 97       	sbiw	r28, 0x00	; 0
    13fc:	19 f0       	breq	.+6      	; 0x1404 <malloc+0x92>
    13fe:	9b 83       	std	Y+3, r25	; 0x03
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	04 c0       	rjmp	.+8      	; 0x140c <malloc+0x9a>
    1404:	90 93 69 02 	sts	0x0269, r25
    1408:	80 93 68 02 	sts	0x0268, r24
    140c:	fd 01       	movw	r30, r26
    140e:	32 96       	adiw	r30, 0x02	; 2
    1410:	46 c0       	rjmp	.+140    	; 0x149e <malloc+0x12c>
    1412:	fd 01       	movw	r30, r26
    1414:	e4 0f       	add	r30, r20
    1416:	f5 1f       	adc	r31, r21
    1418:	81 93       	st	Z+, r24
    141a:	91 93       	st	Z+, r25
    141c:	42 50       	subi	r20, 0x02	; 2
    141e:	50 40       	sbci	r21, 0x00	; 0
    1420:	11 96       	adiw	r26, 0x01	; 1
    1422:	5c 93       	st	X, r21
    1424:	4e 93       	st	-X, r20
    1426:	3b c0       	rjmp	.+118    	; 0x149e <malloc+0x12c>
    1428:	20 91 66 02 	lds	r18, 0x0266
    142c:	30 91 67 02 	lds	r19, 0x0267
    1430:	21 15       	cp	r18, r1
    1432:	31 05       	cpc	r19, r1
    1434:	41 f4       	brne	.+16     	; 0x1446 <malloc+0xd4>
    1436:	20 91 2a 01 	lds	r18, 0x012A
    143a:	30 91 2b 01 	lds	r19, 0x012B
    143e:	30 93 67 02 	sts	0x0267, r19
    1442:	20 93 66 02 	sts	0x0266, r18
    1446:	20 91 2c 01 	lds	r18, 0x012C
    144a:	30 91 2d 01 	lds	r19, 0x012D
    144e:	21 15       	cp	r18, r1
    1450:	31 05       	cpc	r19, r1
    1452:	41 f4       	brne	.+16     	; 0x1464 <malloc+0xf2>
    1454:	2d b7       	in	r18, 0x3d	; 61
    1456:	3e b7       	in	r19, 0x3e	; 62
    1458:	40 91 28 01 	lds	r20, 0x0128
    145c:	50 91 29 01 	lds	r21, 0x0129
    1460:	24 1b       	sub	r18, r20
    1462:	35 0b       	sbc	r19, r21
    1464:	e0 91 66 02 	lds	r30, 0x0266
    1468:	f0 91 67 02 	lds	r31, 0x0267
    146c:	e2 17       	cp	r30, r18
    146e:	f3 07       	cpc	r31, r19
    1470:	a0 f4       	brcc	.+40     	; 0x149a <malloc+0x128>
    1472:	2e 1b       	sub	r18, r30
    1474:	3f 0b       	sbc	r19, r31
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	78 f0       	brcs	.+30     	; 0x149a <malloc+0x128>
    147c:	ac 01       	movw	r20, r24
    147e:	4e 5f       	subi	r20, 0xFE	; 254
    1480:	5f 4f       	sbci	r21, 0xFF	; 255
    1482:	24 17       	cp	r18, r20
    1484:	35 07       	cpc	r19, r21
    1486:	48 f0       	brcs	.+18     	; 0x149a <malloc+0x128>
    1488:	4e 0f       	add	r20, r30
    148a:	5f 1f       	adc	r21, r31
    148c:	50 93 67 02 	sts	0x0267, r21
    1490:	40 93 66 02 	sts	0x0266, r20
    1494:	81 93       	st	Z+, r24
    1496:	91 93       	st	Z+, r25
    1498:	02 c0       	rjmp	.+4      	; 0x149e <malloc+0x12c>
    149a:	e0 e0       	ldi	r30, 0x00	; 0
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	cf 01       	movw	r24, r30
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <free>:
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <free+0xa>
    14ae:	91 c0       	rjmp	.+290    	; 0x15d2 <free+0x12c>
    14b0:	fc 01       	movw	r30, r24
    14b2:	32 97       	sbiw	r30, 0x02	; 2
    14b4:	13 82       	std	Z+3, r1	; 0x03
    14b6:	12 82       	std	Z+2, r1	; 0x02
    14b8:	60 91 68 02 	lds	r22, 0x0268
    14bc:	70 91 69 02 	lds	r23, 0x0269
    14c0:	61 15       	cp	r22, r1
    14c2:	71 05       	cpc	r23, r1
    14c4:	81 f4       	brne	.+32     	; 0x14e6 <free+0x40>
    14c6:	20 81       	ld	r18, Z
    14c8:	31 81       	ldd	r19, Z+1	; 0x01
    14ca:	28 0f       	add	r18, r24
    14cc:	39 1f       	adc	r19, r25
    14ce:	80 91 66 02 	lds	r24, 0x0266
    14d2:	90 91 67 02 	lds	r25, 0x0267
    14d6:	82 17       	cp	r24, r18
    14d8:	93 07       	cpc	r25, r19
    14da:	99 f5       	brne	.+102    	; 0x1542 <free+0x9c>
    14dc:	f0 93 67 02 	sts	0x0267, r31
    14e0:	e0 93 66 02 	sts	0x0266, r30
    14e4:	76 c0       	rjmp	.+236    	; 0x15d2 <free+0x12c>
    14e6:	db 01       	movw	r26, r22
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <free+0x4c>
    14ee:	cd 01       	movw	r24, r26
    14f0:	d9 01       	movw	r26, r18
    14f2:	ae 17       	cp	r26, r30
    14f4:	bf 07       	cpc	r27, r31
    14f6:	48 f4       	brcc	.+18     	; 0x150a <free+0x64>
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	2d 91       	ld	r18, X+
    14fc:	3c 91       	ld	r19, X
    14fe:	13 97       	sbiw	r26, 0x03	; 3
    1500:	21 15       	cp	r18, r1
    1502:	31 05       	cpc	r19, r1
    1504:	a1 f7       	brne	.-24     	; 0x14ee <free+0x48>
    1506:	cd 01       	movw	r24, r26
    1508:	21 c0       	rjmp	.+66     	; 0x154c <free+0xa6>
    150a:	b3 83       	std	Z+3, r27	; 0x03
    150c:	a2 83       	std	Z+2, r26	; 0x02
    150e:	ef 01       	movw	r28, r30
    1510:	49 91       	ld	r20, Y+
    1512:	59 91       	ld	r21, Y+
    1514:	9e 01       	movw	r18, r28
    1516:	24 0f       	add	r18, r20
    1518:	35 1f       	adc	r19, r21
    151a:	a2 17       	cp	r26, r18
    151c:	b3 07       	cpc	r27, r19
    151e:	79 f4       	brne	.+30     	; 0x153e <free+0x98>
    1520:	2d 91       	ld	r18, X+
    1522:	3c 91       	ld	r19, X
    1524:	11 97       	sbiw	r26, 0x01	; 1
    1526:	24 0f       	add	r18, r20
    1528:	35 1f       	adc	r19, r21
    152a:	2e 5f       	subi	r18, 0xFE	; 254
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	31 83       	std	Z+1, r19	; 0x01
    1530:	20 83       	st	Z, r18
    1532:	12 96       	adiw	r26, 0x02	; 2
    1534:	2d 91       	ld	r18, X+
    1536:	3c 91       	ld	r19, X
    1538:	13 97       	sbiw	r26, 0x03	; 3
    153a:	33 83       	std	Z+3, r19	; 0x03
    153c:	22 83       	std	Z+2, r18	; 0x02
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	29 f4       	brne	.+10     	; 0x154c <free+0xa6>
    1542:	f0 93 69 02 	sts	0x0269, r31
    1546:	e0 93 68 02 	sts	0x0268, r30
    154a:	43 c0       	rjmp	.+134    	; 0x15d2 <free+0x12c>
    154c:	dc 01       	movw	r26, r24
    154e:	13 96       	adiw	r26, 0x03	; 3
    1550:	fc 93       	st	X, r31
    1552:	ee 93       	st	-X, r30
    1554:	12 97       	sbiw	r26, 0x02	; 2
    1556:	4d 91       	ld	r20, X+
    1558:	5d 91       	ld	r21, X+
    155a:	a4 0f       	add	r26, r20
    155c:	b5 1f       	adc	r27, r21
    155e:	ea 17       	cp	r30, r26
    1560:	fb 07       	cpc	r31, r27
    1562:	69 f4       	brne	.+26     	; 0x157e <free+0xd8>
    1564:	20 81       	ld	r18, Z
    1566:	31 81       	ldd	r19, Z+1	; 0x01
    1568:	24 0f       	add	r18, r20
    156a:	35 1f       	adc	r19, r21
    156c:	2e 5f       	subi	r18, 0xFE	; 254
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	ec 01       	movw	r28, r24
    1572:	39 83       	std	Y+1, r19	; 0x01
    1574:	28 83       	st	Y, r18
    1576:	22 81       	ldd	r18, Z+2	; 0x02
    1578:	33 81       	ldd	r19, Z+3	; 0x03
    157a:	3b 83       	std	Y+3, r19	; 0x03
    157c:	2a 83       	std	Y+2, r18	; 0x02
    157e:	e0 e0       	ldi	r30, 0x00	; 0
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <free+0xe2>
    1584:	fb 01       	movw	r30, r22
    1586:	bc 01       	movw	r22, r24
    1588:	db 01       	movw	r26, r22
    158a:	12 96       	adiw	r26, 0x02	; 2
    158c:	8d 91       	ld	r24, X+
    158e:	9c 91       	ld	r25, X
    1590:	13 97       	sbiw	r26, 0x03	; 3
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	b9 f7       	brne	.-18     	; 0x1584 <free+0xde>
    1596:	9b 01       	movw	r18, r22
    1598:	2e 5f       	subi	r18, 0xFE	; 254
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	8d 91       	ld	r24, X+
    159e:	9c 91       	ld	r25, X
    15a0:	11 97       	sbiw	r26, 0x01	; 1
    15a2:	82 0f       	add	r24, r18
    15a4:	93 1f       	adc	r25, r19
    15a6:	40 91 66 02 	lds	r20, 0x0266
    15aa:	50 91 67 02 	lds	r21, 0x0267
    15ae:	48 17       	cp	r20, r24
    15b0:	59 07       	cpc	r21, r25
    15b2:	79 f4       	brne	.+30     	; 0x15d2 <free+0x12c>
    15b4:	30 97       	sbiw	r30, 0x00	; 0
    15b6:	29 f4       	brne	.+10     	; 0x15c2 <free+0x11c>
    15b8:	10 92 69 02 	sts	0x0269, r1
    15bc:	10 92 68 02 	sts	0x0268, r1
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <free+0x120>
    15c2:	13 82       	std	Z+3, r1	; 0x03
    15c4:	12 82       	std	Z+2, r1	; 0x02
    15c6:	22 50       	subi	r18, 0x02	; 2
    15c8:	30 40       	sbci	r19, 0x00	; 0
    15ca:	30 93 67 02 	sts	0x0267, r19
    15ce:	20 93 66 02 	sts	0x0266, r18
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <do_random>:
    15d8:	a0 e0       	ldi	r26, 0x00	; 0
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e2 ef       	ldi	r30, 0xF2	; 242
    15de:	fa e0       	ldi	r31, 0x0A	; 10
    15e0:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__prologue_saves__+0x10>
    15e4:	ec 01       	movw	r28, r24
    15e6:	68 81       	ld	r22, Y
    15e8:	79 81       	ldd	r23, Y+1	; 0x01
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	9b 81       	ldd	r25, Y+3	; 0x03
    15ee:	61 15       	cp	r22, r1
    15f0:	71 05       	cpc	r23, r1
    15f2:	81 05       	cpc	r24, r1
    15f4:	91 05       	cpc	r25, r1
    15f6:	21 f4       	brne	.+8      	; 0x1600 <do_random+0x28>
    15f8:	64 e2       	ldi	r22, 0x24	; 36
    15fa:	79 ed       	ldi	r23, 0xD9	; 217
    15fc:	8b e5       	ldi	r24, 0x5B	; 91
    15fe:	97 e0       	ldi	r25, 0x07	; 7
    1600:	2d e1       	ldi	r18, 0x1D	; 29
    1602:	33 ef       	ldi	r19, 0xF3	; 243
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	0e 94 84 09 	call	0x1308	; 0x1308 <__divmodsi4>
    160c:	79 01       	movw	r14, r18
    160e:	8a 01       	movw	r16, r20
    1610:	27 ea       	ldi	r18, 0xA7	; 167
    1612:	31 e4       	ldi	r19, 0x41	; 65
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	0e 94 30 09 	call	0x1260	; 0x1260 <__mulsi3>
    161c:	5b 01       	movw	r10, r22
    161e:	6c 01       	movw	r12, r24
    1620:	c8 01       	movw	r24, r16
    1622:	b7 01       	movw	r22, r14
    1624:	2c ee       	ldi	r18, 0xEC	; 236
    1626:	34 ef       	ldi	r19, 0xF4	; 244
    1628:	4f ef       	ldi	r20, 0xFF	; 255
    162a:	5f ef       	ldi	r21, 0xFF	; 255
    162c:	0e 94 30 09 	call	0x1260	; 0x1260 <__mulsi3>
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	2a 0d       	add	r18, r10
    1636:	3b 1d       	adc	r19, r11
    1638:	4c 1d       	adc	r20, r12
    163a:	5d 1d       	adc	r21, r13
    163c:	57 ff       	sbrs	r21, 7
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <do_random+0x70>
    1640:	21 50       	subi	r18, 0x01	; 1
    1642:	30 40       	sbci	r19, 0x00	; 0
    1644:	40 40       	sbci	r20, 0x00	; 0
    1646:	50 48       	sbci	r21, 0x80	; 128
    1648:	28 83       	st	Y, r18
    164a:	39 83       	std	Y+1, r19	; 0x01
    164c:	4a 83       	std	Y+2, r20	; 0x02
    164e:	5b 83       	std	Y+3, r21	; 0x03
    1650:	5f 77       	andi	r21, 0x7F	; 127
    1652:	b9 01       	movw	r22, r18
    1654:	ca 01       	movw	r24, r20
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	ea e0       	ldi	r30, 0x0A	; 10
    165c:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__epilogue_restores__+0x10>

00001660 <random_r>:
    1660:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <do_random>
    1664:	08 95       	ret

00001666 <random>:
    1666:	8e e2       	ldi	r24, 0x2E	; 46
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <do_random>
    166e:	08 95       	ret

00001670 <srandom>:
    1670:	60 93 2e 01 	sts	0x012E, r22
    1674:	70 93 2f 01 	sts	0x012F, r23
    1678:	80 93 30 01 	sts	0x0130, r24
    167c:	90 93 31 01 	sts	0x0131, r25
    1680:	08 95       	ret

00001682 <__prologue_saves__>:
    1682:	2f 92       	push	r2
    1684:	3f 92       	push	r3
    1686:	4f 92       	push	r4
    1688:	5f 92       	push	r5
    168a:	6f 92       	push	r6
    168c:	7f 92       	push	r7
    168e:	8f 92       	push	r8
    1690:	9f 92       	push	r9
    1692:	af 92       	push	r10
    1694:	bf 92       	push	r11
    1696:	cf 92       	push	r12
    1698:	df 92       	push	r13
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	ca 1b       	sub	r28, r26
    16ac:	db 0b       	sbc	r29, r27
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	09 94       	ijmp

000016ba <__epilogue_restores__>:
    16ba:	2a 88       	ldd	r2, Y+18	; 0x12
    16bc:	39 88       	ldd	r3, Y+17	; 0x11
    16be:	48 88       	ldd	r4, Y+16	; 0x10
    16c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    16c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    16c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    16c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    16cc:	b9 84       	ldd	r11, Y+9	; 0x09
    16ce:	c8 84       	ldd	r12, Y+8	; 0x08
    16d0:	df 80       	ldd	r13, Y+7	; 0x07
    16d2:	ee 80       	ldd	r14, Y+6	; 0x06
    16d4:	fd 80       	ldd	r15, Y+5	; 0x05
    16d6:	0c 81       	ldd	r16, Y+4	; 0x04
    16d8:	1b 81       	ldd	r17, Y+3	; 0x03
    16da:	aa 81       	ldd	r26, Y+2	; 0x02
    16dc:	b9 81       	ldd	r27, Y+1	; 0x01
    16de:	ce 0f       	add	r28, r30
    16e0:	d1 1d       	adc	r29, r1
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	ed 01       	movw	r28, r26
    16ee:	08 95       	ret

000016f0 <__do_global_dtors>:
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	ca e7       	ldi	r28, 0x7A	; 122
    16f4:	d0 e0       	ldi	r29, 0x00	; 0
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <__do_global_dtors+0x10>
    16f8:	fe 01       	movw	r30, r28
    16fa:	0e 94 b5 09 	call	0x136a	; 0x136a <__tablejump__>
    16fe:	22 96       	adiw	r28, 0x02	; 2
    1700:	cc 37       	cpi	r28, 0x7C	; 124
    1702:	d1 07       	cpc	r29, r17
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__do_global_dtors+0x8>
    1706:	f8 94       	cli

00001708 <__stop_program>:
    1708:	ff cf       	rjmp	.-2      	; 0x1708 <__stop_program>
