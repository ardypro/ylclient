
yeelink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  0000152c  000015c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000152c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  00800168  00800168  00001628  2**0
                  ALLOC
  3 .stab         000098c4  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000f2b5  00000000  00000000  0000aeec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__dtors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_16>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_18>
      4c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_19>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
      68:	98 00       	.word	0x0098	; ????
      6a:	16 03       	mulsu	r17, r22

0000006c <__ctors_end>:
      6c:	9d 00       	.word	0x009d	; ????

0000006e <__dtors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf ef       	ldi	r28, 0xFF	; 255
      74:	d8 e0       	ldi	r29, 0x08	; 8
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	a0 e0       	ldi	r26, 0x00	; 0
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	ec e2       	ldi	r30, 0x2C	; 44
      82:	f5 e1       	ldi	r31, 0x15	; 21
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	a8 36       	cpi	r26, 0x68	; 104
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	12 e0       	ldi	r17, 0x02	; 2
      92:	a8 e6       	ldi	r26, 0x68	; 104
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	ad 32       	cpi	r26, 0x2D	; 45
      9c:	b1 07       	cpc	r27, r17
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	cc e6       	ldi	r28, 0x6C	; 108
      a4:	d0 e0       	ldi	r29, 0x00	; 0
      a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
      a8:	22 97       	sbiw	r28, 0x02	; 2
      aa:	fe 01       	movw	r30, r28
      ac:	0e 94 c6 08 	call	0x118c	; 0x118c <__tablejump__>
      b0:	c8 36       	cpi	r28, 0x68	; 104
      b2:	d1 07       	cpc	r29, r17
      b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
      b6:	0e 94 23 05 	call	0xa46	; 0xa46 <main>
      ba:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <__do_global_dtors>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <_Z41__static_initialization_and_destruction_0ii.clone.0>:
{
	int v;
	v=random(256);
	client.Post(v);
	delay(20*1000);
}
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	91 05       	cpc	r25, r1
      c6:	29 f4       	brne	.+10     	; 0xd2 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
#include "ylclient.h"

extern HardwareSerial Serial;
using namespace yeelink;

ylclient client;
      c8:	88 e6       	ldi	r24, 0x68	; 104
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	0e 94 14 01 	call	0x228	; 0x228 <_ZN7yeelink8ylclientC1Ev>
      d0:	08 95       	ret
      d2:	00 97       	sbiw	r24, 0x00	; 0
      d4:	21 f4       	brne	.+8      	; 0xde <_Z41__static_initialization_and_destruction_0ii.clone.0+0x1c>
      d6:	88 e6       	ldi	r24, 0x68	; 104
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	0e 94 06 01 	call	0x20c	; 0x20c <_ZN7yeelink8ylclientD1Ev>
      de:	08 95       	ret

000000e0 <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
	Serial.begin(9600);
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	92 e0       	ldi	r25, 0x02	; 2
      e4:	40 e8       	ldi	r20, 0x80	; 128
      e6:	55 e2       	ldi	r21, 0x25	; 37
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	0e 94 98 02 	call	0x530	; 0x530 <_ZN14HardwareSerial5beginEm>
	//初始化yeelink client
	//client.setAPIKey("apikey");	//设置API key，这里采用默认的key
	//client.setAPIVersion("v1.0");	//设置API版本，除非yeelink API升级，则采用默认的v1.0版本
	client.setEthernetCardType(SERIALOVERHTTP );
      f0:	88 e6       	ldi	r24, 0x68	; 104
      f2:	91 e0       	ldi	r25, 0x01	; 1
      f4:	62 e0       	ldi	r22, 0x02	; 2
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>
	randomSeed(analogRead(0));
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	0e 94 09 06 	call	0xc12	; 0xc12 <analogRead>
     102:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_Z10randomSeedj>
}
     106:	08 95       	ret

00000108 <loop>:

// The loop function is called in an endless loop
void loop()
{
	int v;
	v=random(256);
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	71 e0       	ldi	r23, 0x01	; 1
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z6randoml>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
	client.Post(v);
     118:	88 e6       	ldi	r24, 0x68	; 104
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	b9 01       	movw	r22, r18
     11e:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN7yeelink8ylclient4PostEi>
	delay(20*1000);
     122:	60 e2       	ldi	r22, 0x20	; 32
     124:	7e e4       	ldi	r23, 0x4E	; 78
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <delay>
}
     12e:	08 95       	ret

00000130 <_GLOBAL__I_client>:
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     138:	08 95       	ret

0000013a <_GLOBAL__D_client>:
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     142:	08 95       	ret

00000144 <_ZN7yeelink17ylGenericEthernetD1Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     144:	27 e3       	ldi	r18, 0x37	; 55
     146:	31 e0       	ldi	r19, 0x01	; 1
     148:	fc 01       	movw	r30, r24
     14a:	31 83       	std	Z+1, r19	; 0x01
     14c:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     14e:	08 95       	ret

00000150 <_ZN7yeelink17ylGenericEthernetD0Ev>:
	apiHeader = 0;
	jsonStr = 0;

}

ylGenericEthernet::~ylGenericEthernet()
     150:	27 e3       	ldi	r18, 0x37	; 55
     152:	31 e0       	ldi	r19, 0x01	; 1
     154:	fc 01       	movw	r30, r24
     156:	31 83       	std	Z+1, r19	; 0x01
     158:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     15a:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZdlPv>
     15e:	08 95       	ret

00000160 <_ZN7yeelink17ylGenericEthernetC1Ev>:
//#include "ylconst.h"

namespace yeelink
{

ylGenericEthernet::ylGenericEthernet()
     160:	fc 01       	movw	r30, r24
     162:	87 e3       	ldi	r24, 0x37	; 55
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	91 83       	std	Z+1, r25	; 0x01
     168:	80 83       	st	Z, r24
{
	seconds = 10; //API规定两条记录发送的时间间隔不少于10s
     16a:	8a e0       	ldi	r24, 0x0A	; 10
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	93 83       	std	Z+3, r25	; 0x03
     170:	82 83       	std	Z+2, r24	; 0x02
	apiHeader = 0;
     172:	15 82       	std	Z+5, r1	; 0x05
     174:	14 82       	std	Z+4, r1	; 0x04
	jsonStr = 0;
     176:	17 82       	std	Z+7, r1	; 0x07
     178:	16 82       	std	Z+6, r1	; 0x06

}
     17a:	08 95       	ret

0000017c <_ZN7yeelink12ylSerialHTTP12postKeyValueEPcS1_>:

bool ylSerialHTTP::postKeyValue(char* key, char* value)
{

	return 0;
}
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	08 95       	ret

00000180 <_ZN7yeelink12ylSerialHTTP4PostEf>:
}

bool ylSerialHTTP::Post(float value)
{
	//sendValueflag();
	return serial->print(value);
     180:	fc 01       	movw	r30, r24
     182:	82 85       	ldd	r24, Z+10	; 0x0a
     184:	93 85       	ldd	r25, Z+11	; 0x0b
     186:	22 e0       	ldi	r18, 0x02	; 2
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN5Print5printEdi>
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	09 f4       	brne	.+2      	; 0x196 <_ZN7yeelink12ylSerialHTTP4PostEf+0x16>
     194:	20 e0       	ldi	r18, 0x00	; 0
}
     196:	82 2f       	mov	r24, r18
     198:	08 95       	ret

0000019a <_ZN7yeelink12ylSerialHTTP4PostEi>:
}

bool ylSerialHTTP::Post(int value)
{
	//sendValueflag();
	return serial->print(value);
     19a:	fc 01       	movw	r30, r24
     19c:	82 85       	ldd	r24, Z+10	; 0x0a
     19e:	93 85       	ldd	r25, Z+11	; 0x0b
     1a0:	4a e0       	ldi	r20, 0x0A	; 10
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN5Print5printEii>
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <_ZN7yeelink12ylSerialHTTP4PostEi+0x16>
     1ae:	20 e0       	ldi	r18, 0x00	; 0
}
     1b0:	82 2f       	mov	r24, r18
     1b2:	08 95       	ret

000001b4 <_ZN7yeelink12ylSerialHTTPD1Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     1b4:	25 e4       	ldi	r18, 0x45	; 69
     1b6:	31 e0       	ldi	r19, 0x01	; 1
     1b8:	fc 01       	movw	r30, r24
     1ba:	31 83       	std	Z+1, r19	; 0x01
     1bc:	20 83       	st	Z, r18
     1be:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     1c2:	08 95       	ret

000001c4 <_ZN7yeelink12ylSerialHTTPD0Ev>:
		serial = &Serial;
	}

}

ylSerialHTTP::~ylSerialHTTP()
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	85 e4       	ldi	r24, 0x45	; 69
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	99 83       	std	Y+1, r25	; 0x01
     1d0:	88 83       	st	Y, r24
     1d2:	ce 01       	movw	r24, r28
     1d4:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7yeelink17ylGenericEthernetD1Ev>
{
	// TODO Auto-generated destructor stub
}
     1d8:	ce 01       	movw	r24, r28
     1da:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZdlPv>
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <_ZN7yeelink12ylSerialHTTPC1Ei>:
#endif

namespace yeelink
{

ylSerialHTTP::ylSerialHTTP(int serialIndex)
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	ec 01       	movw	r28, r24
     1ee:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7yeelink17ylGenericEthernetC1Ev>
     1f2:	85 e4       	ldi	r24, 0x45	; 69
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	99 83       	std	Y+1, r25	; 0x01
     1f8:	88 83       	st	Y, r24
#else
		serial = &Serial;
#endif
		break;
	default:
		serial = &Serial;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	92 e0       	ldi	r25, 0x02	; 2
     1fe:	9b 87       	std	Y+11, r25	; 0x0b
     200:	8a 87       	std	Y+10, r24	; 0x0a
	}

}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	08 95       	ret

0000020c <_ZN7yeelink8ylclientD1Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     20c:	23 e5       	ldi	r18, 0x53	; 83
     20e:	31 e0       	ldi	r19, 0x01	; 1
     210:	fc 01       	movw	r30, r24
     212:	31 83       	std	Z+1, r19	; 0x01
     214:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     216:	08 95       	ret

00000218 <_ZN7yeelink8ylclientD0Ev>:
	this->_activesensorid = 0;
	this->_serialIndex = 1;

}

ylclient::~ylclient()
     218:	23 e5       	ldi	r18, 0x53	; 83
     21a:	31 e0       	ldi	r19, 0x01	; 1
     21c:	fc 01       	movw	r30, r24
     21e:	31 83       	std	Z+1, r19	; 0x01
     220:	20 83       	st	Z, r18
{
	// TODO Auto-generated destructor stub
}
     222:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZdlPv>
     226:	08 95       	ret

00000228 <_ZN7yeelink8ylclientC1Ev>:
//#endif

namespace yeelink
{

ylclient::ylclient()
     228:	fc 01       	movw	r30, r24
     22a:	83 e5       	ldi	r24, 0x53	; 83
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	91 83       	std	Z+1, r25	; 0x01
     230:	80 83       	st	Z, r24
{
	// TODO Auto-generated constructor stub
	this->_connected = false;
     232:	16 82       	std	Z+6, r1	; 0x06
	this->_apikey = (char*) "89501b438791e28f74c21035a88fffd2";	//TODO 发布时要取消
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	93 83       	std	Z+3, r25	; 0x03
     23a:	82 83       	std	Z+2, r24	; 0x02
	this->_cardtype = SERIALOVERHTTP;
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	95 83       	std	Z+5, r25	; 0x05
     242:	84 83       	std	Z+4, r24	; 0x04
	this->_apiver = (char*) "v1.0";
     244:	81 e2       	ldi	r24, 0x21	; 33
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	90 87       	std	Z+8, r25	; 0x08
     24a:	87 83       	std	Z+7, r24	; 0x07
	this->_activedeviceid = 0;
     24c:	12 86       	std	Z+10, r1	; 0x0a
     24e:	11 86       	std	Z+9, r1	; 0x09
	this->_activesensorid = 0;
     250:	14 86       	std	Z+12, r1	; 0x0c
     252:	13 86       	std	Z+11, r1	; 0x0b
	this->_serialIndex = 1;
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	96 87       	std	Z+14, r25	; 0x0e
     25a:	85 87       	std	Z+13, r24	; 0x0d

}
     25c:	08 95       	ret

0000025e <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD>:
//此处应该能够判断板子类型，然后决定串口数量

}

void ylclient::setEthernetCardType(ETHERNETCARD cardType)
{
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
	this->_cardtype = cardType;
     268:	7d 83       	std	Y+5, r23	; 0x05
     26a:	6c 83       	std	Y+4, r22	; 0x04
	switch (cardType)
     26c:	62 30       	cpi	r22, 0x02	; 2
     26e:	71 05       	cpc	r23, r1
     270:	59 f4       	brne	.+22     	; 0x288 <_ZN7yeelink8ylclient19setEthernetCardTypeE12ETHERNETCARD+0x2a>
	case ENC28J60:

		break;

	case SERIALOVERHTTP:
		net = new ylSerialHTTP();
     272:	8c e0       	ldi	r24, 0x0C	; 12
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 32 05 	call	0xa64	; 0xa64 <_Znwj>
     27a:	8c 01       	movw	r16, r24
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7yeelink12ylSerialHTTPC1Ei>
     284:	0f 87       	std	Y+15, r16	; 0x0f
     286:	18 8b       	std	Y+16, r17	; 0x10

		break;
	}
}
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	08 95       	ret

00000292 <_ZN7yeelink8ylclient4PostEf>:
	return 0;
}

bool ylclient::Post(float value)
{
	return net->Post(value);
     292:	dc 01       	movw	r26, r24
     294:	1f 96       	adiw	r26, 0x0f	; 15
     296:	8d 91       	ld	r24, X+
     298:	9c 91       	ld	r25, X
     29a:	50 97       	sbiw	r26, 0x10	; 16
     29c:	dc 01       	movw	r26, r24
     29e:	ed 91       	ld	r30, X+
     2a0:	fc 91       	ld	r31, X
     2a2:	06 80       	ldd	r0, Z+6	; 0x06
     2a4:	f7 81       	ldd	r31, Z+7	; 0x07
     2a6:	e0 2d       	mov	r30, r0
     2a8:	09 95       	icall
}
     2aa:	08 95       	ret

000002ac <_ZN7yeelink8ylclient4PostEi>:
		break;
	}
}

bool ylclient::Post(int value)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
	float v;
	v = (double) value;
     2b2:	88 27       	eor	r24, r24
     2b4:	77 fd       	sbrc	r23, 7
     2b6:	80 95       	com	r24
     2b8:	98 2f       	mov	r25, r24
     2ba:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__floatsisf>
     2be:	ab 01       	movw	r20, r22
     2c0:	bc 01       	movw	r22, r24
	return this->Post(v);
     2c2:	ce 01       	movw	r24, r28
     2c4:	0e 94 49 01 	call	0x292	; 0x292 <_ZN7yeelink8ylclient4PostEf>
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     2ce:	fc 01       	movw	r30, r24
     2d0:	84 85       	ldd	r24, Z+12	; 0x0c
     2d2:	95 85       	ldd	r25, Z+13	; 0x0d
     2d4:	fc 01       	movw	r30, r24
     2d6:	e0 5c       	subi	r30, 0xC0	; 192
     2d8:	ff 4f       	sbci	r31, 0xFF	; 255
     2da:	20 81       	ld	r18, Z
     2dc:	31 81       	ldd	r19, Z+1	; 0x01
     2de:	8e 5b       	subi	r24, 0xBE	; 190
     2e0:	9f 4f       	sbci	r25, 0xFF	; 255
     2e2:	fc 01       	movw	r30, r24
     2e4:	80 81       	ld	r24, Z
     2e6:	91 81       	ldd	r25, Z+1	; 0x01
     2e8:	28 1b       	sub	r18, r24
     2ea:	39 0b       	sbc	r19, r25
     2ec:	2f 73       	andi	r18, 0x3F	; 63
     2ee:	30 70       	andi	r19, 0x00	; 0
}
     2f0:	c9 01       	movw	r24, r18
     2f2:	08 95       	ret

000002f4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     2f4:	fc 01       	movw	r30, r24
     2f6:	84 85       	ldd	r24, Z+12	; 0x0c
     2f8:	95 85       	ldd	r25, Z+13	; 0x0d
     2fa:	fc 01       	movw	r30, r24
     2fc:	e0 5c       	subi	r30, 0xC0	; 192
     2fe:	ff 4f       	sbci	r31, 0xFF	; 255
     300:	40 81       	ld	r20, Z
     302:	51 81       	ldd	r21, Z+1	; 0x01
     304:	fc 01       	movw	r30, r24
     306:	ee 5b       	subi	r30, 0xBE	; 190
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	20 81       	ld	r18, Z
     30c:	31 81       	ldd	r19, Z+1	; 0x01
     30e:	42 17       	cp	r20, r18
     310:	53 07       	cpc	r21, r19
     312:	41 f0       	breq	.+16     	; 0x324 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     314:	01 90       	ld	r0, Z+
     316:	f0 81       	ld	r31, Z
     318:	e0 2d       	mov	r30, r0
     31a:	e8 0f       	add	r30, r24
     31c:	f9 1f       	adc	r31, r25
     31e:	20 81       	ld	r18, Z
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	02 c0       	rjmp	.+4      	; 0x328 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     324:	2f ef       	ldi	r18, 0xFF	; 255
     326:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     328:	c9 01       	movw	r24, r18
     32a:	08 95       	ret

0000032c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     32c:	fc 01       	movw	r30, r24
     32e:	84 85       	ldd	r24, Z+12	; 0x0c
     330:	95 85       	ldd	r25, Z+13	; 0x0d
     332:	fc 01       	movw	r30, r24
     334:	e0 5c       	subi	r30, 0xC0	; 192
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	40 81       	ld	r20, Z
     33a:	51 81       	ldd	r21, Z+1	; 0x01
     33c:	fc 01       	movw	r30, r24
     33e:	ee 5b       	subi	r30, 0xBE	; 190
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	20 81       	ld	r18, Z
     344:	31 81       	ldd	r19, Z+1	; 0x01
     346:	42 17       	cp	r20, r18
     348:	53 07       	cpc	r21, r19
     34a:	71 f0       	breq	.+28     	; 0x368 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     34c:	a0 81       	ld	r26, Z
     34e:	b1 81       	ldd	r27, Z+1	; 0x01
     350:	a8 0f       	add	r26, r24
     352:	b9 1f       	adc	r27, r25
     354:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     356:	80 81       	ld	r24, Z
     358:	91 81       	ldd	r25, Z+1	; 0x01
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	8f 73       	andi	r24, 0x3F	; 63
     35e:	90 70       	andi	r25, 0x00	; 0
     360:	91 83       	std	Z+1, r25	; 0x01
     362:	80 83       	st	Z, r24
    return c;
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	02 c0       	rjmp	.+4      	; 0x36c <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     368:	2f ef       	ldi	r18, 0xFF	; 255
     36a:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     36c:	c9 01       	movw	r24, r18
     36e:	08 95       	ret

00000370 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     370:	dc 01       	movw	r26, r24
     372:	1e 96       	adiw	r26, 0x0e	; 14
     374:	8d 91       	ld	r24, X+
     376:	9c 91       	ld	r25, X
     378:	1f 97       	sbiw	r26, 0x0f	; 15
     37a:	fc 01       	movw	r30, r24
     37c:	e0 5c       	subi	r30, 0xC0	; 192
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	8e 5b       	subi	r24, 0xBE	; 190
     382:	9f 4f       	sbci	r25, 0xFF	; 255
     384:	40 81       	ld	r20, Z
     386:	51 81       	ldd	r21, Z+1	; 0x01
     388:	dc 01       	movw	r26, r24
     38a:	2d 91       	ld	r18, X+
     38c:	3c 91       	ld	r19, X
     38e:	11 97       	sbiw	r26, 0x01	; 1
     390:	42 17       	cp	r20, r18
     392:	53 07       	cpc	r21, r19
     394:	b9 f7       	brne	.-18     	; 0x384 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     396:	08 95       	ret

00000398 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     398:	1f 93       	push	r17
     39a:	fc 01       	movw	r30, r24
     39c:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     39e:	26 85       	ldd	r18, Z+14	; 0x0e
     3a0:	37 85       	ldd	r19, Z+15	; 0x0f
     3a2:	d9 01       	movw	r26, r18
     3a4:	a0 5c       	subi	r26, 0xC0	; 192
     3a6:	bf 4f       	sbci	r27, 0xFF	; 255
     3a8:	8d 91       	ld	r24, X+
     3aa:	9c 91       	ld	r25, X
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	60 e4       	ldi	r22, 0x40	; 64
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     3b6:	d9 01       	movw	r26, r18
     3b8:	ae 5b       	subi	r26, 0xBE	; 190
     3ba:	bf 4f       	sbci	r27, 0xFF	; 255
     3bc:	4d 91       	ld	r20, X+
     3be:	5c 91       	ld	r21, X
     3c0:	11 97       	sbiw	r26, 0x01	; 1
     3c2:	84 17       	cp	r24, r20
     3c4:	95 07       	cpc	r25, r21
     3c6:	d1 f3       	breq	.-12     	; 0x3bc <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     3c8:	d9 01       	movw	r26, r18
     3ca:	a0 5c       	subi	r26, 0xC0	; 192
     3cc:	bf 4f       	sbci	r27, 0xFF	; 255
     3ce:	0d 90       	ld	r0, X+
     3d0:	bc 91       	ld	r27, X
     3d2:	a0 2d       	mov	r26, r0
     3d4:	a2 0f       	add	r26, r18
     3d6:	b3 1f       	adc	r27, r19
     3d8:	1c 93       	st	X, r17
  _tx_buffer->head = i;
     3da:	a6 85       	ldd	r26, Z+14	; 0x0e
     3dc:	b7 85       	ldd	r27, Z+15	; 0x0f
     3de:	a0 5c       	subi	r26, 0xC0	; 192
     3e0:	bf 4f       	sbci	r27, 0xFF	; 255
     3e2:	11 96       	adiw	r26, 0x01	; 1
     3e4:	9c 93       	st	X, r25
     3e6:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     3e8:	a6 89       	ldd	r26, Z+22	; 0x16
     3ea:	b7 89       	ldd	r27, Z+23	; 0x17
     3ec:	2c 91       	ld	r18, X
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	05 8c       	ldd	r0, Z+29	; 0x1d
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <_ZN14HardwareSerial5writeEh+0x62>
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	0a 94       	dec	r0
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <_ZN14HardwareSerial5writeEh+0x5e>
     3fe:	28 2b       	or	r18, r24
     400:	2c 93       	st	X, r18
  
  return 1;
}
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	1f 91       	pop	r17
     408:	08 95       	ret

0000040a <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     40a:	fb 01       	movw	r30, r22
     40c:	e0 5c       	subi	r30, 0xC0	; 192
     40e:	ff 4f       	sbci	r31, 0xFF	; 255
     410:	20 81       	ld	r18, Z
     412:	31 81       	ldd	r19, Z+1	; 0x01
     414:	2f 5f       	subi	r18, 0xFF	; 255
     416:	3f 4f       	sbci	r19, 0xFF	; 255
     418:	2f 73       	andi	r18, 0x3F	; 63
     41a:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     41c:	db 01       	movw	r26, r22
     41e:	ae 5b       	subi	r26, 0xBE	; 190
     420:	bf 4f       	sbci	r27, 0xFF	; 255
     422:	4d 91       	ld	r20, X+
     424:	5c 91       	ld	r21, X
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	24 17       	cp	r18, r20
     42a:	35 07       	cpc	r19, r21
     42c:	39 f0       	breq	.+14     	; 0x43c <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
     42e:	a0 81       	ld	r26, Z
     430:	b1 81       	ldd	r27, Z+1	; 0x01
     432:	a6 0f       	add	r26, r22
     434:	b7 1f       	adc	r27, r23
     436:	8c 93       	st	X, r24
    buffer->head = i;
     438:	31 83       	std	Z+1, r19	; 0x01
     43a:	20 83       	st	Z, r18
     43c:	08 95       	ret

0000043e <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     43e:	08 95       	ret

00000440 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	2f 93       	push	r18
     44c:	3f 93       	push	r19
     44e:	4f 93       	push	r20
     450:	5f 93       	push	r21
     452:	6f 93       	push	r22
     454:	7f 93       	push	r23
     456:	8f 93       	push	r24
     458:	9f 93       	push	r25
     45a:	af 93       	push	r26
     45c:	bf 93       	push	r27
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     462:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
     466:	69 e7       	ldi	r22, 0x79	; 121
     468:	71 e0       	ldi	r23, 0x01	; 1
     46a:	0e 94 05 02 	call	0x40a	; 0x40a <_Z10store_charhP11ring_buffer>
  }
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	0e 94 67 01 	call	0x2ce	; 0x2ce <_ZN14HardwareSerial9availableEv>
     498:	00 97       	sbiw	r24, 0x00	; 0
     49a:	11 f0       	breq	.+4      	; 0x4a0 <_Z14serialEventRunv+0x10>
     49c:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z11serialEventv>
     4a0:	08 95       	ret

000004a2 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	2f 93       	push	r18
     4ae:	3f 93       	push	r19
     4b0:	5f 93       	push	r21
     4b2:	6f 93       	push	r22
     4b4:	7f 93       	push	r23
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	ef 93       	push	r30
     4c0:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     4c2:	20 91 fd 01 	lds	r18, 0x01FD
     4c6:	30 91 fe 01 	lds	r19, 0x01FE
     4ca:	80 91 ff 01 	lds	r24, 0x01FF
     4ce:	90 91 00 02 	lds	r25, 0x0200
     4d2:	28 17       	cp	r18, r24
     4d4:	39 07       	cpc	r19, r25
     4d6:	31 f4       	brne	.+12     	; 0x4e4 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     4d8:	80 91 c1 00 	lds	r24, 0x00C1
     4dc:	8f 7d       	andi	r24, 0xDF	; 223
     4de:	80 93 c1 00 	sts	0x00C1, r24
     4e2:	16 c0       	rjmp	.+44     	; 0x510 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     4e4:	e0 91 ff 01 	lds	r30, 0x01FF
     4e8:	f0 91 00 02 	lds	r31, 0x0200
     4ec:	e3 54       	subi	r30, 0x43	; 67
     4ee:	fe 4f       	sbci	r31, 0xFE	; 254
     4f0:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     4f2:	80 91 ff 01 	lds	r24, 0x01FF
     4f6:	90 91 00 02 	lds	r25, 0x0200
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	60 e4       	ldi	r22, 0x40	; 64
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__divmodhi4>
     504:	90 93 00 02 	sts	0x0200, r25
     508:	80 93 ff 01 	sts	0x01FF, r24
	
  #if defined(UDR0)
    UDR0 = c;
     50c:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	bf 91       	pop	r27
     516:	af 91       	pop	r26
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	7f 91       	pop	r23
     51e:	6f 91       	pop	r22
     520:	5f 91       	pop	r21
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     530:	df 92       	push	r13
     532:	ef 92       	push	r14
     534:	ff 92       	push	r15
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	ec 01       	movw	r28, r24
     540:	7a 01       	movw	r14, r20
     542:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     544:	dd 24       	eor	r13, r13
     546:	d3 94       	inc	r13
     548:	40 30       	cpi	r20, 0x00	; 0
     54a:	81 ee       	ldi	r24, 0xE1	; 225
     54c:	58 07       	cpc	r21, r24
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	68 07       	cpc	r22, r24
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	78 07       	cpc	r23, r24
     556:	49 f4       	brne	.+18     	; 0x56a <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     558:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     55a:	ec 89       	ldd	r30, Y+20	; 0x14
     55c:	fd 89       	ldd	r31, Y+21	; 0x15
     55e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     560:	60 e8       	ldi	r22, 0x80	; 128
     562:	74 e8       	ldi	r23, 0x84	; 132
     564:	8e e1       	ldi	r24, 0x1E	; 30
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0f c0       	rjmp	.+30     	; 0x588 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     56a:	ec 89       	ldd	r30, Y+20	; 0x14
     56c:	fd 89       	ldd	r31, Y+21	; 0x15
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 8c       	ldd	r0, Y+30	; 0x1e
     574:	02 c0       	rjmp	.+4      	; 0x57a <_ZN14HardwareSerial5beginEm+0x4a>
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	0a 94       	dec	r0
     57c:	e2 f7       	brpl	.-8      	; 0x576 <_ZN14HardwareSerial5beginEm+0x46>
     57e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	79 e0       	ldi	r23, 0x09	; 9
     584:	8d e3       	ldi	r24, 0x3D	; 61
     586:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     588:	a8 01       	movw	r20, r16
     58a:	97 01       	movw	r18, r14
     58c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__udivmodsi4>
     590:	21 50       	subi	r18, 0x01	; 1
     592:	30 40       	sbci	r19, 0x00	; 0
     594:	40 40       	sbci	r20, 0x00	; 0
     596:	50 40       	sbci	r21, 0x00	; 0
     598:	56 95       	lsr	r21
     59a:	47 95       	ror	r20
     59c:	37 95       	ror	r19
     59e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     5a0:	80 e1       	ldi	r24, 0x10	; 16
     5a2:	20 30       	cpi	r18, 0x00	; 0
     5a4:	38 07       	cpc	r19, r24
     5a6:	10 f0       	brcs	.+4      	; 0x5ac <_ZN14HardwareSerial5beginEm+0x7c>
     5a8:	dd 20       	and	r13, r13
     5aa:	b1 f6       	brne	.-84     	; 0x558 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     5ac:	e8 89       	ldd	r30, Y+16	; 0x10
     5ae:	f9 89       	ldd	r31, Y+17	; 0x11
     5b0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     5b2:	ea 89       	ldd	r30, Y+18	; 0x12
     5b4:	fb 89       	ldd	r31, Y+19	; 0x13
     5b6:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     5b8:	ee 89       	ldd	r30, Y+22	; 0x16
     5ba:	ff 89       	ldd	r31, Y+23	; 0x17
     5bc:	40 81       	ld	r20, Z
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	9c 01       	movw	r18, r24
     5c4:	0a 8c       	ldd	r0, Y+26	; 0x1a
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <_ZN14HardwareSerial5beginEm+0x9c>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	0a 94       	dec	r0
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <_ZN14HardwareSerial5beginEm+0x98>
     5d0:	42 2b       	or	r20, r18
     5d2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     5d4:	ee 89       	ldd	r30, Y+22	; 0x16
     5d6:	ff 89       	ldd	r31, Y+23	; 0x17
     5d8:	40 81       	ld	r20, Z
     5da:	9c 01       	movw	r18, r24
     5dc:	0b 8c       	ldd	r0, Y+27	; 0x1b
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <_ZN14HardwareSerial5beginEm+0xb4>
     5e0:	22 0f       	add	r18, r18
     5e2:	33 1f       	adc	r19, r19
     5e4:	0a 94       	dec	r0
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <_ZN14HardwareSerial5beginEm+0xb0>
     5e8:	42 2b       	or	r20, r18
     5ea:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     5ec:	ee 89       	ldd	r30, Y+22	; 0x16
     5ee:	ff 89       	ldd	r31, Y+23	; 0x17
     5f0:	40 81       	ld	r20, Z
     5f2:	9c 01       	movw	r18, r24
     5f4:	0c 8c       	ldd	r0, Y+28	; 0x1c
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <_ZN14HardwareSerial5beginEm+0xcc>
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	0a 94       	dec	r0
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <_ZN14HardwareSerial5beginEm+0xc8>
     600:	42 2b       	or	r20, r18
     602:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     604:	ee 89       	ldd	r30, Y+22	; 0x16
     606:	ff 89       	ldd	r31, Y+23	; 0x17
     608:	20 81       	ld	r18, Z
     60a:	0d 8c       	ldd	r0, Y+29	; 0x1d
     60c:	02 c0       	rjmp	.+4      	; 0x612 <_ZN14HardwareSerial5beginEm+0xe2>
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	0a 94       	dec	r0
     614:	e2 f7       	brpl	.-8      	; 0x60e <_ZN14HardwareSerial5beginEm+0xde>
     616:	80 95       	com	r24
     618:	82 23       	and	r24, r18
     61a:	80 83       	st	Z, r24
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	08 95       	ret

0000062c <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     62c:	10 92 04 02 	sts	0x0204, r1
     630:	10 92 03 02 	sts	0x0203, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     634:	88 ee       	ldi	r24, 0xE8	; 232
     636:	93 e0       	ldi	r25, 0x03	; 3
     638:	a0 e0       	ldi	r26, 0x00	; 0
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	80 93 05 02 	sts	0x0205, r24
     640:	90 93 06 02 	sts	0x0206, r25
     644:	a0 93 07 02 	sts	0x0207, r26
     648:	b0 93 08 02 	sts	0x0208, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     64c:	e3 e0       	ldi	r30, 0x03	; 3
     64e:	f2 e0       	ldi	r31, 0x02	; 2
     650:	8b e5       	ldi	r24, 0x5B	; 91
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	92 93       	st	-Z, r25
     656:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     658:	89 e7       	ldi	r24, 0x79	; 121
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	95 87       	std	Z+13, r25	; 0x0d
     65e:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     660:	8d eb       	ldi	r24, 0xBD	; 189
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	97 87       	std	Z+15, r25	; 0x0f
     666:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     668:	85 ec       	ldi	r24, 0xC5	; 197
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	91 8b       	std	Z+17, r25	; 0x11
     66e:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     670:	84 ec       	ldi	r24, 0xC4	; 196
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	93 8b       	std	Z+19, r25	; 0x13
     676:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     678:	80 ec       	ldi	r24, 0xC0	; 192
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	95 8b       	std	Z+21, r25	; 0x15
     67e:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     680:	81 ec       	ldi	r24, 0xC1	; 193
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	97 8b       	std	Z+23, r25	; 0x17
     686:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     688:	86 ec       	ldi	r24, 0xC6	; 198
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	91 8f       	std	Z+25, r25	; 0x19
     68e:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     69c:	85 e0       	ldi	r24, 0x05	; 5
     69e:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     6a4:	08 95       	ret

000006a6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	6c 01       	movw	r12, r24
     6b8:	7b 01       	movw	r14, r22
     6ba:	8a 01       	movw	r16, r20
  size_t n = 0;
     6bc:	c0 e0       	ldi	r28, 0x00	; 0
     6be:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     6c0:	0f c0       	rjmp	.+30     	; 0x6e0 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
     6c2:	d7 01       	movw	r26, r14
     6c4:	6d 91       	ld	r22, X+
     6c6:	7d 01       	movw	r14, r26
     6c8:	d6 01       	movw	r26, r12
     6ca:	ed 91       	ld	r30, X+
     6cc:	fc 91       	ld	r31, X
     6ce:	01 90       	ld	r0, Z+
     6d0:	f0 81       	ld	r31, Z
     6d2:	e0 2d       	mov	r30, r0
     6d4:	c6 01       	movw	r24, r12
     6d6:	09 95       	icall
     6d8:	c8 0f       	add	r28, r24
     6da:	d9 1f       	adc	r29, r25
     6dc:	01 50       	subi	r16, 0x01	; 1
     6de:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     6e0:	01 15       	cp	r16, r1
     6e2:	11 05       	cpc	r17, r1
     6e4:	71 f7       	brne	.-36     	; 0x6c2 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     6e6:	ce 01       	movw	r24, r28
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	08 95       	ret

000006fa <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     6fa:	db 01       	movw	r26, r22
     6fc:	0d 90       	ld	r0, X+
     6fe:	00 20       	and	r0, r0
     700:	e9 f7       	brne	.-6      	; 0x6fc <_ZN5Print5writeEPKc+0x2>
     702:	ad 01       	movw	r20, r26
     704:	41 50       	subi	r20, 0x01	; 1
     706:	50 40       	sbci	r21, 0x00	; 0
     708:	46 1b       	sub	r20, r22
     70a:	57 0b       	sbc	r21, r23
     70c:	dc 01       	movw	r26, r24
     70e:	ed 91       	ld	r30, X+
     710:	fc 91       	ld	r31, X
     712:	02 80       	ldd	r0, Z+2	; 0x02
     714:	f3 81       	ldd	r31, Z+3	; 0x03
     716:	e0 2d       	mov	r30, r0
     718:	09 95       	icall
     71a:	08 95       	ret

0000071c <_ZN5Print5printEc>:
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
     71c:	dc 01       	movw	r26, r24
     71e:	ed 91       	ld	r30, X+
     720:	fc 91       	ld	r31, X
     722:	01 90       	ld	r0, Z+
     724:	f0 81       	ld	r31, Z
     726:	e0 2d       	mov	r30, r0
     728:	09 95       	icall
    size_t println(long, int = DEC);
     72a:	08 95       	ret

0000072c <_ZN5Print11printNumberEmh>:
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	df 93       	push	r29
     742:	cf 93       	push	r28
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	a1 97       	sbiw	r28, 0x21	; 33
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	6c 01       	movw	r12, r24
     756:	04 2f       	mov	r16, r20
     758:	e5 2f       	mov	r30, r21
     75a:	cb 01       	movw	r24, r22
     75c:	12 2f       	mov	r17, r18
     75e:	19 a2       	std	Y+33, r1	; 0x21
     760:	22 30       	cpi	r18, 0x02	; 2
     762:	08 f4       	brcc	.+2      	; 0x766 <_ZN5Print11printNumberEmh+0x3a>
     764:	1a e0       	ldi	r17, 0x0A	; 10
     766:	21 e2       	ldi	r18, 0x21	; 33
     768:	e2 2e       	mov	r14, r18
     76a:	f1 2c       	mov	r15, r1
     76c:	ec 0e       	add	r14, r28
     76e:	fd 1e       	adc	r15, r29
     770:	81 2e       	mov	r8, r17
     772:	99 24       	eor	r9, r9
     774:	aa 24       	eor	r10, r10
     776:	bb 24       	eor	r11, r11
     778:	03 c0       	rjmp	.+6      	; 0x780 <_ZN5Print11printNumberEmh+0x54>
     77a:	02 2f       	mov	r16, r18
     77c:	e3 2f       	mov	r30, r19
     77e:	ca 01       	movw	r24, r20
     780:	60 2f       	mov	r22, r16
     782:	7e 2f       	mov	r23, r30
     784:	a5 01       	movw	r20, r10
     786:	94 01       	movw	r18, r8
     788:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__udivmodsi4>
     78c:	12 9f       	mul	r17, r18
     78e:	80 2d       	mov	r24, r0
     790:	11 24       	eor	r1, r1
     792:	08 1b       	sub	r16, r24
     794:	08 94       	sec
     796:	e1 08       	sbc	r14, r1
     798:	f1 08       	sbc	r15, r1
     79a:	0a 30       	cpi	r16, 0x0A	; 10
     79c:	14 f4       	brge	.+4      	; 0x7a2 <_ZN5Print11printNumberEmh+0x76>
     79e:	00 5d       	subi	r16, 0xD0	; 208
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <_ZN5Print11printNumberEmh+0x78>
     7a2:	09 5c       	subi	r16, 0xC9	; 201
     7a4:	f7 01       	movw	r30, r14
     7a6:	00 83       	st	Z, r16
     7a8:	21 15       	cp	r18, r1
     7aa:	31 05       	cpc	r19, r1
     7ac:	41 05       	cpc	r20, r1
     7ae:	51 05       	cpc	r21, r1
     7b0:	21 f7       	brne	.-56     	; 0x77a <_ZN5Print11printNumberEmh+0x4e>
     7b2:	c6 01       	movw	r24, r12
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN5Print5writeEPKc>
     7ba:	a1 96       	adiw	r28, 0x21	; 33
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	9f 90       	pop	r9
     7dc:	8f 90       	pop	r8
     7de:	08 95       	ret

000007e0 <_ZN5Print5printEmi>:
     7e0:	21 15       	cp	r18, r1
     7e2:	31 05       	cpc	r19, r1
     7e4:	49 f4       	brne	.+18     	; 0x7f8 <_ZN5Print5printEmi+0x18>
     7e6:	dc 01       	movw	r26, r24
     7e8:	ed 91       	ld	r30, X+
     7ea:	fc 91       	ld	r31, X
     7ec:	01 90       	ld	r0, Z+
     7ee:	f0 81       	ld	r31, Z
     7f0:	e0 2d       	mov	r30, r0
     7f2:	64 2f       	mov	r22, r20
     7f4:	09 95       	icall
     7f6:	08 95       	ret
     7f8:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print11printNumberEmh>
     7fc:	08 95       	ret

000007fe <_ZN5Print5printEli>:
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
     810:	7a 01       	movw	r14, r20
     812:	8b 01       	movw	r16, r22
     814:	21 15       	cp	r18, r1
     816:	31 05       	cpc	r19, r1
     818:	41 f4       	brne	.+16     	; 0x82a <_ZN5Print5printEli+0x2c>
     81a:	e8 81       	ld	r30, Y
     81c:	f9 81       	ldd	r31, Y+1	; 0x01
     81e:	01 90       	ld	r0, Z+
     820:	f0 81       	ld	r31, Z
     822:	e0 2d       	mov	r30, r0
     824:	64 2f       	mov	r22, r20
     826:	09 95       	icall
     828:	1a c0       	rjmp	.+52     	; 0x85e <_ZN5Print5printEli+0x60>
     82a:	2a 30       	cpi	r18, 0x0A	; 10
     82c:	31 05       	cpc	r19, r1
     82e:	a9 f4       	brne	.+42     	; 0x85a <_ZN5Print5printEli+0x5c>
     830:	77 ff       	sbrs	r23, 7
     832:	12 c0       	rjmp	.+36     	; 0x858 <_ZN5Print5printEli+0x5a>
     834:	6d e2       	ldi	r22, 0x2D	; 45
     836:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN5Print5printEc>
     83a:	6c 01       	movw	r12, r24
     83c:	44 27       	eor	r20, r20
     83e:	55 27       	eor	r21, r21
     840:	ba 01       	movw	r22, r20
     842:	4e 19       	sub	r20, r14
     844:	5f 09       	sbc	r21, r15
     846:	60 0b       	sbc	r22, r16
     848:	71 0b       	sbc	r23, r17
     84a:	ce 01       	movw	r24, r28
     84c:	2a e0       	ldi	r18, 0x0A	; 10
     84e:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print11printNumberEmh>
     852:	c8 0e       	add	r12, r24
     854:	d9 1e       	adc	r13, r25
     856:	04 c0       	rjmp	.+8      	; 0x860 <_ZN5Print5printEli+0x62>
     858:	2a e0       	ldi	r18, 0x0A	; 10
     85a:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print11printNumberEmh>
     85e:	6c 01       	movw	r12, r24
     860:	c6 01       	movw	r24, r12
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	08 95       	ret

00000874 <_ZN5Print5printEii>:
    size_t println(const Printable&);
    size_t println(void);
};

#endif
     874:	9a 01       	movw	r18, r20
     876:	fb 01       	movw	r30, r22
     878:	af 01       	movw	r20, r30
     87a:	66 27       	eor	r22, r22
     87c:	57 fd       	sbrc	r21, 7
     87e:	60 95       	com	r22
     880:	76 2f       	mov	r23, r22
     882:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Print5printEli>
     886:	08 95       	ret

00000888 <_ZN5Print10printFloatEdh>:
     888:	6f 92       	push	r6
     88a:	7f 92       	push	r7
     88c:	9f 92       	push	r9
     88e:	af 92       	push	r10
     890:	bf 92       	push	r11
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	3c 01       	movw	r6, r24
     8a4:	7a 01       	movw	r14, r20
     8a6:	8b 01       	movw	r16, r22
     8a8:	c2 2e       	mov	r12, r18
     8aa:	cb 01       	movw	r24, r22
     8ac:	ba 01       	movw	r22, r20
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	a9 01       	movw	r20, r18
     8b4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__cmpsf2>
     8b8:	87 ff       	sbrs	r24, 7
     8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <_ZN5Print10printFloatEdh+0x48>
     8bc:	c3 01       	movw	r24, r6
     8be:	6d e2       	ldi	r22, 0x2D	; 45
     8c0:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN5Print5printEc>
     8c4:	ec 01       	movw	r28, r24
     8c6:	17 fb       	bst	r17, 7
     8c8:	10 95       	com	r17
     8ca:	17 f9       	bld	r17, 7
     8cc:	10 95       	com	r17
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <_ZN5Print10printFloatEdh+0x4c>
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
     8d4:	dd 24       	eor	r13, r13
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	2f e3       	ldi	r18, 0x3F	; 63
     8de:	11 c0       	rjmp	.+34     	; 0x902 <__stack+0x3>
     8e0:	da 01       	movw	r26, r20
     8e2:	f9 01       	movw	r30, r18
     8e4:	6b 2f       	mov	r22, r27
     8e6:	74 2f       	mov	r23, r20
     8e8:	8f 2f       	mov	r24, r31
     8ea:	92 2f       	mov	r25, r18
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e2       	ldi	r20, 0x20	; 32
     8f2:	51 e4       	ldi	r21, 0x41	; 65
     8f4:	0e 94 93 06 	call	0xd26	; 0xd26 <__divsf3>
     8f8:	56 2f       	mov	r21, r22
     8fa:	47 2f       	mov	r20, r23
     8fc:	38 2f       	mov	r19, r24
     8fe:	29 2f       	mov	r18, r25
     900:	d3 94       	inc	r13
     902:	dc 14       	cp	r13, r12
     904:	68 f3       	brcs	.-38     	; 0x8e0 <_ZN5Print10printFloatEdh+0x58>
     906:	c8 01       	movw	r24, r16
     908:	b7 01       	movw	r22, r14
     90a:	da 01       	movw	r26, r20
     90c:	f9 01       	movw	r30, r18
     90e:	2b 2f       	mov	r18, r27
     910:	34 2f       	mov	r19, r20
     912:	4f 2f       	mov	r20, r31
     914:	5e 2f       	mov	r21, r30
     916:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3>
     91a:	5b 01       	movw	r10, r22
     91c:	f8 2e       	mov	r15, r24
     91e:	99 2e       	mov	r9, r25
     920:	7b 2d       	mov	r23, r11
     922:	0e 94 00 07 	call	0xe00	; 0xe00 <__fixunssfsi>
     926:	16 2f       	mov	r17, r22
     928:	d7 2e       	mov	r13, r23
     92a:	e8 2e       	mov	r14, r24
     92c:	09 2f       	mov	r16, r25
     92e:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatunsisf>
     932:	9b 01       	movw	r18, r22
     934:	ac 01       	movw	r20, r24
     936:	6a 2d       	mov	r22, r10
     938:	7b 2d       	mov	r23, r11
     93a:	8f 2d       	mov	r24, r15
     93c:	99 2d       	mov	r25, r9
     93e:	0e 94 2a 06 	call	0xc54	; 0xc54 <__subsf3>
     942:	96 2e       	mov	r9, r22
     944:	a7 2e       	mov	r10, r23
     946:	b8 2e       	mov	r11, r24
     948:	f9 2e       	mov	r15, r25
     94a:	c3 01       	movw	r24, r6
     94c:	41 2f       	mov	r20, r17
     94e:	5d 2d       	mov	r21, r13
     950:	6e 2d       	mov	r22, r14
     952:	70 2f       	mov	r23, r16
     954:	2a e0       	ldi	r18, 0x0A	; 10
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN5Print5printEmi>
     95c:	c8 0f       	add	r28, r24
     95e:	d9 1f       	adc	r29, r25
     960:	cc 20       	and	r12, r12
     962:	b9 f1       	breq	.+110    	; 0x9d2 <__stack+0xd3>
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
     964:	c3 01       	movw	r24, r6
     966:	66 e2       	ldi	r22, 0x26	; 38
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN5Print5writeEPKc>
     96e:	c8 0f       	add	r28, r24
     970:	d9 1f       	adc	r29, r25
     972:	2f c0       	rjmp	.+94     	; 0x9d2 <__stack+0xd3>
     974:	69 2d       	mov	r22, r9
     976:	7a 2d       	mov	r23, r10
     978:	8b 2d       	mov	r24, r11
     97a:	9f 2d       	mov	r25, r15
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e2       	ldi	r20, 0x20	; 32
     982:	51 e4       	ldi	r21, 0x41	; 65
     984:	0e 94 de 07 	call	0xfbc	; 0xfbc <__mulsf3>
     988:	d6 2e       	mov	r13, r22
     98a:	b7 2e       	mov	r11, r23
     98c:	a8 2e       	mov	r10, r24
     98e:	99 2e       	mov	r9, r25
     990:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fixsfsi>
    size_t println(void);
};

#endif
     994:	7b 01       	movw	r14, r22
     996:	00 27       	eor	r16, r16
     998:	f7 fc       	sbrc	r15, 7
     99a:	00 95       	com	r16
     99c:	10 2f       	mov	r17, r16
     99e:	c3 01       	movw	r24, r6
     9a0:	b8 01       	movw	r22, r16
     9a2:	a7 01       	movw	r20, r14
     9a4:	2a e0       	ldi	r18, 0x0A	; 10
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN5Print5printEli>
     9ac:	c8 0f       	add	r28, r24
     9ae:	d9 1f       	adc	r29, r25
     9b0:	c8 01       	movw	r24, r16
     9b2:	b7 01       	movw	r22, r14
     9b4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__floatsisf>
     9b8:	9b 01       	movw	r18, r22
     9ba:	ac 01       	movw	r20, r24
     9bc:	6d 2d       	mov	r22, r13
     9be:	7b 2d       	mov	r23, r11
     9c0:	8a 2d       	mov	r24, r10
     9c2:	99 2d       	mov	r25, r9
     9c4:	0e 94 2a 06 	call	0xc54	; 0xc54 <__subsf3>
     9c8:	96 2e       	mov	r9, r22
     9ca:	a7 2e       	mov	r10, r23
     9cc:	b8 2e       	mov	r11, r24
     9ce:	f9 2e       	mov	r15, r25
     9d0:	ca 94       	dec	r12
     9d2:	cc 20       	and	r12, r12
     9d4:	79 f6       	brne	.-98     	; 0x974 <__stack+0x75>
     9d6:	ce 01       	movw	r24, r28
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	bf 90       	pop	r11
     9ea:	af 90       	pop	r10
     9ec:	9f 90       	pop	r9
     9ee:	7f 90       	pop	r7
     9f0:	6f 90       	pop	r6
     9f2:	08 95       	ret

000009f4 <_ZN5Print5printEdi>:
     9f4:	0e 94 44 04 	call	0x888	; 0x888 <_ZN5Print10printFloatEdh>
     9f8:	08 95       	ret

000009fa <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	29 f0       	breq	.+10     	; 0xa08 <_Z10randomSeedj+0xe>
    srandom(seed);
     9fe:	bc 01       	movw	r22, r24
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 49 0a 	call	0x1492	; 0x1492 <srandom>
     a08:	08 95       	ret

00000a0a <_Z6randoml>:
  }
}

long random(long howbig)
{
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	7b 01       	movw	r14, r22
     a14:	8c 01       	movw	r16, r24
  if (howbig == 0) {
     a16:	61 15       	cp	r22, r1
     a18:	71 05       	cpc	r23, r1
     a1a:	81 05       	cpc	r24, r1
     a1c:	91 05       	cpc	r25, r1
     a1e:	49 f0       	breq	.+18     	; 0xa32 <_Z6randoml+0x28>
    return 0;
  }
  return random() % howbig;
     a20:	0e 94 44 0a 	call	0x1488	; 0x1488 <random>
     a24:	a8 01       	movw	r20, r16
     a26:	97 01       	movw	r18, r14
     a28:	0e 94 95 08 	call	0x112a	; 0x112a <__divmodsi4>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <_Z6randoml+0x2e>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	a9 01       	movw	r20, r18
  }
  return random() % howbig;
}
     a38:	b9 01       	movw	r22, r18
     a3a:	ca 01       	movw	r24, r20
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <main>:
#include <Arduino.h>

int main(void)
{
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
	init();
     a4a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     a4e:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a52:	c8 e4       	ldi	r28, 0x48	; 72
     a54:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     a56:	0e 94 84 00 	call	0x108	; 0x108 <loop>
		if (serialEventRun) serialEventRun();
     a5a:	20 97       	sbiw	r28, 0x00	; 0
     a5c:	e1 f3       	breq	.-8      	; 0xa56 <main+0x10>
     a5e:	0e 94 48 02 	call	0x490	; 0x490 <_Z14serialEventRunv>
     a62:	f9 cf       	rjmp	.-14     	; 0xa56 <main+0x10>

00000a64 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
     a64:	0e 94 ca 08 	call	0x1194	; 0x1194 <malloc>
}
     a68:	08 95       	ret

00000a6a <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
     a6a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <free>
} 
     a6e:	08 95       	ret

00000a70 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
     a70:	08 95       	ret

00000a72 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	2f 93       	push	r18
     a7e:	3f 93       	push	r19
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	af 93       	push	r26
     a86:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     a88:	80 91 24 02 	lds	r24, 0x0224
     a8c:	90 91 25 02 	lds	r25, 0x0225
     a90:	a0 91 26 02 	lds	r26, 0x0226
     a94:	b0 91 27 02 	lds	r27, 0x0227
	unsigned char f = timer0_fract;
     a98:	30 91 28 02 	lds	r19, 0x0228

	m += MILLIS_INC;
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	a1 1d       	adc	r26, r1
     aa0:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     aa2:	23 2f       	mov	r18, r19
     aa4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     aa6:	2d 37       	cpi	r18, 0x7D	; 125
     aa8:	20 f0       	brcs	.+8      	; 0xab2 <__vector_16+0x40>
		f -= FRACT_MAX;
     aaa:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	a1 1d       	adc	r26, r1
     ab0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     ab2:	20 93 28 02 	sts	0x0228, r18
	timer0_millis = m;
     ab6:	80 93 24 02 	sts	0x0224, r24
     aba:	90 93 25 02 	sts	0x0225, r25
     abe:	a0 93 26 02 	sts	0x0226, r26
     ac2:	b0 93 27 02 	sts	0x0227, r27
	timer0_overflow_count++;
     ac6:	80 91 20 02 	lds	r24, 0x0220
     aca:	90 91 21 02 	lds	r25, 0x0221
     ace:	a0 91 22 02 	lds	r26, 0x0222
     ad2:	b0 91 23 02 	lds	r27, 0x0223
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	a1 1d       	adc	r26, r1
     ada:	b1 1d       	adc	r27, r1
     adc:	80 93 20 02 	sts	0x0220, r24
     ae0:	90 93 21 02 	sts	0x0221, r25
     ae4:	a0 93 22 02 	sts	0x0222, r26
     ae8:	b0 93 23 02 	sts	0x0223, r27
}
     aec:	bf 91       	pop	r27
     aee:	af 91       	pop	r26
     af0:	9f 91       	pop	r25
     af2:	8f 91       	pop	r24
     af4:	3f 91       	pop	r19
     af6:	2f 91       	pop	r18
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     b02:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     b04:	f8 94       	cli
	m = timer0_overflow_count;
     b06:	20 91 20 02 	lds	r18, 0x0220
     b0a:	30 91 21 02 	lds	r19, 0x0221
     b0e:	40 91 22 02 	lds	r20, 0x0222
     b12:	50 91 23 02 	lds	r21, 0x0223
#if defined(TCNT0)
	t = TCNT0;
     b16:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     b18:	a8 9b       	sbis	0x15, 0	; 21
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <micros+0x26>
     b1c:	8f 3f       	cpi	r24, 0xFF	; 255
     b1e:	21 f0       	breq	.+8      	; 0xb28 <micros+0x26>
		m++;
     b20:	2f 5f       	subi	r18, 0xFF	; 255
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	4f 4f       	sbci	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     b28:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     b2a:	54 2f       	mov	r21, r20
     b2c:	43 2f       	mov	r20, r19
     b2e:	32 2f       	mov	r19, r18
     b30:	22 27       	eor	r18, r18
     b32:	28 0f       	add	r18, r24
     b34:	31 1d       	adc	r19, r1
     b36:	41 1d       	adc	r20, r1
     b38:	51 1d       	adc	r21, r1
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	44 1f       	adc	r20, r20
     b42:	55 1f       	adc	r21, r21
     b44:	8a 95       	dec	r24
     b46:	d1 f7       	brne	.-12     	; 0xb3c <micros+0x3a>
}
     b48:	b9 01       	movw	r22, r18
     b4a:	ca 01       	movw	r24, r20
     b4c:	08 95       	ret

00000b4e <delay>:

void delay(unsigned long ms)
{
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	7b 01       	movw	r14, r22
     b5c:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     b5e:	0e 94 81 05 	call	0xb02	; 0xb02 <micros>
     b62:	eb 01       	movw	r28, r22

	while (ms > 0) {
     b64:	0f c0       	rjmp	.+30     	; 0xb84 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     b66:	0e 94 81 05 	call	0xb02	; 0xb02 <micros>
     b6a:	6c 1b       	sub	r22, r28
     b6c:	7d 0b       	sbc	r23, r29
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	68 3e       	cpi	r22, 0xE8	; 232
     b72:	78 07       	cpc	r23, r24
     b74:	38 f0       	brcs	.+14     	; 0xb84 <delay+0x36>
			ms--;
     b76:	08 94       	sec
     b78:	e1 08       	sbc	r14, r1
     b7a:	f1 08       	sbc	r15, r1
     b7c:	01 09       	sbc	r16, r1
     b7e:	11 09       	sbc	r17, r1
			start += 1000;
     b80:	c8 51       	subi	r28, 0x18	; 24
     b82:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     b84:	e1 14       	cp	r14, r1
     b86:	f1 04       	cpc	r15, r1
     b88:	01 05       	cpc	r16, r1
     b8a:	11 05       	cpc	r17, r1
     b8c:	61 f7       	brne	.-40     	; 0xb66 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	08 95       	ret

00000b9c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     b9c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     b9e:	84 b5       	in	r24, 0x24	; 36
     ba0:	82 60       	ori	r24, 0x02	; 2
     ba2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ba4:	84 b5       	in	r24, 0x24	; 36
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     baa:	85 b5       	in	r24, 0x25	; 37
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     bb0:	85 b5       	in	r24, 0x25	; 37
     bb2:	81 60       	ori	r24, 0x01	; 1
     bb4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     bb6:	ee e6       	ldi	r30, 0x6E	; 110
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	81 60       	ori	r24, 0x01	; 1
     bbe:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     bc0:	e1 e8       	ldi	r30, 0x81	; 129
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     bc6:	80 81       	ld	r24, Z
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     bcc:	80 81       	ld	r24, Z
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     bd2:	e0 e8       	ldi	r30, 0x80	; 128
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	81 60       	ori	r24, 0x01	; 1
     bda:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     bdc:	e1 eb       	ldi	r30, 0xB1	; 177
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     be6:	e0 eb       	ldi	r30, 0xB0	; 176
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	81 60       	ori	r24, 0x01	; 1
     bee:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     bf0:	ea e7       	ldi	r30, 0x7A	; 122
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	84 60       	ori	r24, 0x04	; 4
     bf8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     bfa:	80 81       	ld	r24, Z
     bfc:	82 60       	ori	r24, 0x02	; 2
     bfe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     c00:	80 81       	ld	r24, Z
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     c0c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     c10:	08 95       	ret

00000c12 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     c12:	8e 30       	cpi	r24, 0x0E	; 14
     c14:	08 f0       	brcs	.+2      	; 0xc18 <analogRead+0x6>
     c16:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     c18:	87 70       	andi	r24, 0x07	; 7
     c1a:	90 91 32 01 	lds	r25, 0x0132
     c1e:	92 95       	swap	r25
     c20:	99 0f       	add	r25, r25
     c22:	99 0f       	add	r25, r25
     c24:	90 7c       	andi	r25, 0xC0	; 192
     c26:	98 2b       	or	r25, r24
     c28:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     c2c:	80 91 7a 00 	lds	r24, 0x007A
     c30:	80 64       	ori	r24, 0x40	; 64
     c32:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     c36:	80 91 7a 00 	lds	r24, 0x007A
     c3a:	86 fd       	sbrc	r24, 6
     c3c:	fc cf       	rjmp	.-8      	; 0xc36 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     c3e:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     c42:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     c46:	93 2f       	mov	r25, r19
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	28 2b       	or	r18, r24
     c4e:	39 2b       	or	r19, r25
}
     c50:	c9 01       	movw	r24, r18
     c52:	08 95       	ret

00000c54 <__subsf3>:
     c54:	50 58       	subi	r21, 0x80	; 128

00000c56 <__addsf3>:
     c56:	bb 27       	eor	r27, r27
     c58:	aa 27       	eor	r26, r26
     c5a:	0e d0       	rcall	.+28     	; 0xc78 <__addsf3x>
     c5c:	75 c1       	rjmp	.+746    	; 0xf48 <__fp_round>
     c5e:	66 d1       	rcall	.+716    	; 0xf2c <__fp_pscA>
     c60:	30 f0       	brcs	.+12     	; 0xc6e <__addsf3+0x18>
     c62:	6b d1       	rcall	.+726    	; 0xf3a <__fp_pscB>
     c64:	20 f0       	brcs	.+8      	; 0xc6e <__addsf3+0x18>
     c66:	31 f4       	brne	.+12     	; 0xc74 <__addsf3+0x1e>
     c68:	9f 3f       	cpi	r25, 0xFF	; 255
     c6a:	11 f4       	brne	.+4      	; 0xc70 <__addsf3+0x1a>
     c6c:	1e f4       	brtc	.+6      	; 0xc74 <__addsf3+0x1e>
     c6e:	5b c1       	rjmp	.+694    	; 0xf26 <__fp_nan>
     c70:	0e f4       	brtc	.+2      	; 0xc74 <__addsf3+0x1e>
     c72:	e0 95       	com	r30
     c74:	e7 fb       	bst	r30, 7
     c76:	51 c1       	rjmp	.+674    	; 0xf1a <__fp_inf>

00000c78 <__addsf3x>:
     c78:	e9 2f       	mov	r30, r25
     c7a:	77 d1       	rcall	.+750    	; 0xf6a <__fp_split3>
     c7c:	80 f3       	brcs	.-32     	; 0xc5e <__addsf3+0x8>
     c7e:	ba 17       	cp	r27, r26
     c80:	62 07       	cpc	r22, r18
     c82:	73 07       	cpc	r23, r19
     c84:	84 07       	cpc	r24, r20
     c86:	95 07       	cpc	r25, r21
     c88:	18 f0       	brcs	.+6      	; 0xc90 <__addsf3x+0x18>
     c8a:	71 f4       	brne	.+28     	; 0xca8 <__addsf3x+0x30>
     c8c:	9e f5       	brtc	.+102    	; 0xcf4 <__addsf3x+0x7c>
     c8e:	8f c1       	rjmp	.+798    	; 0xfae <__fp_zero>
     c90:	0e f4       	brtc	.+2      	; 0xc94 <__addsf3x+0x1c>
     c92:	e0 95       	com	r30
     c94:	0b 2e       	mov	r0, r27
     c96:	ba 2f       	mov	r27, r26
     c98:	a0 2d       	mov	r26, r0
     c9a:	0b 01       	movw	r0, r22
     c9c:	b9 01       	movw	r22, r18
     c9e:	90 01       	movw	r18, r0
     ca0:	0c 01       	movw	r0, r24
     ca2:	ca 01       	movw	r24, r20
     ca4:	a0 01       	movw	r20, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	ff 27       	eor	r31, r31
     caa:	59 1b       	sub	r21, r25
     cac:	99 f0       	breq	.+38     	; 0xcd4 <__addsf3x+0x5c>
     cae:	59 3f       	cpi	r21, 0xF9	; 249
     cb0:	50 f4       	brcc	.+20     	; 0xcc6 <__addsf3x+0x4e>
     cb2:	50 3e       	cpi	r21, 0xE0	; 224
     cb4:	68 f1       	brcs	.+90     	; 0xd10 <__addsf3x+0x98>
     cb6:	1a 16       	cp	r1, r26
     cb8:	f0 40       	sbci	r31, 0x00	; 0
     cba:	a2 2f       	mov	r26, r18
     cbc:	23 2f       	mov	r18, r19
     cbe:	34 2f       	mov	r19, r20
     cc0:	44 27       	eor	r20, r20
     cc2:	58 5f       	subi	r21, 0xF8	; 248
     cc4:	f3 cf       	rjmp	.-26     	; 0xcac <__addsf3x+0x34>
     cc6:	46 95       	lsr	r20
     cc8:	37 95       	ror	r19
     cca:	27 95       	ror	r18
     ccc:	a7 95       	ror	r26
     cce:	f0 40       	sbci	r31, 0x00	; 0
     cd0:	53 95       	inc	r21
     cd2:	c9 f7       	brne	.-14     	; 0xcc6 <__addsf3x+0x4e>
     cd4:	7e f4       	brtc	.+30     	; 0xcf4 <__addsf3x+0x7c>
     cd6:	1f 16       	cp	r1, r31
     cd8:	ba 0b       	sbc	r27, r26
     cda:	62 0b       	sbc	r22, r18
     cdc:	73 0b       	sbc	r23, r19
     cde:	84 0b       	sbc	r24, r20
     ce0:	ba f0       	brmi	.+46     	; 0xd10 <__addsf3x+0x98>
     ce2:	91 50       	subi	r25, 0x01	; 1
     ce4:	a1 f0       	breq	.+40     	; 0xd0e <__addsf3x+0x96>
     ce6:	ff 0f       	add	r31, r31
     ce8:	bb 1f       	adc	r27, r27
     cea:	66 1f       	adc	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	c2 f7       	brpl	.-16     	; 0xce2 <__addsf3x+0x6a>
     cf2:	0e c0       	rjmp	.+28     	; 0xd10 <__addsf3x+0x98>
     cf4:	ba 0f       	add	r27, r26
     cf6:	62 1f       	adc	r22, r18
     cf8:	73 1f       	adc	r23, r19
     cfa:	84 1f       	adc	r24, r20
     cfc:	48 f4       	brcc	.+18     	; 0xd10 <__addsf3x+0x98>
     cfe:	87 95       	ror	r24
     d00:	77 95       	ror	r23
     d02:	67 95       	ror	r22
     d04:	b7 95       	ror	r27
     d06:	f7 95       	ror	r31
     d08:	9e 3f       	cpi	r25, 0xFE	; 254
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <__addsf3x+0x96>
     d0c:	b3 cf       	rjmp	.-154    	; 0xc74 <__addsf3+0x1e>
     d0e:	93 95       	inc	r25
     d10:	88 0f       	add	r24, r24
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__addsf3x+0x9e>
     d14:	99 27       	eor	r25, r25
     d16:	ee 0f       	add	r30, r30
     d18:	97 95       	ror	r25
     d1a:	87 95       	ror	r24
     d1c:	08 95       	ret

00000d1e <__cmpsf2>:
     d1e:	d9 d0       	rcall	.+434    	; 0xed2 <__fp_cmp>
     d20:	08 f4       	brcc	.+2      	; 0xd24 <__cmpsf2+0x6>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	08 95       	ret

00000d26 <__divsf3>:
     d26:	0c d0       	rcall	.+24     	; 0xd40 <__divsf3x>
     d28:	0f c1       	rjmp	.+542    	; 0xf48 <__fp_round>
     d2a:	07 d1       	rcall	.+526    	; 0xf3a <__fp_pscB>
     d2c:	40 f0       	brcs	.+16     	; 0xd3e <__divsf3+0x18>
     d2e:	fe d0       	rcall	.+508    	; 0xf2c <__fp_pscA>
     d30:	30 f0       	brcs	.+12     	; 0xd3e <__divsf3+0x18>
     d32:	21 f4       	brne	.+8      	; 0xd3c <__divsf3+0x16>
     d34:	5f 3f       	cpi	r21, 0xFF	; 255
     d36:	19 f0       	breq	.+6      	; 0xd3e <__divsf3+0x18>
     d38:	f0 c0       	rjmp	.+480    	; 0xf1a <__fp_inf>
     d3a:	51 11       	cpse	r21, r1
     d3c:	39 c1       	rjmp	.+626    	; 0xfb0 <__fp_szero>
     d3e:	f3 c0       	rjmp	.+486    	; 0xf26 <__fp_nan>

00000d40 <__divsf3x>:
     d40:	14 d1       	rcall	.+552    	; 0xf6a <__fp_split3>
     d42:	98 f3       	brcs	.-26     	; 0xd2a <__divsf3+0x4>

00000d44 <__divsf3_pse>:
     d44:	99 23       	and	r25, r25
     d46:	c9 f3       	breq	.-14     	; 0xd3a <__divsf3+0x14>
     d48:	55 23       	and	r21, r21
     d4a:	b1 f3       	breq	.-20     	; 0xd38 <__divsf3+0x12>
     d4c:	95 1b       	sub	r25, r21
     d4e:	55 0b       	sbc	r21, r21
     d50:	bb 27       	eor	r27, r27
     d52:	aa 27       	eor	r26, r26
     d54:	62 17       	cp	r22, r18
     d56:	73 07       	cpc	r23, r19
     d58:	84 07       	cpc	r24, r20
     d5a:	38 f0       	brcs	.+14     	; 0xd6a <__divsf3_pse+0x26>
     d5c:	9f 5f       	subi	r25, 0xFF	; 255
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	44 1f       	adc	r20, r20
     d66:	aa 1f       	adc	r26, r26
     d68:	a9 f3       	breq	.-22     	; 0xd54 <__divsf3_pse+0x10>
     d6a:	33 d0       	rcall	.+102    	; 0xdd2 <__divsf3_pse+0x8e>
     d6c:	0e 2e       	mov	r0, r30
     d6e:	3a f0       	brmi	.+14     	; 0xd7e <__divsf3_pse+0x3a>
     d70:	e0 e8       	ldi	r30, 0x80	; 128
     d72:	30 d0       	rcall	.+96     	; 0xdd4 <__divsf3_pse+0x90>
     d74:	91 50       	subi	r25, 0x01	; 1
     d76:	50 40       	sbci	r21, 0x00	; 0
     d78:	e6 95       	lsr	r30
     d7a:	00 1c       	adc	r0, r0
     d7c:	ca f7       	brpl	.-14     	; 0xd70 <__divsf3_pse+0x2c>
     d7e:	29 d0       	rcall	.+82     	; 0xdd2 <__divsf3_pse+0x8e>
     d80:	fe 2f       	mov	r31, r30
     d82:	27 d0       	rcall	.+78     	; 0xdd2 <__divsf3_pse+0x8e>
     d84:	66 0f       	add	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	88 1f       	adc	r24, r24
     d8a:	bb 1f       	adc	r27, r27
     d8c:	26 17       	cp	r18, r22
     d8e:	37 07       	cpc	r19, r23
     d90:	48 07       	cpc	r20, r24
     d92:	ab 07       	cpc	r26, r27
     d94:	b0 e8       	ldi	r27, 0x80	; 128
     d96:	09 f0       	breq	.+2      	; 0xd9a <__divsf3_pse+0x56>
     d98:	bb 0b       	sbc	r27, r27
     d9a:	80 2d       	mov	r24, r0
     d9c:	bf 01       	movw	r22, r30
     d9e:	ff 27       	eor	r31, r31
     da0:	93 58       	subi	r25, 0x83	; 131
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	2a f0       	brmi	.+10     	; 0xdb0 <__divsf3_pse+0x6c>
     da6:	9e 3f       	cpi	r25, 0xFE	; 254
     da8:	51 05       	cpc	r21, r1
     daa:	68 f0       	brcs	.+26     	; 0xdc6 <__divsf3_pse+0x82>
     dac:	b6 c0       	rjmp	.+364    	; 0xf1a <__fp_inf>
     dae:	00 c1       	rjmp	.+512    	; 0xfb0 <__fp_szero>
     db0:	5f 3f       	cpi	r21, 0xFF	; 255
     db2:	ec f3       	brlt	.-6      	; 0xdae <__divsf3_pse+0x6a>
     db4:	98 3e       	cpi	r25, 0xE8	; 232
     db6:	dc f3       	brlt	.-10     	; 0xdae <__divsf3_pse+0x6a>
     db8:	86 95       	lsr	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f7 95       	ror	r31
     dc2:	9f 5f       	subi	r25, 0xFF	; 255
     dc4:	c9 f7       	brne	.-14     	; 0xdb8 <__divsf3_pse+0x74>
     dc6:	88 0f       	add	r24, r24
     dc8:	91 1d       	adc	r25, r1
     dca:	96 95       	lsr	r25
     dcc:	87 95       	ror	r24
     dce:	97 f9       	bld	r25, 7
     dd0:	08 95       	ret
     dd2:	e1 e0       	ldi	r30, 0x01	; 1
     dd4:	66 0f       	add	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	88 1f       	adc	r24, r24
     dda:	bb 1f       	adc	r27, r27
     ddc:	62 17       	cp	r22, r18
     dde:	73 07       	cpc	r23, r19
     de0:	84 07       	cpc	r24, r20
     de2:	ba 07       	cpc	r27, r26
     de4:	20 f0       	brcs	.+8      	; 0xdee <__divsf3_pse+0xaa>
     de6:	62 1b       	sub	r22, r18
     de8:	73 0b       	sbc	r23, r19
     dea:	84 0b       	sbc	r24, r20
     dec:	ba 0b       	sbc	r27, r26
     dee:	ee 1f       	adc	r30, r30
     df0:	88 f7       	brcc	.-30     	; 0xdd4 <__divsf3_pse+0x90>
     df2:	e0 95       	com	r30
     df4:	08 95       	ret

00000df6 <__fixsfsi>:
     df6:	04 d0       	rcall	.+8      	; 0xe00 <__fixunssfsi>
     df8:	68 94       	set
     dfa:	b1 11       	cpse	r27, r1
     dfc:	d9 c0       	rjmp	.+434    	; 0xfb0 <__fp_szero>
     dfe:	08 95       	ret

00000e00 <__fixunssfsi>:
     e00:	bc d0       	rcall	.+376    	; 0xf7a <__fp_splitA>
     e02:	88 f0       	brcs	.+34     	; 0xe26 <__fixunssfsi+0x26>
     e04:	9f 57       	subi	r25, 0x7F	; 127
     e06:	90 f0       	brcs	.+36     	; 0xe2c <__fixunssfsi+0x2c>
     e08:	b9 2f       	mov	r27, r25
     e0a:	99 27       	eor	r25, r25
     e0c:	b7 51       	subi	r27, 0x17	; 23
     e0e:	a0 f0       	brcs	.+40     	; 0xe38 <__fixunssfsi+0x38>
     e10:	d1 f0       	breq	.+52     	; 0xe46 <__fixunssfsi+0x46>
     e12:	66 0f       	add	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	88 1f       	adc	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	1a f0       	brmi	.+6      	; 0xe22 <__fixunssfsi+0x22>
     e1c:	ba 95       	dec	r27
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <__fixunssfsi+0x12>
     e20:	12 c0       	rjmp	.+36     	; 0xe46 <__fixunssfsi+0x46>
     e22:	b1 30       	cpi	r27, 0x01	; 1
     e24:	81 f0       	breq	.+32     	; 0xe46 <__fixunssfsi+0x46>
     e26:	c3 d0       	rcall	.+390    	; 0xfae <__fp_zero>
     e28:	b1 e0       	ldi	r27, 0x01	; 1
     e2a:	08 95       	ret
     e2c:	c0 c0       	rjmp	.+384    	; 0xfae <__fp_zero>
     e2e:	67 2f       	mov	r22, r23
     e30:	78 2f       	mov	r23, r24
     e32:	88 27       	eor	r24, r24
     e34:	b8 5f       	subi	r27, 0xF8	; 248
     e36:	39 f0       	breq	.+14     	; 0xe46 <__fixunssfsi+0x46>
     e38:	b9 3f       	cpi	r27, 0xF9	; 249
     e3a:	cc f3       	brlt	.-14     	; 0xe2e <__fixunssfsi+0x2e>
     e3c:	86 95       	lsr	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b3 95       	inc	r27
     e44:	d9 f7       	brne	.-10     	; 0xe3c <__fixunssfsi+0x3c>
     e46:	3e f4       	brtc	.+14     	; 0xe56 <__fixunssfsi+0x56>
     e48:	90 95       	com	r25
     e4a:	80 95       	com	r24
     e4c:	70 95       	com	r23
     e4e:	61 95       	neg	r22
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	08 95       	ret

00000e58 <__floatunsisf>:
     e58:	e8 94       	clt
     e5a:	09 c0       	rjmp	.+18     	; 0xe6e <__floatsisf+0x12>

00000e5c <__floatsisf>:
     e5c:	97 fb       	bst	r25, 7
     e5e:	3e f4       	brtc	.+14     	; 0xe6e <__floatsisf+0x12>
     e60:	90 95       	com	r25
     e62:	80 95       	com	r24
     e64:	70 95       	com	r23
     e66:	61 95       	neg	r22
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	8f 4f       	sbci	r24, 0xFF	; 255
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	99 23       	and	r25, r25
     e70:	a9 f0       	breq	.+42     	; 0xe9c <__floatsisf+0x40>
     e72:	f9 2f       	mov	r31, r25
     e74:	96 e9       	ldi	r25, 0x96	; 150
     e76:	bb 27       	eor	r27, r27
     e78:	93 95       	inc	r25
     e7a:	f6 95       	lsr	r31
     e7c:	87 95       	ror	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b7 95       	ror	r27
     e84:	f1 11       	cpse	r31, r1
     e86:	f8 cf       	rjmp	.-16     	; 0xe78 <__floatsisf+0x1c>
     e88:	fa f4       	brpl	.+62     	; 0xec8 <__floatsisf+0x6c>
     e8a:	bb 0f       	add	r27, r27
     e8c:	11 f4       	brne	.+4      	; 0xe92 <__floatsisf+0x36>
     e8e:	60 ff       	sbrs	r22, 0
     e90:	1b c0       	rjmp	.+54     	; 0xec8 <__floatsisf+0x6c>
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	8f 4f       	sbci	r24, 0xFF	; 255
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	16 c0       	rjmp	.+44     	; 0xec8 <__floatsisf+0x6c>
     e9c:	88 23       	and	r24, r24
     e9e:	11 f0       	breq	.+4      	; 0xea4 <__floatsisf+0x48>
     ea0:	96 e9       	ldi	r25, 0x96	; 150
     ea2:	11 c0       	rjmp	.+34     	; 0xec6 <__floatsisf+0x6a>
     ea4:	77 23       	and	r23, r23
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__floatsisf+0x54>
     ea8:	9e e8       	ldi	r25, 0x8E	; 142
     eaa:	87 2f       	mov	r24, r23
     eac:	76 2f       	mov	r23, r22
     eae:	05 c0       	rjmp	.+10     	; 0xeba <__floatsisf+0x5e>
     eb0:	66 23       	and	r22, r22
     eb2:	71 f0       	breq	.+28     	; 0xed0 <__floatsisf+0x74>
     eb4:	96 e8       	ldi	r25, 0x86	; 134
     eb6:	86 2f       	mov	r24, r22
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	2a f0       	brmi	.+10     	; 0xec8 <__floatsisf+0x6c>
     ebe:	9a 95       	dec	r25
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	88 1f       	adc	r24, r24
     ec6:	da f7       	brpl	.-10     	; 0xebe <__floatsisf+0x62>
     ec8:	88 0f       	add	r24, r24
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	97 f9       	bld	r25, 7
     ed0:	08 95       	ret

00000ed2 <__fp_cmp>:
     ed2:	99 0f       	add	r25, r25
     ed4:	00 08       	sbc	r0, r0
     ed6:	55 0f       	add	r21, r21
     ed8:	aa 0b       	sbc	r26, r26
     eda:	e0 e8       	ldi	r30, 0x80	; 128
     edc:	fe ef       	ldi	r31, 0xFE	; 254
     ede:	16 16       	cp	r1, r22
     ee0:	17 06       	cpc	r1, r23
     ee2:	e8 07       	cpc	r30, r24
     ee4:	f9 07       	cpc	r31, r25
     ee6:	c0 f0       	brcs	.+48     	; 0xf18 <__fp_cmp+0x46>
     ee8:	12 16       	cp	r1, r18
     eea:	13 06       	cpc	r1, r19
     eec:	e4 07       	cpc	r30, r20
     eee:	f5 07       	cpc	r31, r21
     ef0:	98 f0       	brcs	.+38     	; 0xf18 <__fp_cmp+0x46>
     ef2:	62 1b       	sub	r22, r18
     ef4:	73 0b       	sbc	r23, r19
     ef6:	84 0b       	sbc	r24, r20
     ef8:	95 0b       	sbc	r25, r21
     efa:	39 f4       	brne	.+14     	; 0xf0a <__fp_cmp+0x38>
     efc:	0a 26       	eor	r0, r26
     efe:	61 f0       	breq	.+24     	; 0xf18 <__fp_cmp+0x46>
     f00:	23 2b       	or	r18, r19
     f02:	24 2b       	or	r18, r20
     f04:	25 2b       	or	r18, r21
     f06:	21 f4       	brne	.+8      	; 0xf10 <__fp_cmp+0x3e>
     f08:	08 95       	ret
     f0a:	0a 26       	eor	r0, r26
     f0c:	09 f4       	brne	.+2      	; 0xf10 <__fp_cmp+0x3e>
     f0e:	a1 40       	sbci	r26, 0x01	; 1
     f10:	a6 95       	lsr	r26
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	81 1d       	adc	r24, r1
     f16:	81 1d       	adc	r24, r1
     f18:	08 95       	ret

00000f1a <__fp_inf>:
     f1a:	97 f9       	bld	r25, 7
     f1c:	9f 67       	ori	r25, 0x7F	; 127
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	08 95       	ret

00000f26 <__fp_nan>:
     f26:	9f ef       	ldi	r25, 0xFF	; 255
     f28:	80 ec       	ldi	r24, 0xC0	; 192
     f2a:	08 95       	ret

00000f2c <__fp_pscA>:
     f2c:	00 24       	eor	r0, r0
     f2e:	0a 94       	dec	r0
     f30:	16 16       	cp	r1, r22
     f32:	17 06       	cpc	r1, r23
     f34:	18 06       	cpc	r1, r24
     f36:	09 06       	cpc	r0, r25
     f38:	08 95       	ret

00000f3a <__fp_pscB>:
     f3a:	00 24       	eor	r0, r0
     f3c:	0a 94       	dec	r0
     f3e:	12 16       	cp	r1, r18
     f40:	13 06       	cpc	r1, r19
     f42:	14 06       	cpc	r1, r20
     f44:	05 06       	cpc	r0, r21
     f46:	08 95       	ret

00000f48 <__fp_round>:
     f48:	09 2e       	mov	r0, r25
     f4a:	03 94       	inc	r0
     f4c:	00 0c       	add	r0, r0
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__fp_round+0xc>
     f50:	88 23       	and	r24, r24
     f52:	52 f0       	brmi	.+20     	; 0xf68 <__fp_round+0x20>
     f54:	bb 0f       	add	r27, r27
     f56:	40 f4       	brcc	.+16     	; 0xf68 <__fp_round+0x20>
     f58:	bf 2b       	or	r27, r31
     f5a:	11 f4       	brne	.+4      	; 0xf60 <__fp_round+0x18>
     f5c:	60 ff       	sbrs	r22, 0
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <__fp_round+0x20>
     f60:	6f 5f       	subi	r22, 0xFF	; 255
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	8f 4f       	sbci	r24, 0xFF	; 255
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	08 95       	ret

00000f6a <__fp_split3>:
     f6a:	57 fd       	sbrc	r21, 7
     f6c:	90 58       	subi	r25, 0x80	; 128
     f6e:	44 0f       	add	r20, r20
     f70:	55 1f       	adc	r21, r21
     f72:	59 f0       	breq	.+22     	; 0xf8a <__fp_splitA+0x10>
     f74:	5f 3f       	cpi	r21, 0xFF	; 255
     f76:	71 f0       	breq	.+28     	; 0xf94 <__fp_splitA+0x1a>
     f78:	47 95       	ror	r20

00000f7a <__fp_splitA>:
     f7a:	88 0f       	add	r24, r24
     f7c:	97 fb       	bst	r25, 7
     f7e:	99 1f       	adc	r25, r25
     f80:	61 f0       	breq	.+24     	; 0xf9a <__fp_splitA+0x20>
     f82:	9f 3f       	cpi	r25, 0xFF	; 255
     f84:	79 f0       	breq	.+30     	; 0xfa4 <__fp_splitA+0x2a>
     f86:	87 95       	ror	r24
     f88:	08 95       	ret
     f8a:	12 16       	cp	r1, r18
     f8c:	13 06       	cpc	r1, r19
     f8e:	14 06       	cpc	r1, r20
     f90:	55 1f       	adc	r21, r21
     f92:	f2 cf       	rjmp	.-28     	; 0xf78 <__fp_split3+0xe>
     f94:	46 95       	lsr	r20
     f96:	f1 df       	rcall	.-30     	; 0xf7a <__fp_splitA>
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <__fp_splitA+0x30>
     f9a:	16 16       	cp	r1, r22
     f9c:	17 06       	cpc	r1, r23
     f9e:	18 06       	cpc	r1, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	f1 cf       	rjmp	.-30     	; 0xf86 <__fp_splitA+0xc>
     fa4:	86 95       	lsr	r24
     fa6:	71 05       	cpc	r23, r1
     fa8:	61 05       	cpc	r22, r1
     faa:	08 94       	sec
     fac:	08 95       	ret

00000fae <__fp_zero>:
     fae:	e8 94       	clt

00000fb0 <__fp_szero>:
     fb0:	bb 27       	eor	r27, r27
     fb2:	66 27       	eor	r22, r22
     fb4:	77 27       	eor	r23, r23
     fb6:	cb 01       	movw	r24, r22
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret

00000fbc <__mulsf3>:
     fbc:	0b d0       	rcall	.+22     	; 0xfd4 <__mulsf3x>
     fbe:	c4 cf       	rjmp	.-120    	; 0xf48 <__fp_round>
     fc0:	b5 df       	rcall	.-150    	; 0xf2c <__fp_pscA>
     fc2:	28 f0       	brcs	.+10     	; 0xfce <__mulsf3+0x12>
     fc4:	ba df       	rcall	.-140    	; 0xf3a <__fp_pscB>
     fc6:	18 f0       	brcs	.+6      	; 0xfce <__mulsf3+0x12>
     fc8:	95 23       	and	r25, r21
     fca:	09 f0       	breq	.+2      	; 0xfce <__mulsf3+0x12>
     fcc:	a6 cf       	rjmp	.-180    	; 0xf1a <__fp_inf>
     fce:	ab cf       	rjmp	.-170    	; 0xf26 <__fp_nan>
     fd0:	11 24       	eor	r1, r1
     fd2:	ee cf       	rjmp	.-36     	; 0xfb0 <__fp_szero>

00000fd4 <__mulsf3x>:
     fd4:	ca df       	rcall	.-108    	; 0xf6a <__fp_split3>
     fd6:	a0 f3       	brcs	.-24     	; 0xfc0 <__mulsf3+0x4>

00000fd8 <__mulsf3_pse>:
     fd8:	95 9f       	mul	r25, r21
     fda:	d1 f3       	breq	.-12     	; 0xfd0 <__mulsf3+0x14>
     fdc:	95 0f       	add	r25, r21
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	55 1f       	adc	r21, r21
     fe2:	62 9f       	mul	r22, r18
     fe4:	f0 01       	movw	r30, r0
     fe6:	72 9f       	mul	r23, r18
     fe8:	bb 27       	eor	r27, r27
     fea:	f0 0d       	add	r31, r0
     fec:	b1 1d       	adc	r27, r1
     fee:	63 9f       	mul	r22, r19
     ff0:	aa 27       	eor	r26, r26
     ff2:	f0 0d       	add	r31, r0
     ff4:	b1 1d       	adc	r27, r1
     ff6:	aa 1f       	adc	r26, r26
     ff8:	64 9f       	mul	r22, r20
     ffa:	66 27       	eor	r22, r22
     ffc:	b0 0d       	add	r27, r0
     ffe:	a1 1d       	adc	r26, r1
    1000:	66 1f       	adc	r22, r22
    1002:	82 9f       	mul	r24, r18
    1004:	22 27       	eor	r18, r18
    1006:	b0 0d       	add	r27, r0
    1008:	a1 1d       	adc	r26, r1
    100a:	62 1f       	adc	r22, r18
    100c:	73 9f       	mul	r23, r19
    100e:	b0 0d       	add	r27, r0
    1010:	a1 1d       	adc	r26, r1
    1012:	62 1f       	adc	r22, r18
    1014:	83 9f       	mul	r24, r19
    1016:	a0 0d       	add	r26, r0
    1018:	61 1d       	adc	r22, r1
    101a:	22 1f       	adc	r18, r18
    101c:	74 9f       	mul	r23, r20
    101e:	33 27       	eor	r19, r19
    1020:	a0 0d       	add	r26, r0
    1022:	61 1d       	adc	r22, r1
    1024:	23 1f       	adc	r18, r19
    1026:	84 9f       	mul	r24, r20
    1028:	60 0d       	add	r22, r0
    102a:	21 1d       	adc	r18, r1
    102c:	82 2f       	mov	r24, r18
    102e:	76 2f       	mov	r23, r22
    1030:	6a 2f       	mov	r22, r26
    1032:	11 24       	eor	r1, r1
    1034:	9f 57       	subi	r25, 0x7F	; 127
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	8a f0       	brmi	.+34     	; 0x105c <__mulsf3_pse+0x84>
    103a:	e1 f0       	breq	.+56     	; 0x1074 <__mulsf3_pse+0x9c>
    103c:	88 23       	and	r24, r24
    103e:	4a f0       	brmi	.+18     	; 0x1052 <__mulsf3_pse+0x7a>
    1040:	ee 0f       	add	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	bb 1f       	adc	r27, r27
    1046:	66 1f       	adc	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	91 50       	subi	r25, 0x01	; 1
    104e:	50 40       	sbci	r21, 0x00	; 0
    1050:	a9 f7       	brne	.-22     	; 0x103c <__mulsf3_pse+0x64>
    1052:	9e 3f       	cpi	r25, 0xFE	; 254
    1054:	51 05       	cpc	r21, r1
    1056:	70 f0       	brcs	.+28     	; 0x1074 <__mulsf3_pse+0x9c>
    1058:	60 cf       	rjmp	.-320    	; 0xf1a <__fp_inf>
    105a:	aa cf       	rjmp	.-172    	; 0xfb0 <__fp_szero>
    105c:	5f 3f       	cpi	r21, 0xFF	; 255
    105e:	ec f3       	brlt	.-6      	; 0x105a <__mulsf3_pse+0x82>
    1060:	98 3e       	cpi	r25, 0xE8	; 232
    1062:	dc f3       	brlt	.-10     	; 0x105a <__mulsf3_pse+0x82>
    1064:	86 95       	lsr	r24
    1066:	77 95       	ror	r23
    1068:	67 95       	ror	r22
    106a:	b7 95       	ror	r27
    106c:	f7 95       	ror	r31
    106e:	e7 95       	ror	r30
    1070:	9f 5f       	subi	r25, 0xFF	; 255
    1072:	c1 f7       	brne	.-16     	; 0x1064 <__mulsf3_pse+0x8c>
    1074:	fe 2b       	or	r31, r30
    1076:	88 0f       	add	r24, r24
    1078:	91 1d       	adc	r25, r1
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret

00001082 <__mulsi3>:
    1082:	62 9f       	mul	r22, r18
    1084:	d0 01       	movw	r26, r0
    1086:	73 9f       	mul	r23, r19
    1088:	f0 01       	movw	r30, r0
    108a:	82 9f       	mul	r24, r18
    108c:	e0 0d       	add	r30, r0
    108e:	f1 1d       	adc	r31, r1
    1090:	64 9f       	mul	r22, r20
    1092:	e0 0d       	add	r30, r0
    1094:	f1 1d       	adc	r31, r1
    1096:	92 9f       	mul	r25, r18
    1098:	f0 0d       	add	r31, r0
    109a:	83 9f       	mul	r24, r19
    109c:	f0 0d       	add	r31, r0
    109e:	74 9f       	mul	r23, r20
    10a0:	f0 0d       	add	r31, r0
    10a2:	65 9f       	mul	r22, r21
    10a4:	f0 0d       	add	r31, r0
    10a6:	99 27       	eor	r25, r25
    10a8:	72 9f       	mul	r23, r18
    10aa:	b0 0d       	add	r27, r0
    10ac:	e1 1d       	adc	r30, r1
    10ae:	f9 1f       	adc	r31, r25
    10b0:	63 9f       	mul	r22, r19
    10b2:	b0 0d       	add	r27, r0
    10b4:	e1 1d       	adc	r30, r1
    10b6:	f9 1f       	adc	r31, r25
    10b8:	bd 01       	movw	r22, r26
    10ba:	cf 01       	movw	r24, r30
    10bc:	11 24       	eor	r1, r1
    10be:	08 95       	ret

000010c0 <__divmodhi4>:
    10c0:	97 fb       	bst	r25, 7
    10c2:	09 2e       	mov	r0, r25
    10c4:	07 26       	eor	r0, r23
    10c6:	0a d0       	rcall	.+20     	; 0x10dc <__divmodhi4_neg1>
    10c8:	77 fd       	sbrc	r23, 7
    10ca:	04 d0       	rcall	.+8      	; 0x10d4 <__divmodhi4_neg2>
    10cc:	49 d0       	rcall	.+146    	; 0x1160 <__udivmodhi4>
    10ce:	06 d0       	rcall	.+12     	; 0x10dc <__divmodhi4_neg1>
    10d0:	00 20       	and	r0, r0
    10d2:	1a f4       	brpl	.+6      	; 0x10da <__divmodhi4_exit>

000010d4 <__divmodhi4_neg2>:
    10d4:	70 95       	com	r23
    10d6:	61 95       	neg	r22
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255

000010da <__divmodhi4_exit>:
    10da:	08 95       	ret

000010dc <__divmodhi4_neg1>:
    10dc:	f6 f7       	brtc	.-4      	; 0x10da <__divmodhi4_exit>
    10de:	90 95       	com	r25
    10e0:	81 95       	neg	r24
    10e2:	9f 4f       	sbci	r25, 0xFF	; 255
    10e4:	08 95       	ret

000010e6 <__udivmodsi4>:
    10e6:	a1 e2       	ldi	r26, 0x21	; 33
    10e8:	1a 2e       	mov	r1, r26
    10ea:	aa 1b       	sub	r26, r26
    10ec:	bb 1b       	sub	r27, r27
    10ee:	fd 01       	movw	r30, r26
    10f0:	0d c0       	rjmp	.+26     	; 0x110c <__udivmodsi4_ep>

000010f2 <__udivmodsi4_loop>:
    10f2:	aa 1f       	adc	r26, r26
    10f4:	bb 1f       	adc	r27, r27
    10f6:	ee 1f       	adc	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	a2 17       	cp	r26, r18
    10fc:	b3 07       	cpc	r27, r19
    10fe:	e4 07       	cpc	r30, r20
    1100:	f5 07       	cpc	r31, r21
    1102:	20 f0       	brcs	.+8      	; 0x110c <__udivmodsi4_ep>
    1104:	a2 1b       	sub	r26, r18
    1106:	b3 0b       	sbc	r27, r19
    1108:	e4 0b       	sbc	r30, r20
    110a:	f5 0b       	sbc	r31, r21

0000110c <__udivmodsi4_ep>:
    110c:	66 1f       	adc	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	1a 94       	dec	r1
    1116:	69 f7       	brne	.-38     	; 0x10f2 <__udivmodsi4_loop>
    1118:	60 95       	com	r22
    111a:	70 95       	com	r23
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	9b 01       	movw	r18, r22
    1122:	ac 01       	movw	r20, r24
    1124:	bd 01       	movw	r22, r26
    1126:	cf 01       	movw	r24, r30
    1128:	08 95       	ret

0000112a <__divmodsi4>:
    112a:	97 fb       	bst	r25, 7
    112c:	09 2e       	mov	r0, r25
    112e:	05 26       	eor	r0, r21
    1130:	0e d0       	rcall	.+28     	; 0x114e <__divmodsi4_neg1>
    1132:	57 fd       	sbrc	r21, 7
    1134:	04 d0       	rcall	.+8      	; 0x113e <__divmodsi4_neg2>
    1136:	d7 df       	rcall	.-82     	; 0x10e6 <__udivmodsi4>
    1138:	0a d0       	rcall	.+20     	; 0x114e <__divmodsi4_neg1>
    113a:	00 1c       	adc	r0, r0
    113c:	38 f4       	brcc	.+14     	; 0x114c <__divmodsi4_exit>

0000113e <__divmodsi4_neg2>:
    113e:	50 95       	com	r21
    1140:	40 95       	com	r20
    1142:	30 95       	com	r19
    1144:	21 95       	neg	r18
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	4f 4f       	sbci	r20, 0xFF	; 255
    114a:	5f 4f       	sbci	r21, 0xFF	; 255

0000114c <__divmodsi4_exit>:
    114c:	08 95       	ret

0000114e <__divmodsi4_neg1>:
    114e:	f6 f7       	brtc	.-4      	; 0x114c <__divmodsi4_exit>
    1150:	90 95       	com	r25
    1152:	80 95       	com	r24
    1154:	70 95       	com	r23
    1156:	61 95       	neg	r22
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__udivmodhi4>:
    1160:	aa 1b       	sub	r26, r26
    1162:	bb 1b       	sub	r27, r27
    1164:	51 e1       	ldi	r21, 0x11	; 17
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <__udivmodhi4_ep>

00001168 <__udivmodhi4_loop>:
    1168:	aa 1f       	adc	r26, r26
    116a:	bb 1f       	adc	r27, r27
    116c:	a6 17       	cp	r26, r22
    116e:	b7 07       	cpc	r27, r23
    1170:	10 f0       	brcs	.+4      	; 0x1176 <__udivmodhi4_ep>
    1172:	a6 1b       	sub	r26, r22
    1174:	b7 0b       	sbc	r27, r23

00001176 <__udivmodhi4_ep>:
    1176:	88 1f       	adc	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	5a 95       	dec	r21
    117c:	a9 f7       	brne	.-22     	; 0x1168 <__udivmodhi4_loop>
    117e:	80 95       	com	r24
    1180:	90 95       	com	r25
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	08 95       	ret

00001188 <__tablejump2__>:
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31

0000118c <__tablejump__>:
    118c:	05 90       	lpm	r0, Z+
    118e:	f4 91       	lpm	r31, Z+
    1190:	e0 2d       	mov	r30, r0
    1192:	09 94       	ijmp

00001194 <malloc>:
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	91 05       	cpc	r25, r1
    119c:	10 f4       	brcc	.+4      	; 0x11a2 <malloc+0xe>
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	e0 91 2b 02 	lds	r30, 0x022B
    11a6:	f0 91 2c 02 	lds	r31, 0x022C
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	26 c0       	rjmp	.+76     	; 0x1200 <malloc+0x6c>
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	68 17       	cp	r22, r24
    11ba:	79 07       	cpc	r23, r25
    11bc:	e0 f0       	brcs	.+56     	; 0x11f6 <malloc+0x62>
    11be:	68 17       	cp	r22, r24
    11c0:	79 07       	cpc	r23, r25
    11c2:	81 f4       	brne	.+32     	; 0x11e4 <malloc+0x50>
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	21 15       	cp	r18, r1
    11ca:	31 05       	cpc	r19, r1
    11cc:	31 f0       	breq	.+12     	; 0x11da <malloc+0x46>
    11ce:	d9 01       	movw	r26, r18
    11d0:	13 96       	adiw	r26, 0x03	; 3
    11d2:	9c 93       	st	X, r25
    11d4:	8e 93       	st	-X, r24
    11d6:	12 97       	sbiw	r26, 0x02	; 2
    11d8:	2b c0       	rjmp	.+86     	; 0x1230 <malloc+0x9c>
    11da:	90 93 2c 02 	sts	0x022C, r25
    11de:	80 93 2b 02 	sts	0x022B, r24
    11e2:	26 c0       	rjmp	.+76     	; 0x1230 <malloc+0x9c>
    11e4:	41 15       	cp	r20, r1
    11e6:	51 05       	cpc	r21, r1
    11e8:	19 f0       	breq	.+6      	; 0x11f0 <malloc+0x5c>
    11ea:	64 17       	cp	r22, r20
    11ec:	75 07       	cpc	r23, r21
    11ee:	18 f4       	brcc	.+6      	; 0x11f6 <malloc+0x62>
    11f0:	ab 01       	movw	r20, r22
    11f2:	e9 01       	movw	r28, r18
    11f4:	df 01       	movw	r26, r30
    11f6:	9f 01       	movw	r18, r30
    11f8:	72 81       	ldd	r23, Z+2	; 0x02
    11fa:	63 81       	ldd	r22, Z+3	; 0x03
    11fc:	e7 2f       	mov	r30, r23
    11fe:	f6 2f       	mov	r31, r22
    1200:	30 97       	sbiw	r30, 0x00	; 0
    1202:	c1 f6       	brne	.-80     	; 0x11b4 <malloc+0x20>
    1204:	41 15       	cp	r20, r1
    1206:	51 05       	cpc	r21, r1
    1208:	01 f1       	breq	.+64     	; 0x124a <malloc+0xb6>
    120a:	48 1b       	sub	r20, r24
    120c:	59 0b       	sbc	r21, r25
    120e:	44 30       	cpi	r20, 0x04	; 4
    1210:	51 05       	cpc	r21, r1
    1212:	80 f4       	brcc	.+32     	; 0x1234 <malloc+0xa0>
    1214:	12 96       	adiw	r26, 0x02	; 2
    1216:	8d 91       	ld	r24, X+
    1218:	9c 91       	ld	r25, X
    121a:	13 97       	sbiw	r26, 0x03	; 3
    121c:	20 97       	sbiw	r28, 0x00	; 0
    121e:	19 f0       	breq	.+6      	; 0x1226 <malloc+0x92>
    1220:	9b 83       	std	Y+3, r25	; 0x03
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	04 c0       	rjmp	.+8      	; 0x122e <malloc+0x9a>
    1226:	90 93 2c 02 	sts	0x022C, r25
    122a:	80 93 2b 02 	sts	0x022B, r24
    122e:	fd 01       	movw	r30, r26
    1230:	32 96       	adiw	r30, 0x02	; 2
    1232:	46 c0       	rjmp	.+140    	; 0x12c0 <malloc+0x12c>
    1234:	fd 01       	movw	r30, r26
    1236:	e4 0f       	add	r30, r20
    1238:	f5 1f       	adc	r31, r21
    123a:	81 93       	st	Z+, r24
    123c:	91 93       	st	Z+, r25
    123e:	42 50       	subi	r20, 0x02	; 2
    1240:	50 40       	sbci	r21, 0x00	; 0
    1242:	11 96       	adiw	r26, 0x01	; 1
    1244:	5c 93       	st	X, r21
    1246:	4e 93       	st	-X, r20
    1248:	3b c0       	rjmp	.+118    	; 0x12c0 <malloc+0x12c>
    124a:	20 91 29 02 	lds	r18, 0x0229
    124e:	30 91 2a 02 	lds	r19, 0x022A
    1252:	21 15       	cp	r18, r1
    1254:	31 05       	cpc	r19, r1
    1256:	41 f4       	brne	.+16     	; 0x1268 <malloc+0xd4>
    1258:	20 91 2a 01 	lds	r18, 0x012A
    125c:	30 91 2b 01 	lds	r19, 0x012B
    1260:	30 93 2a 02 	sts	0x022A, r19
    1264:	20 93 29 02 	sts	0x0229, r18
    1268:	20 91 2c 01 	lds	r18, 0x012C
    126c:	30 91 2d 01 	lds	r19, 0x012D
    1270:	21 15       	cp	r18, r1
    1272:	31 05       	cpc	r19, r1
    1274:	41 f4       	brne	.+16     	; 0x1286 <malloc+0xf2>
    1276:	2d b7       	in	r18, 0x3d	; 61
    1278:	3e b7       	in	r19, 0x3e	; 62
    127a:	40 91 28 01 	lds	r20, 0x0128
    127e:	50 91 29 01 	lds	r21, 0x0129
    1282:	24 1b       	sub	r18, r20
    1284:	35 0b       	sbc	r19, r21
    1286:	e0 91 29 02 	lds	r30, 0x0229
    128a:	f0 91 2a 02 	lds	r31, 0x022A
    128e:	e2 17       	cp	r30, r18
    1290:	f3 07       	cpc	r31, r19
    1292:	a0 f4       	brcc	.+40     	; 0x12bc <malloc+0x128>
    1294:	2e 1b       	sub	r18, r30
    1296:	3f 0b       	sbc	r19, r31
    1298:	28 17       	cp	r18, r24
    129a:	39 07       	cpc	r19, r25
    129c:	78 f0       	brcs	.+30     	; 0x12bc <malloc+0x128>
    129e:	ac 01       	movw	r20, r24
    12a0:	4e 5f       	subi	r20, 0xFE	; 254
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255
    12a4:	24 17       	cp	r18, r20
    12a6:	35 07       	cpc	r19, r21
    12a8:	48 f0       	brcs	.+18     	; 0x12bc <malloc+0x128>
    12aa:	4e 0f       	add	r20, r30
    12ac:	5f 1f       	adc	r21, r31
    12ae:	50 93 2a 02 	sts	0x022A, r21
    12b2:	40 93 29 02 	sts	0x0229, r20
    12b6:	81 93       	st	Z+, r24
    12b8:	91 93       	st	Z+, r25
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <malloc+0x12c>
    12bc:	e0 e0       	ldi	r30, 0x00	; 0
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	cf 01       	movw	r24, r30
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <free>:
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <free+0xa>
    12d0:	91 c0       	rjmp	.+290    	; 0x13f4 <free+0x12c>
    12d2:	fc 01       	movw	r30, r24
    12d4:	32 97       	sbiw	r30, 0x02	; 2
    12d6:	13 82       	std	Z+3, r1	; 0x03
    12d8:	12 82       	std	Z+2, r1	; 0x02
    12da:	60 91 2b 02 	lds	r22, 0x022B
    12de:	70 91 2c 02 	lds	r23, 0x022C
    12e2:	61 15       	cp	r22, r1
    12e4:	71 05       	cpc	r23, r1
    12e6:	81 f4       	brne	.+32     	; 0x1308 <free+0x40>
    12e8:	20 81       	ld	r18, Z
    12ea:	31 81       	ldd	r19, Z+1	; 0x01
    12ec:	28 0f       	add	r18, r24
    12ee:	39 1f       	adc	r19, r25
    12f0:	80 91 29 02 	lds	r24, 0x0229
    12f4:	90 91 2a 02 	lds	r25, 0x022A
    12f8:	82 17       	cp	r24, r18
    12fa:	93 07       	cpc	r25, r19
    12fc:	99 f5       	brne	.+102    	; 0x1364 <free+0x9c>
    12fe:	f0 93 2a 02 	sts	0x022A, r31
    1302:	e0 93 29 02 	sts	0x0229, r30
    1306:	76 c0       	rjmp	.+236    	; 0x13f4 <free+0x12c>
    1308:	db 01       	movw	r26, r22
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <free+0x4c>
    1310:	cd 01       	movw	r24, r26
    1312:	d9 01       	movw	r26, r18
    1314:	ae 17       	cp	r26, r30
    1316:	bf 07       	cpc	r27, r31
    1318:	48 f4       	brcc	.+18     	; 0x132c <free+0x64>
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	2d 91       	ld	r18, X+
    131e:	3c 91       	ld	r19, X
    1320:	13 97       	sbiw	r26, 0x03	; 3
    1322:	21 15       	cp	r18, r1
    1324:	31 05       	cpc	r19, r1
    1326:	a1 f7       	brne	.-24     	; 0x1310 <free+0x48>
    1328:	cd 01       	movw	r24, r26
    132a:	21 c0       	rjmp	.+66     	; 0x136e <free+0xa6>
    132c:	b3 83       	std	Z+3, r27	; 0x03
    132e:	a2 83       	std	Z+2, r26	; 0x02
    1330:	ef 01       	movw	r28, r30
    1332:	49 91       	ld	r20, Y+
    1334:	59 91       	ld	r21, Y+
    1336:	9e 01       	movw	r18, r28
    1338:	24 0f       	add	r18, r20
    133a:	35 1f       	adc	r19, r21
    133c:	a2 17       	cp	r26, r18
    133e:	b3 07       	cpc	r27, r19
    1340:	79 f4       	brne	.+30     	; 0x1360 <free+0x98>
    1342:	2d 91       	ld	r18, X+
    1344:	3c 91       	ld	r19, X
    1346:	11 97       	sbiw	r26, 0x01	; 1
    1348:	24 0f       	add	r18, r20
    134a:	35 1f       	adc	r19, r21
    134c:	2e 5f       	subi	r18, 0xFE	; 254
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	31 83       	std	Z+1, r19	; 0x01
    1352:	20 83       	st	Z, r18
    1354:	12 96       	adiw	r26, 0x02	; 2
    1356:	2d 91       	ld	r18, X+
    1358:	3c 91       	ld	r19, X
    135a:	13 97       	sbiw	r26, 0x03	; 3
    135c:	33 83       	std	Z+3, r19	; 0x03
    135e:	22 83       	std	Z+2, r18	; 0x02
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	29 f4       	brne	.+10     	; 0x136e <free+0xa6>
    1364:	f0 93 2c 02 	sts	0x022C, r31
    1368:	e0 93 2b 02 	sts	0x022B, r30
    136c:	43 c0       	rjmp	.+134    	; 0x13f4 <free+0x12c>
    136e:	dc 01       	movw	r26, r24
    1370:	13 96       	adiw	r26, 0x03	; 3
    1372:	fc 93       	st	X, r31
    1374:	ee 93       	st	-X, r30
    1376:	12 97       	sbiw	r26, 0x02	; 2
    1378:	4d 91       	ld	r20, X+
    137a:	5d 91       	ld	r21, X+
    137c:	a4 0f       	add	r26, r20
    137e:	b5 1f       	adc	r27, r21
    1380:	ea 17       	cp	r30, r26
    1382:	fb 07       	cpc	r31, r27
    1384:	69 f4       	brne	.+26     	; 0x13a0 <free+0xd8>
    1386:	20 81       	ld	r18, Z
    1388:	31 81       	ldd	r19, Z+1	; 0x01
    138a:	24 0f       	add	r18, r20
    138c:	35 1f       	adc	r19, r21
    138e:	2e 5f       	subi	r18, 0xFE	; 254
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	ec 01       	movw	r28, r24
    1394:	39 83       	std	Y+1, r19	; 0x01
    1396:	28 83       	st	Y, r18
    1398:	22 81       	ldd	r18, Z+2	; 0x02
    139a:	33 81       	ldd	r19, Z+3	; 0x03
    139c:	3b 83       	std	Y+3, r19	; 0x03
    139e:	2a 83       	std	Y+2, r18	; 0x02
    13a0:	e0 e0       	ldi	r30, 0x00	; 0
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <free+0xe2>
    13a6:	fb 01       	movw	r30, r22
    13a8:	bc 01       	movw	r22, r24
    13aa:	db 01       	movw	r26, r22
    13ac:	12 96       	adiw	r26, 0x02	; 2
    13ae:	8d 91       	ld	r24, X+
    13b0:	9c 91       	ld	r25, X
    13b2:	13 97       	sbiw	r26, 0x03	; 3
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	b9 f7       	brne	.-18     	; 0x13a6 <free+0xde>
    13b8:	9b 01       	movw	r18, r22
    13ba:	2e 5f       	subi	r18, 0xFE	; 254
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	8d 91       	ld	r24, X+
    13c0:	9c 91       	ld	r25, X
    13c2:	11 97       	sbiw	r26, 0x01	; 1
    13c4:	82 0f       	add	r24, r18
    13c6:	93 1f       	adc	r25, r19
    13c8:	40 91 29 02 	lds	r20, 0x0229
    13cc:	50 91 2a 02 	lds	r21, 0x022A
    13d0:	48 17       	cp	r20, r24
    13d2:	59 07       	cpc	r21, r25
    13d4:	79 f4       	brne	.+30     	; 0x13f4 <free+0x12c>
    13d6:	30 97       	sbiw	r30, 0x00	; 0
    13d8:	29 f4       	brne	.+10     	; 0x13e4 <free+0x11c>
    13da:	10 92 2c 02 	sts	0x022C, r1
    13de:	10 92 2b 02 	sts	0x022B, r1
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <free+0x120>
    13e4:	13 82       	std	Z+3, r1	; 0x03
    13e6:	12 82       	std	Z+2, r1	; 0x02
    13e8:	22 50       	subi	r18, 0x02	; 2
    13ea:	30 40       	sbci	r19, 0x00	; 0
    13ec:	30 93 2a 02 	sts	0x022A, r19
    13f0:	20 93 29 02 	sts	0x0229, r18
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <do_random>:
    13fa:	a0 e0       	ldi	r26, 0x00	; 0
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e0       	ldi	r30, 0x03	; 3
    1400:	fa e0       	ldi	r31, 0x0A	; 10
    1402:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__prologue_saves__+0x10>
    1406:	ec 01       	movw	r28, r24
    1408:	68 81       	ld	r22, Y
    140a:	79 81       	ldd	r23, Y+1	; 0x01
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	9b 81       	ldd	r25, Y+3	; 0x03
    1410:	61 15       	cp	r22, r1
    1412:	71 05       	cpc	r23, r1
    1414:	81 05       	cpc	r24, r1
    1416:	91 05       	cpc	r25, r1
    1418:	21 f4       	brne	.+8      	; 0x1422 <do_random+0x28>
    141a:	64 e2       	ldi	r22, 0x24	; 36
    141c:	79 ed       	ldi	r23, 0xD9	; 217
    141e:	8b e5       	ldi	r24, 0x5B	; 91
    1420:	97 e0       	ldi	r25, 0x07	; 7
    1422:	2d e1       	ldi	r18, 0x1D	; 29
    1424:	33 ef       	ldi	r19, 0xF3	; 243
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	0e 94 95 08 	call	0x112a	; 0x112a <__divmodsi4>
    142e:	79 01       	movw	r14, r18
    1430:	8a 01       	movw	r16, r20
    1432:	27 ea       	ldi	r18, 0xA7	; 167
    1434:	31 e4       	ldi	r19, 0x41	; 65
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	0e 94 41 08 	call	0x1082	; 0x1082 <__mulsi3>
    143e:	5b 01       	movw	r10, r22
    1440:	6c 01       	movw	r12, r24
    1442:	c8 01       	movw	r24, r16
    1444:	b7 01       	movw	r22, r14
    1446:	2c ee       	ldi	r18, 0xEC	; 236
    1448:	34 ef       	ldi	r19, 0xF4	; 244
    144a:	4f ef       	ldi	r20, 0xFF	; 255
    144c:	5f ef       	ldi	r21, 0xFF	; 255
    144e:	0e 94 41 08 	call	0x1082	; 0x1082 <__mulsi3>
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	2a 0d       	add	r18, r10
    1458:	3b 1d       	adc	r19, r11
    145a:	4c 1d       	adc	r20, r12
    145c:	5d 1d       	adc	r21, r13
    145e:	57 ff       	sbrs	r21, 7
    1460:	04 c0       	rjmp	.+8      	; 0x146a <do_random+0x70>
    1462:	21 50       	subi	r18, 0x01	; 1
    1464:	30 40       	sbci	r19, 0x00	; 0
    1466:	40 40       	sbci	r20, 0x00	; 0
    1468:	50 48       	sbci	r21, 0x80	; 128
    146a:	28 83       	st	Y, r18
    146c:	39 83       	std	Y+1, r19	; 0x01
    146e:	4a 83       	std	Y+2, r20	; 0x02
    1470:	5b 83       	std	Y+3, r21	; 0x03
    1472:	5f 77       	andi	r21, 0x7F	; 127
    1474:	b9 01       	movw	r22, r18
    1476:	ca 01       	movw	r24, r20
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	ea e0       	ldi	r30, 0x0A	; 10
    147e:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__epilogue_restores__+0x10>

00001482 <random_r>:
    1482:	0e 94 fd 09 	call	0x13fa	; 0x13fa <do_random>
    1486:	08 95       	ret

00001488 <random>:
    1488:	8e e2       	ldi	r24, 0x2E	; 46
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <do_random>
    1490:	08 95       	ret

00001492 <srandom>:
    1492:	60 93 2e 01 	sts	0x012E, r22
    1496:	70 93 2f 01 	sts	0x012F, r23
    149a:	80 93 30 01 	sts	0x0130, r24
    149e:	90 93 31 01 	sts	0x0131, r25
    14a2:	08 95       	ret

000014a4 <__prologue_saves__>:
    14a4:	2f 92       	push	r2
    14a6:	3f 92       	push	r3
    14a8:	4f 92       	push	r4
    14aa:	5f 92       	push	r5
    14ac:	6f 92       	push	r6
    14ae:	7f 92       	push	r7
    14b0:	8f 92       	push	r8
    14b2:	9f 92       	push	r9
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	ca 1b       	sub	r28, r26
    14ce:	db 0b       	sbc	r29, r27
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	09 94       	ijmp

000014dc <__epilogue_restores__>:
    14dc:	2a 88       	ldd	r2, Y+18	; 0x12
    14de:	39 88       	ldd	r3, Y+17	; 0x11
    14e0:	48 88       	ldd	r4, Y+16	; 0x10
    14e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ee:	b9 84       	ldd	r11, Y+9	; 0x09
    14f0:	c8 84       	ldd	r12, Y+8	; 0x08
    14f2:	df 80       	ldd	r13, Y+7	; 0x07
    14f4:	ee 80       	ldd	r14, Y+6	; 0x06
    14f6:	fd 80       	ldd	r15, Y+5	; 0x05
    14f8:	0c 81       	ldd	r16, Y+4	; 0x04
    14fa:	1b 81       	ldd	r17, Y+3	; 0x03
    14fc:	aa 81       	ldd	r26, Y+2	; 0x02
    14fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1500:	ce 0f       	add	r28, r30
    1502:	d1 1d       	adc	r29, r1
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	ed 01       	movw	r28, r26
    1510:	08 95       	ret

00001512 <__do_global_dtors>:
    1512:	10 e0       	ldi	r17, 0x00	; 0
    1514:	cc e6       	ldi	r28, 0x6C	; 108
    1516:	d0 e0       	ldi	r29, 0x00	; 0
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <__do_global_dtors+0x10>
    151a:	fe 01       	movw	r30, r28
    151c:	0e 94 c6 08 	call	0x118c	; 0x118c <__tablejump__>
    1520:	22 96       	adiw	r28, 0x02	; 2
    1522:	ce 36       	cpi	r28, 0x6E	; 110
    1524:	d1 07       	cpc	r29, r17
    1526:	c9 f7       	brne	.-14     	; 0x151a <__do_global_dtors+0x8>
    1528:	f8 94       	cli

0000152a <__stop_program>:
    152a:	ff cf       	rjmp	.-2      	; 0x152a <__stop_program>
